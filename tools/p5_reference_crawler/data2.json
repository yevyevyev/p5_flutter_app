[{
  "groupName": "Environment",
  "subgroups": [{
    "tokens": [{
      "label": "describe()",
      "description": "Creates a screen reader accessible description for the canvas.\nThe first parameter should be a string with a description of the canvas.\nThe second parameter is optional. If specified, it determines how the\ndescription is displayed.",
      "examples": ["describe('pink square with red heart in the bottom right corner');\nbackground('pink');\nfill('red');\nnoStroke();\nellipse(67, 67, 20, 20);\nellipse(83, 67, 20, 20);\ntriangle(91, 73, 75, 95, 59, 73);", "let x = 0;\n\nfunction draw() {\n    if (x > 100) {\n        x = 0;\n    }\n    background(220);\n    fill(0, 255, 0);\n    ellipse(x, 50, 40, 40);\n    x = x + 0.1;\n    describe('green circle at x pos ' + round(x) + ' moving to the right');\n}"],
      "href": "#/p5/describe",
      "syntax": "describe(text, [display])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "description of the canvas",
        "paramName": "text"
      }, {
        "paramType": "Constant",
        "paramDescription": "either LABEL or FALLBACK",
        "paramName": "display"
      }]
    }, {
      "label": "describeElement()",
      "description": "This function creates a screen-reader accessible\ndescription for elements —shapes or groups of shapes that create\nmeaning together— in the canvas. The first paramater should\nbe the name of the element. The second parameter should be a string\nwith a description of the element. The third parameter is optional.\nIf specified, it determines how the element description is displayed.",
      "examples": ["describe('Heart and yellow circle over pink background');\nnoStroke();\nbackground('pink');\ndescribeElement('Circle', 'Yellow circle in the top left corner');\nfill('yellow');\nellipse(25, 25, 40, 40);\ndescribeElement('Heart', 'red heart in the bottom right corner');\nfill('red');\nellipse(66.6, 66.6, 20, 20);\nellipse(83.2, 66.6, 20, 20);\ntriangle(91.2, 72.6, 75, 95, 58.6, 72.6);"],
      "href": "#/p5/describeElement",
      "syntax": "describeElement(name, text, [display])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the element",
        "paramName": "name"
      }, {
        "paramType": "String",
        "paramDescription": "description of the element",
        "paramName": "text"
      }, {
        "paramType": "Constant",
        "paramDescription": "either LABEL or FALLBACK",
        "paramName": "display"
      }]
    }, {
      "label": "textOutput()",
      "description": "<code class=\"  language-javascript\"><span class=\"token function\">textOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> creates a screenreader\naccessible output that describes the shapes present on the canvas.\nThe general description of the canvas includes canvas size,\ncanvas color, and number of elements in the canvas\n(example: 'Your output is a, 400 by 400 pixels, lavender blue\ncanvas containing the following 4 shapes:'). This description\nis followed by a list of shapes where the color, position, and area\nof each shape are described (example: \"orange ellipse at top left\ncovering 1% of the canvas\"). Each element can be selected to get\nmore details. A table of elements is also provided. In this table,\nshape, color, location, coordinates and area are described\n(example: \"orange ellipse location=top left area=2\").",
      "examples": ["textOutput();\nbackground(148, 196, 0);\nfill(255, 0, 0);\nellipse(20, 20, 20, 20);\nfill(0, 0, 255);\nrect(50, 50, 50, 50);", "let x = 0;\n\nfunction draw() {\n    textOutput();\n    background(148, 196, 0);\n    fill(255, 0, 0);\n    ellipse(x, 20, 20, 20);\n    fill(0, 0, 255);\n    rect(50, 50, 50, 50);\n    ellipse(20, 20, 20, 20);\n    x + = 0.1;\n}"],
      "href": "#/p5/textOutput",
      "syntax": "textOutput([display])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either FALLBACK or LABEL",
        "paramName": "display"
      }]
    }, {
      "label": "gridOutput()",
      "description": "<code class=\"  language-javascript\"><span class=\"token function\">gridOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> lays out the\ncontent of the canvas in the form of a grid (html table) based\non the spatial location of each shape. A brief\ndescription of the canvas is available before the table output.\nThis description includes: color of the background, size of the canvas,\nnumber of objects, and object types (example: \"lavender blue canvas is\n200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid\ndescribes the content spatially, each element is placed on a cell of the\ntable depending on its position. Within each cell an element the color\nand type of shape of that element are available (example: \"orange ellipse\").\nThese descriptions can be selected individually to get more details.\nA list of elements where shape, color, location, and area are described\n(example: \"orange ellipse location=top left area=1%\") is also available.",
      "examples": ["gridOutput();\nbackground(148, 196, 0);\nfill(255, 0, 0);\nellipse(20, 20, 20, 20);\nfill(0, 0, 255);\nrect(50, 50, 50, 50);", "let x = 0;\n\nfunction draw() {\n    gridOutput();\n    background(148, 196, 0);\n    fill(255, 0, 0);\n    ellipse(x, 20, 20, 20);\n    fill(0, 0, 255);\n    rect(50, 50, 50, 50);\n    ellipse(20, 20, 20, 20);\n    x + = 0.1;\n}"],
      "href": "#/p5/gridOutput",
      "syntax": "gridOutput([display])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either FALLBACK or LABEL",
        "paramName": "display"
      }]
    }, {
      "label": "print()",
      "description": "The <a href=\"#/p5/print\" class=\"code\">print()</a> function writes to the console area of\nyour browser. This function is often helpful for looking at the data a program\nis producing. This function creates a new line of text for each call to\nthe function. Individual elements can be separated with quotes (\"\") and joined\nwith the addition operator (+).",
      "examples": ["let x = 10;\nprint('The value of x is ' + x);\n\n// prints \"The value of x is 10\" "],
      "href": "#/p5/print",
      "syntax": "print(contents)",
      "parameters": [{
        "paramType": "Any",
        "paramDescription": "any combination of Number, String, Object, Boolean, Array to print",
        "paramName": "contents"
      }]
    }, {
      "label": "frameCount",
      "description": "The system variable <a href=\"#/p5/frameCount\" class=\"code\">frameCount</a> contains the\nnumber of frames that have been displayed since the program started. Inside\n<a href=\"#/p5/setup\" class=\"code\">setup()</a> the value is 0, after the first iteration\nof <a href=\"#/p5/draw\" class=\"code\">draw()</a> it is 1, etc.",
      "examples": ["function setup() {\n    frameRate(30);\n    textSize(30);\n    textAlign(CENTER);\n}\n\nfunction draw() {\n    background(200);\n    text(frameCount, width / 2, height / 2);\n}"],
      "href": "#/p5/frameCount",
      "syntax": "frameCount",
      "parameters": []
    }, {
      "label": "deltaTime",
      "description": "The system variable <a href=\"#/p5/deltaTime\" class=\"code\">deltaTime</a> contains the time\ndifference between the beginning of the previous frame and the beginning\nof the current frame in milliseconds.",
      "examples": ["let rectX = 0;\nlet fr = 30;\n//starting FPS \n\nlet clr;\n\nfunction setup() {\n    background(200);\n    frameRate(fr);\n    // Attempt to refresh at starting FPS \n\n    clr = color(255, 0, 0);\n}\n\nfunction draw() {\n    background(200);\n    rectX = rectX + 1 * (deltaTime / 50);\n    // Move Rectangle in relation to deltaTime \n\n\n    if (rectX >= width) {\n\n        // If you go off screen. \n\n        if (fr === 30) {\n            clr = color(0, 0, 255);\n            fr = 10;\n            frameRate(fr);\n            // make frameRate 10 FPS \n\n        } else {\n            clr = color(255, 0, 0);\n            fr = 30;\n            frameRate(fr);\n            // make frameRate 30 FPS \n\n        }\n        rectX = 0;\n    }\n    fill(clr);\n    rect(rectX, 40, 20, 20);\n}"],
      "href": "#/p5/deltaTime",
      "syntax": "deltaTime",
      "parameters": []
    }, {
      "label": "focused",
      "description": "Confirms if the window a p5.js program is in is \"focused,\" meaning that\nthe sketch will accept mouse or keyboard input. This variable is\n\"true\" if the window is focused and \"false\" if not.",
      "examples": ["// To demonstrate, put two windows side by side. \n\n\n// Click on the window that the p5 sketch isn't in! \n\nfunction draw() {\n    background(200);\n    noStroke();\n    fill(0, 200, 0);\n    ellipse(25, 25, 50, 50);\n\n    if (!focused) {\n\n        // or \"if (focused === false)\" \n\n        stroke(200, 0, 0);\n        line(0, 0, 100, 100);\n        line(100, 0, 0, 100);\n    }\n}"],
      "href": "#/p5/focused",
      "syntax": "focused",
      "parameters": []
    }, {
      "label": "cursor()",
      "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16×16 or 32×32 pixels. The values for parameters x and y\nmust be less than the dimensions of the image.",
      "examples": ["// Move the mouse across the quadrants \n\n\n// to see the cursor change \n\nfunction draw() {\n    line(width / 2, 0, width / 2, height);\n    line(0, height / 2, width, height / 2);\n    if (mouseX < 50 && mouseY < 50) {\n        cursor(CROSS);\n    } else if (mouseX > 50 && mouseY < 50) {\n        cursor('progress');\n    } else if (mouseX > 50 && mouseY > 50) {\n        cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n    } else {\n        cursor('grab');\n    }\n}"],
      "href": "#/p5/cursor",
      "syntax": "cursor(type, [x], [y])",
      "parameters": [{
        "paramType": "String|Constant",
        "paramDescription": "Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT Native CSS properties: 'grab', 'progress', 'cell' etc. External: path for cursor's images (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png) For more information on Native CSS cursors and url visit: https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",
        "paramName": "type"
      }, {
        "paramType": "Number",
        "paramDescription": "the horizontal active spot of the cursor (must be less than 32)",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "the vertical active spot of the cursor (must be less than 32)",
        "paramName": "y"
      }]
    }, {
      "label": "frameRate()",
      "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within\n<a href=\"#/p5/setup\" class=\"code\">setup()</a> is recommended. The default frame rate is\nbased on the frame rate of the display (here also called \"refresh rate\"),\nwhich is set to 60 frames per second on most computers. A frame rate of 24\nframes per second (usual for movies) or above will be enough for smooth\nanimations. This is the same as setFrameRate(val).",
      "examples": ["let rectX = 0;\nlet fr = 30;\n//starting FPS \n\nlet clr;\n\nfunction setup() {\n    background(200);\n    frameRate(fr);\n    // Attempt to refresh at starting FPS \n\n    clr = color(255, 0, 0);\n}\n\nfunction draw() {\n    background(200);\n    rectX + = 1;\n    // Move Rectangle \n\n\n    if (rectX >= width) {\n\n        // If you go off screen. \n\n        if (fr === 30) {\n            clr = color(0, 0, 255);\n            fr = 10;\n            frameRate(fr);\n            // make frameRate 10 FPS \n\n        } else {\n            clr = color(255, 0, 0);\n            fr = 30;\n            frameRate(fr);\n            // make frameRate 30 FPS \n\n        }\n        rectX = 0;\n    }\n    fill(clr);\n    rect(rectX, 40, 20, 20);\n}"],
      "href": "#/p5/frameRate",
      "syntax": "frameRate(fps)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number of frames to be displayed every second",
        "paramName": "fps"
      }]
    }, {
      "label": "getTargetFrameRate()",
      "description": "Returns _targetFrameRate variable. The default _targetFrameRate is set to 60.\nThis could be changed by calling frameRate() and setting it to the desired\nvalue. When getTargetFrameRate() is called, it should return the value that was set.",
      "examples": ["function draw() {\n    frameRate(20);\n    text(getTargetFrameRate(), width / 2, height / 2);\n}"],
      "href": "#/p5/getTargetFrameRate",
      "syntax": "getTargetFrameRate()",
      "parameters": []
    }, {
      "label": "noCursor()",
      "description": "Hides the cursor from view.",
      "examples": ["function setup() {\n    noCursor();\n}\n\nfunction draw() {\n    background(200);\n    ellipse(mouseX, mouseY, 10, 10);\n}"],
      "href": "#/p5/noCursor",
      "syntax": "noCursor()",
      "parameters": []
    }, {
      "label": "webglVersion",
      "description": "If the sketch was created in WebGL mode, then <code>weglVersion</code> will indicate\nwhich version of WebGL it is using. It will try to create a WebGL2 canvas\nunless you have requested WebGL1 via <code>setAttributes({ version: 1 })</code>, and\nwill fall back to WebGL1 if WebGL2 is not available.",
      "examples": ["let myFont;\n\nfunction preload() {\n    myFont = loadFont('assets/inconsolata.otf');\n}\n\nfunction setup() {\n    createCanvas(100, 50, WEBGL);\n\n    // Uncomment the following line to see the behavior change in WebGL 1: \n\n\n    // setAttributes({ version: 1 }) \n\n\n    const graphic = createGraphics(30, 30);\n    graphic.background(255);\n    graphic.noStroke();\n    graphic.fill(200);\n    graphic.rect(0, 0, graphic.width / 2, graphic.height / 2);\n    graphic.rect(\n        graphic.width / 2, graphic.height / 2,\n        graphic.width / 2, graphic.height / 2\n    );\n\n    noStroke();\n    translate(-width / 2, -height / 2);\n    textureWrap(REPEAT);\n    texture(graphic);\n    beginShape(QUADS);\n    vertex(0, 0, 0, 0, 0);\n    vertex(width, 0, 0, width, 0);\n    vertex(width, height, 0, width, height);\n    vertex(0, height, 0, 0, height);\n    endShape();\n\n    textFont(myFont);\n    textAlign(CENTER, CENTER);\n    textSize(30);\n    fill(0);\n    text('WebGL' + (webglVersion === WEBGL2 ? 2 : 1), 0, 0, width, height);\n}"],
      "href": "#/p5/webglVersion",
      "syntax": "webglVersion",
      "parameters": []
    }, {
      "label": "displayWidth",
      "description": "System variable that stores the width of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\" class=\"code\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
      "examples": ["createCanvas(displayWidth, displayHeight);"],
      "href": "#/p5/displayWidth",
      "syntax": "displayWidth",
      "parameters": []
    }, {
      "label": "displayHeight",
      "description": "System variable that stores the height of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\" class=\"code\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
      "examples": ["createCanvas(displayWidth, displayHeight);"],
      "href": "#/p5/displayHeight",
      "syntax": "displayHeight",
      "parameters": []
    }, {
      "label": "windowWidth",
      "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth.",
      "examples": ["createCanvas(windowWidth, windowHeight);"],
      "href": "#/p5/windowWidth",
      "syntax": "windowWidth",
      "parameters": []
    }, {
      "label": "windowHeight",
      "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight.",
      "examples": ["createCanvas(windowWidth, windowHeight);"],
      "href": "#/p5/windowHeight",
      "syntax": "windowHeight",
      "parameters": []
    }, {
      "label": "windowResized()",
      "description": "The <a href=\"#/p5/windowResized\" class=\"code\">windowResized()</a> function is called once\nevery time the browser window is resized. This is a good place to resize the\ncanvas or do any other adjustments to accommodate the new window size.",
      "examples": ["function setup() {\n    createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n    background(0, 100, 200);\n}\n\nfunction windowResized() {\n    resizeCanvas(windowWidth, windowHeight);\n}"],
      "href": "#/p5/windowResized",
      "syntax": "windowResized([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional Event callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "width",
      "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the <a href=\"#/p5/createCanvas\" class=\"code\">createCanvas()</a> function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\n<a href=\"#/p5/createCanvas\" class=\"code\">createCanvas()</a> is not used in a program.",
      "examples": [],
      "href": "#/p5/width",
      "syntax": "width",
      "parameters": []
    }, {
      "label": "height",
      "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the <a href=\"#/p5/createCanvas\" class=\"code\">createCanvas()</a> function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\n<a href=\"#/p5/createCanvas\" class=\"code\">createCanvas()</a> is not used in a program.",
      "examples": [],
      "href": "#/p5/height",
      "syntax": "height",
      "parameters": []
    }, {
      "label": "fullscreen()",
      "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow.",
      "examples": ["// Clicking in the box toggles fullscreen on and off. \n\nfunction setup() {\n    background(200);\n}\n\nfunction mousePressed() {\n    if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n        let fs = fullscreen();\n        fullscreen(!fs);\n    }\n}"],
      "href": "#/p5/fullscreen",
      "syntax": "fullscreen([val])",
      "parameters": [{
        "paramType": "Boolean",
        "paramDescription": "whether the sketch should be in fullscreen mode or not",
        "paramName": "val"
      }]
    }, {
      "label": "pixelDensity()",
      "description": "Sets the pixel scaling for high pixel density displays. By default\npixel density is set to match display density, call pixelDensity(1)\nto turn this off. Calling <a href=\"#/p5/pixelDensity\" class=\"code\">pixelDensity()</a> with no arguments returns\nthe current pixel density of the sketch.",
      "examples": ["function setup() {\n    pixelDensity(1);\n    createCanvas(100, 100);\n    background(200);\n    ellipse(width / 2, height / 2, 50, 50);\n}", "function setup() {\n    pixelDensity(3.0);\n    createCanvas(100, 100);\n    background(200);\n    ellipse(width / 2, height / 2, 50, 50);\n}"],
      "href": "#/p5/pixelDensity",
      "syntax": "pixelDensity(val)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "whether or how much the sketch should scale",
        "paramName": "val"
      }]
    }, {
      "label": "displayDensity()",
      "description": "Returns the pixel density of the current display the sketch is running on.",
      "examples": ["function setup() {\n    let density = displayDensity();\n    pixelDensity(density);\n    createCanvas(100, 100);\n    background(200);\n    ellipse(width / 2, height / 2, 50, 50);\n}"],
      "href": "#/p5/displayDensity",
      "syntax": "displayDensity()",
      "parameters": []
    }, {
      "label": "getURL()",
      "description": "Gets the current URL. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using the editor's present or share URLs.",
      "examples": ["let url;\nlet x = 100;\n\nfunction setup() {\n    fill(0);\n    noStroke();\n    url = getURL();\n}\n\nfunction draw() {\n    background(200);\n    text(url, x, height / 2);\n    x--;\n}"],
      "href": "#/p5/getURL",
      "syntax": "getURL()",
      "parameters": []
    }, {
      "label": "getURLPath()",
      "description": "Gets the current URL path as an array. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using the editor's present or share URLs.",
      "examples": ["function setup() {\n    let urlPath = getURLPath();\n    for (let i = 0; i < urlPath.length; i++) {\n        text(urlPath[i], 10, i * 20 + 20);\n    }\n}"],
      "href": "#/p5/getURLPath",
      "syntax": "getURLPath()",
      "parameters": []
    }, {
      "label": "getURLParams()",
      "description": "Gets the current URL params as an Object. Note: when using the\np5 Editor, this will return an empty object because the sketch\nis embedded in an iframe. It will work correctly if you view the\nsketch using the editor's present or share URLs.",
      "examples": ["// Example: http://p5js.org?year=2014&month=May&day=15 \n\n\nfunction setup() {\n    let params = getURLParams();\n    text(params.day, 10, 20);\n    text(params.month, 10, 40);\n    text(params.year, 10, 60);\n}"],
      "href": "#/p5/getURLParams",
      "syntax": "getURLParams()",
      "parameters": []
    }]
  }]
}, {
  "groupName": "Color",
  "subgroups": [{
    "subgroupName": "Creating &amp; Reading",
    "tokens": [{
      "label": "alpha()",
      "description": "Extracts the alpha (transparency) value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["noStroke();\nconst c = color(0, 126, 255, 102);\nfill(c);\nrect(15, 15, 35, 70);\n\n// Sets 'alphaValue' to 102. \n\nconst alphaValue = alpha(c);\nfill(alphaValue);\nrect(50, 15, 35, 70);\ndescribe('Two rectangles. The left one is light blue and the right one is charcoal gray.');"],
      "href": "#/p5/alpha",
      "syntax": "alpha(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "blue()",
      "description": "Extracts the blue value from a <a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object,\narray of color components, or CSS color string.",
      "examples": ["const c = color(175, 100, 220);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'blueValue' to 220. \n\nconst blueValue = blue(c);\nfill(0, 0, blueValue);\nrect(50, 20, 35, 60);\ndescribe('Two rectangles. The left one is light purple and the right one is royal blue.');"],
      "href": "#/p5/blue",
      "syntax": "blue(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "brightness()",
      "description": "Extracts the HSB brightness value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["noStroke();\ncolorMode(HSB, 255);\nconst c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'brightValue' to 255. \n\nconst brightValue = brightness(c);\nfill(brightValue);\nrect(50, 20, 35, 60);\ndescribe('Two rectangles. The left one is salmon pink and the right one is white.');", "noStroke();\ncolorMode(HSB, 255);\nconst c = color('hsb(60, 100%, 50%)');\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'brightValue' to 127.5 (50% of 255) \n\nconst brightValue = brightness(c);\nfill(brightValue);\nrect(50, 20, 35, 60);\ndescribe('Two rectangles. The left one is olive and the right one is gray.');"],
      "href": "#/p5/brightness",
      "syntax": "brightness(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "color()",
      "description": "Creates a <a href=\"#/p5/p5.Color\" class=\"code\">p5.Color</a> object. By default, the\nparameters are interpreted as RGB values. Calling <code>color(255, 204, 0)</code> will\nreturn a bright yellow color. The way these parameters are interpreted may\nbe changed with the <a href=\"#/p5/colorMode\" class=\"code\">colorMode()</a> function.",
      "examples": ["const c = color(255, 204, 0);\nfill(c);\nnoStroke();\nrect(30, 20, 55, 55);\ndescribe('A yellow rectangle on a gray canvas.');", "// RGB values. \n\nlet c = color(255, 204, 0);\nfill(c);\nnoStroke();\ncircle(25, 25, 80);\n\n// A grayscale value. \n\nc = color(65);\nfill(c);\ncircle(75, 75, 80);\ndescribe(\n    'Two ellipses. The circle in the top-left corner is yellow and the one at the bottom-right is gray.'\n);", "// A CSS named color. \n\nconst c = color('magenta');\nfill(c);\nnoStroke();\nsquare(20, 20, 60);\ndescribe('A magenta square on a gray canvas.');", "// CSS hex color codes. \n\nnoStroke();\nlet c = color('#0f0');\nfill(c);\nrect(0, 10, 45, 80);\nc = color('#00ff00');\nfill(c);\nrect(55, 10, 45, 80);\ndescribe('Two bright green rectangles on a gray canvas.');", "// RGB and RGBA color strings. \n\nnoStroke();\nlet c = color('rgb(0,0,255)');\nfill(c);\nsquare(10, 10, 35);\nc = color('rgb(0%, 0%, 100%)');\nfill(c);\nsquare(55, 10, 35);\nc = color('rgba(0, 0, 255, 1)');\nfill(c);\nsquare(10, 55, 35);\nc = color('rgba(0%, 0%, 100%, 1)');\nfill(c);\nsquare(55, 55, 35);\ndescribe('Four blue squares in corners of a gray canvas.');", "// HSL and HSLA color strings. \n\nlet c = color('hsl(160, 100%, 50%)');\nnoStroke();\nfill(c);\nrect(0, 10, 45, 80);\nc = color('hsla(160, 100%, 50%, 0.5)');\nfill(c);\nrect(55, 10, 45, 80);\ndescribe('Two sea green rectangles. A darker rectangle on the left and a brighter one on the right.');", "// HSB and HSBA color strings. \n\nlet c = color('hsb(160, 100%, 50%)');\nnoStroke();\nfill(c);\nrect(0, 10, 45, 80);\nc = color('hsba(160, 100%, 50%, 0.5)');\nfill(c);\nrect(55, 10, 45, 80);\ndescribe('Two green rectangles. A darker rectangle on the left and a brighter one on the right.');", "// Changing color modes. \n\nnoStroke();\nlet c = color(50, 55, 100);\nfill(c);\nrect(0, 10, 45, 80);\ncolorMode(HSB, 100);\nc = color(50, 55, 100);\nfill(c);\nrect(55, 10, 45, 80);\ndescribe('Two blue rectangles. A darker rectangle on the left and a brighter one on the right.');"],
      "href": "#/p5/color",
      "syntax": "color(gray, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black.",
        "paramName": "gray"
      }, {
        "paramType": "Number",
        "paramDescription": "alpha value relative to current color range (default is 0-255).",
        "paramName": "alpha"
      }, {
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range.",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range.",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range.",
        "paramName": "v3"
      }, {
        "paramType": "String",
        "paramDescription": "a color string.",
        "paramName": "value"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red, green, blue, and alpha components of the color.",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "",
        "paramName": "color"
      }]
    }, {
      "label": "green()",
      "description": "Extracts the green value from a <a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object,\narray of color components, or CSS color string.",
      "examples": ["const c = color(20, 75, 200);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'greenValue' to 75. \n\nconst greenValue = green(c);\nfill(0, greenValue, 0);\nrect(50, 20, 35, 60);\ndescribe('Two rectangles. The rectangle on the left is blue and the one on the right is green.');"],
      "href": "#/p5/green",
      "syntax": "green(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "hue()",
      "description": "Extracts the hue value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["noStroke();\ncolorMode(HSB, 255);\nconst c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'hueValue' to 0. \n\nconst hueValue = hue(c);\nfill(hueValue);\nrect(50, 20, 35, 60);\ndescribe(\n    'Two rectangles. The rectangle on the left is salmon pink and the one on the right is black.'\n);"],
      "href": "#/p5/hue",
      "syntax": "hue(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "lerpColor()",
      "description": "Blends two colors to find a third color between them. The <code>amt</code> parameter\nspecifies the amount to interpolate between the two values. 0 is equal to\nthe first color, 0.1 is very near the first color, 0.5 is halfway between\nthe two colors, and so on. Negative numbers are set to 0. Numbers greater\nthan 1 are set to 1. This differs from the behavior of\n<a href=\"#/lerp\">lerp</a>. It's necessary because numbers outside of the\ninterval [0, 1] will produce strange and unexpected colors.",
      "examples": ["colorMode(RGB);\nstroke(255);\nbackground(51);\nconst from = color(218, 165, 32);\nconst to = color(72, 61, 139);\ncolorMode(RGB);\nconst interA = lerpColor(from, to, 0.33);\nconst interB = lerpColor(from, to, 0.66);\nfill(from);\nrect(10, 20, 20, 60);\nfill(interA);\nrect(30, 20, 20, 60);\nfill(interB);\nrect(50, 20, 20, 60);\nfill(to);\nrect(70, 20, 20, 60);\ndescribe(\n    'Four rectangles with white edges. From left to right, the rectangles are tan, brown, brownish purple, and purple.'\n);"],
      "href": "#/p5/lerpColor",
      "syntax": "lerpColor(c1, c2, amt)",
      "parameters": [{
        "paramType": "p5.Color",
        "paramDescription": "interpolate from this color.",
        "paramName": "c1"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "interpolate to this color.",
        "paramName": "c2"
      }, {
        "paramType": "Number",
        "paramDescription": "number between 0 and 1.",
        "paramName": "amt"
      }]
    }, {
      "label": "lightness()",
      "description": "Extracts the HSL lightness value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["noStroke();\ncolorMode(HSL);\nconst c = color(156, 100, 50, 1);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'lightValue' to 50. \n\nconst lightValue = lightness(c);\nfill(lightValue);\nrect(50, 20, 35, 60);\ndescribe('Two rectangles. The rectangle on the left is light green and the one on the right is gray.');"],
      "href": "#/p5/lightness",
      "syntax": "lightness(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "red()",
      "description": "Extracts the red value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["const c = color(255, 204, 0);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'redValue' to 255. \n\nconst redValue = red(c);\nfill(redValue, 0, 0);\nrect(50, 20, 35, 60);\ndescribe(\n    'Two rectangles with black edges. The rectangle on the left is yellow and the one on the right is red.'\n);"],
      "href": "#/p5/red",
      "syntax": "red(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "saturation()",
      "description": "Extracts the saturation value from a\n<a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, array of color components, or\nCSS color string.",
      "examples": ["noStroke();\ncolorMode(HSB, 255);\nconst c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\n\n// Sets 'satValue' to 126. \n\nconst satValue = saturation(c);\nfill(satValue);\nrect(50, 20, 35, 60);\ndescribe(\n    'Two rectangles. The rectangle on the left is deep pink and the one on the right is gray.'\n);"],
      "href": "#/p5/saturation",
      "syntax": "saturation(color)",
      "parameters": [{
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "p5.Color object, array of color components, or CSS color string.",
        "paramName": "color"
      }]
    }, {
      "label": "p5.Color",
      "description": "A class to describe a color. Each <code>p5.Color</code> object stores the color mode\nand level maxes that were active during its construction. These values are\nused to interpret the arguments passed to the object's constructor. They\nalso determine output formatting such as when\n<a href=\"#/p5/saturation\" class=\"code\">saturation()</a> is called.",
      "examples": [],
      "href": "#/p5.Color",
      "syntax": "new p5.Color([pInst], vals)",
      "parameters": [{
        "paramType": "P5",
        "paramDescription": "pointer to p5 instance.",
        "paramName": "pInst"
      }, {
        "paramType": "Number[]|String",
        "paramDescription": "an array containing the color values for red, green, blue and alpha channel or CSS color.",
        "paramName": "vals"
      }]
    }]
  }, {
    "subgroupName": "Setting",
    "tokens": [{
      "label": "background()",
      "description": "Sets the color used for the background of the canvas. By default, the\nbackground is transparent. This function is typically used within\n<a href=\"#/p5/draw\" class=\"code\">draw()</a> to clear the display window at the beginning\nof each frame. It can also be used inside <a href=\"#/p5/setup\" class=\"code\">setup()</a> to\nset the background on the first frame of animation.",
      "examples": ["// A grayscale integer value. \n\nbackground(51);\ndescribe('A canvas with a dark charcoal gray background.');", "// A grayscale integer value and an alpha value. \n\nbackground(51, 0.4);\ndescribe('A canvas with a transparent gray background.');", "// R, G & B integer values. \n\nbackground(255, 204, 0);\ndescribe('A canvas with a yellow background.');", "// H, S & B integer values. \n\ncolorMode(HSB);\nbackground(255, 204, 100);\ndescribe('A canvas with a royal blue background.');", "// A CSS named color. \n\nbackground('red');\ndescribe('A canvas with a red background.');", "// Three-digit hex RGB notation. \n\nbackground('#fae');\ndescribe('A canvas with a pink background.');", "// Six-digit hex RGB notation. \n\nbackground('#222222');\ndescribe('A canvas with a black background.');", "// Integer RGB notation. \n\nbackground('rgb(0,255,0)');\ndescribe('A canvas with a bright green background.');", "// Integer RGBA notation. \n\nbackground('rgba(0,255,0, 0.25)');\ndescribe('A canvas with a transparent green background.');", "// Percentage RGB notation. \n\nbackground('rgb(100%,0%,10%)');\ndescribe('A canvas with a red background.');", "// Percentage RGBA notation. \n\nbackground('rgba(100%,0%,100%,0.5)');\ndescribe('A canvas with a transparent purple background.');", "// A p5.Color object. \n\nlet c = color(0, 0, 255);\nbackground(c);\ndescribe('A canvas with a blue background.');"],
      "href": "#/p5/background",
      "syntax": "background(color)",
      "parameters": [{
        "paramType": "p5.Color",
        "paramDescription": "any value created by the color() function",
        "paramName": "color"
      }, {
        "paramType": "String",
        "paramDescription": "color string, possible formats include: integer rgb() or rgba(), percentage rgb() or rgba(), 3-digit hex, 6-digit hex.",
        "paramName": "colorstring"
      }, {
        "paramType": "Number",
        "paramDescription": "opacity of the background relative to current color range (default is 0-255).",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "specifies a value between white and black.",
        "paramName": "gray"
      }, {
        "paramType": "Number",
        "paramDescription": "red value if color mode is RGB, or hue value if color mode is HSB.",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green value if color mode is RGB, or saturation value if color mode is HSB.",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue value if color mode is RGB, or brightness value if color mode is HSB.",
        "paramName": "v3"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red, green, blue and alpha components of the color.",
        "paramName": "values"
      }, {
        "paramType": "p5.Image",
        "paramDescription": "image created with loadImage() or createImage(), to set as background. (must be same size as the sketch window).",
        "paramName": "image"
      }]
    }, {
      "label": "clear()",
      "description": "Clears the pixels on the canvas. This function makes every pixel 100%\ntransparent. Calling <code>clear()</code> doesn't clear objects created by <code>createX()</code>\nfunctions such as <a href=\"#/p5/createGraphics\" class=\"code\">createGraphics()</a>,\n<a href=\"#/p5/createVideo\" class=\"code\">createVideo()</a>, and\n<a href=\"#/p5/createImg\" class=\"code\">createImg()</a>. These objects will remain\nunchanged after calling clear() and can be redrawn.",
      "examples": ["function draw() {\n    circle(mouseX, mouseY, 20);\n    describe('A white circle is drawn at the mouse x- and y-coordinates.');\n}\n\nfunction mousePressed() {\n    clear();\n    background(128);\n    describe('The canvas is cleared when the mouse is clicked.');\n}", "let pg;\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(200);\n\n    pg = createGraphics(60, 60);\n    pg.background(200);\n    pg.noStroke();\n    pg.circle(pg.width / 2, pg.height / 2, 15);\n    image(pg, 20, 20);\n    describe('A white circle drawn on a gray square. The square gets smaller when the mouse is pressed.');\n}\n\nfunction mousePressed() {\n    clear();\n    image(pg, 20, 20);\n}"],
      "href": "#/p5/clear",
      "syntax": "clear(r, g, b, a)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "normalized red value.",
        "paramName": "r"
      }, {
        "paramType": "Number",
        "paramDescription": "normalized green value.",
        "paramName": "g"
      }, {
        "paramType": "Number",
        "paramDescription": "normalized blue value.",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "normalized alpha value.",
        "paramName": "a"
      }]
    }, {
      "label": "colorMode()",
      "description": "Changes the way p5.js interprets color data. By default, the numeric\nparameters for <a href=\"#/p5/fill\" class=\"code\">fill()</a>,\n<a href=\"#/p5/stroke\" class=\"code\">stroke()</a>,\n<a href=\"#/p5/background\" class=\"code\">background()</a>, and\n<a href=\"#/p5/color\" class=\"code\">color()</a> are defined by values between 0 and 255\nusing the RGB color model. This is equivalent to calling\n<code>colorMode(RGB, 255)</code>. Pure red is <code>color(255, 0, 0)</code> in this model.",
      "examples": ["noStroke();\ncolorMode(RGB, 100);\nfor (let i = 0; i < 100; i + = 1) {\n    for (let j = 0; j < 100; j + = 1) {\n        stroke(i, j, 0);\n        point(i, j);\n    }\n}\ndescribe(\n    'A diagonal green to red gradient from bottom-left to top-right with shading transitioning to black at top-left corner.'\n);", "noStroke();\ncolorMode(HSB, 100);\nfor (let i = 0; i < 100; i++) {\n    for (let j = 0; j < 100; j++) {\n        stroke(i, j, 100);\n        point(i, j);\n    }\n}\ndescribe('A rainbow gradient from left-to-right. Brightness transitions to white at the top.');", "colorMode(RGB, 255);\nlet myColor = color(180, 175, 230);\nbackground(myColor);\ncolorMode(RGB, 1);\nlet redValue = red(myColor);\nlet greenValue = green(myColor);\nlet blueValue = blue(myColor);\ntext(`Red: ${redValue}`, 10, 10, 80, 80);\ntext(`Green: ${greenValue}`, 10, 40, 80, 80);\ntext(`Blue: ${blueValue}`, 10, 70, 80, 80);\ndescribe('A purple canvas with the red, green, and blue decimal values of the color written on it.');", "noFill();\ncolorMode(RGB, 255, 255, 255, 1);\nbackground(255);\nstrokeWeight(4);\nstroke(255, 0, 10, 0.3);\ncircle(40, 40, 50);\ncircle(50, 60, 50);\ndescribe('Two overlapping translucent pink circle outlines.');"],
      "href": "#/p5/colorMode",
      "syntax": "colorMode(mode, [max])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either RGB, HSB or HSL, corresponding to Red/Green/Blue and Hue/Saturation/Brightness (or Lightness).",
        "paramName": "mode"
      }, {
        "paramType": "Number",
        "paramDescription": "range for all values.",
        "paramName": "max"
      }, {
        "paramType": "Number",
        "paramDescription": "range for the red or hue depending on the current color mode.",
        "paramName": "max1"
      }, {
        "paramType": "Number",
        "paramDescription": "range for the green or saturation depending on the current color mode.",
        "paramName": "max2"
      }, {
        "paramType": "Number",
        "paramDescription": "range for the blue or brightness/lightness depending on the current color mode.",
        "paramName": "max3"
      }, {
        "paramType": "Number",
        "paramDescription": "range for the alpha.",
        "paramName": "maxA"
      }]
    }, {
      "label": "fill()",
      "description": "Sets the color used to fill shapes. Calling <code>fill(255, 165, 0)</code> or\n<code>fill('orange')</code> means all shapes drawn after the fill command will be\nfilled with the color orange.",
      "examples": ["// Grayscale integer value. \n\nfill(51);\nsquare(20, 20, 60);\ndescribe('A dark charcoal gray square with a black outline.');", "// R, G & B integer values. \n\nfill(255, 204, 0);\nsquare(20, 20, 60);\ndescribe('A yellow square with a black outline.');", "// H, S & B integer values. \n\ncolorMode(HSB);\nfill(255, 204, 100);\nsquare(20, 20, 60);\ndescribe('A royal blue square with a black outline.');", "// A CSS named color. \n\nfill('red');\nsquare(20, 20, 60);\ndescribe('A red square with a black outline.');", "// Three-digit hex RGB notation. \n\nfill('#fae');\nsquare(20, 20, 60);\ndescribe('A pink square with a black outline.');", "// Six-digit hex RGB notation. \n\nfill('#A251FA');\nsquare(20, 20, 60);\ndescribe('A purple square with a black outline.');", "// Integer RGB notation. \n\nfill('rgb(0,255,0)');\nsquare(20, 20, 60);\ndescribe('A bright green square with a black outline.');", "// Integer RGBA notation. \n\nfill('rgba(0,255,0, 0.25)');\nsquare(20, 20, 60);\ndescribe('A soft green rectange with a black outline.');", "// Percentage RGB notation. \n\nfill('rgb(100%,0%,10%)');\nsquare(20, 20, 60);\ndescribe('A red square with a black outline.');", "// Percentage RGBA notation. \n\nfill('rgba(100%,0%,100%,0.5)');\nsquare(20, 20, 60);\ndescribe('A dark fuchsia square with a black outline.');", "// p5.Color object. \n\nlet c = color(0, 0, 255);\nfill(c);\nsquare(20, 20, 60);\ndescribe('A blue square with a black outline.');"],
      "href": "#/p5/fill",
      "syntax": "fill(v1, v2, v3, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red value if color mode is RGB or hue value if color mode is HSB.",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green value if color mode is RGB or saturation value if color mode is HSB.",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue value if color mode is RGB or brightness value if color mode is HSB.",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "alpha"
      }, {
        "paramType": "String",
        "paramDescription": "a color string.",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "a grayscale value.",
        "paramName": "gray"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red, green, blue & and alpha components of the color.",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "the fill color.",
        "paramName": "color"
      }]
    }, {
      "label": "noFill()",
      "description": "Disables setting the interior color of shapes. This is the same as making\nthe fill completely transparent. If both\n<a href=\"#/p5/noStroke\" class=\"code\">noStroke()</a> and\n<a href=\"#/p5/noFill\" class=\"code\">noFill()</a> are called, nothing will be drawn to the\nscreen.",
      "examples": ["square(32, 10, 35);\nnoFill();\nsquare(32, 55, 35);\ndescribe('A white square on top of an empty square. Both squares have black outlines.');", "function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(0);\n    noFill();\n    stroke(100, 100, 240);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    box(45, 45, 45);\n    describe('A purple cube wireframe spinning on a black canvas.');\n}"],
      "href": "#/p5/noFill",
      "syntax": "noFill()",
      "parameters": []
    }, {
      "label": "noStroke()",
      "description": "Disables drawing the stroke (outline). If both\n<a href=\"#/p5/noStroke\" class=\"code\">noStroke()</a> and\n<a href=\"#/p5/noFill\" class=\"code\">noFill()</a> are called, nothing will be drawn to the\nscreen.",
      "examples": ["noStroke();\nsquare(20, 20, 60);\ndescribe('A white square with no outline.');", "function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(0);\n    noStroke();\n    fill(240, 150, 150);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    box(45, 45, 45);\n    describe('A pink cube with no edge outlines spinning on a black canvas.');\n}"],
      "href": "#/p5/noStroke",
      "syntax": "noStroke()",
      "parameters": []
    }, {
      "label": "stroke()",
      "description": "Sets the color used to draw lines and borders around shapes. Calling\n<code>stroke(255, 165, 0)</code> or <code>stroke('orange')</code> means all shapes drawn after\nthe <code>stroke()</code> command will be filled with the color orange. The way these\nparameters are interpreted may be changed with the\n<a href=\"#/p5/colorMode\" class=\"code\">colorMode()</a> function.",
      "examples": ["// Grayscale integer value. \n\nstrokeWeight(4);\nstroke(51);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a dark charcoal gray outline.');", "// R, G & B integer values. \n\nstroke(255, 204, 0);\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a yellow outline.');", "// H, S & B integer values. \n\ncolorMode(HSB);\nstrokeWeight(4);\nstroke(255, 204, 100);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a royal blue outline.');", "// A CSS named color. \n\nstroke('red');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a red outline.');", "// Three-digit hex RGB notation. \n\nstroke('#fae');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a pink outline.');", "// Six-digit hex RGB notation. \n\nstroke('#222222');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a black outline.');", "// Integer RGB notation. \n\nstroke('rgb(0,255,0)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A whiite rectangle with a bright green outline.');", "// Integer RGBA notation. \n\nstroke('rgba(0,255,0,0.25)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a soft green outline.');", "// Percentage RGB notation. \n\nstroke('rgb(100%,0%,10%)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a red outline.');", "// Percentage RGBA notation. \n\nstroke('rgba(100%,0%,100%,0.5)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a dark fuchsia outline.');", "// p5.Color object. \n\nstroke(color(0, 0, 255));\nstrokeWeight(4);\nrect(20, 20, 60, 60);\ndescribe('A white rectangle with a blue outline.');"],
      "href": "#/p5/stroke",
      "syntax": "stroke(v1, v2, v3, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red value if color mode is RGB or hue value if color mode is HSB.",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green value if color mode is RGB or saturation value if color mode is HSB.",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue value if color mode is RGB or brightness value if color mode is HSB.",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "alpha"
      }, {
        "paramType": "String",
        "paramDescription": "a color string.",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "a grayscale value.",
        "paramName": "gray"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red, green, blue, and alpha components of the color.",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "the stroke color.",
        "paramName": "color"
      }]
    }, {
      "label": "erase()",
      "description": "All drawing that follows <a href=\"#/p5/erase\" class=\"code\">erase()</a> will subtract\nfrom the canvas, revealing the web page underneath. The erased areas will\nbecome transparent, allowing the content behind the canvas to show through.\nThe <a href=\"#/p5/fill\" class=\"code\">fill()</a>, <a href=\"#/p5/stroke\" class=\"code\">stroke()</a>, and\n<a href=\"#/p5/blendMode\" class=\"code\">blendMode()</a> have no effect once <code>erase()</code> is\ncalled.",
      "examples": ["background(100, 100, 250);\nfill(250, 100, 100);\nsquare(20, 20, 60);\nerase();\ncircle(25, 30, 30);\nnoErase();\ndescribe('A purple canvas with a pink square in the middle. A circle is erased from the top-left, leaving a white hole.');", "let p = createP('I am a DOM element');\np.style('font-size', '12px');\np.style('width', '65px');\np.style('text-align', 'center');\np.position(18, 26);\n\nbackground(100, 170, 210);\nerase(200, 100);\ncircle(50, 50, 77);\nnoErase();\ndescribe('A blue canvas with a circular hole in the center that reveals the message \"I am a DOM element\".');", "background(150, 250, 150);\nfill(100, 100, 250);\nsquare(20, 20, 60);\nstrokeWeight(5);\nerase(150, 255);\ntriangle(50, 10, 70, 50, 90, 10);\nnoErase();\ndescribe('A mint green canvas with a purple square in the center. A triangle in the top-right corner partially erases its interior and a fully erases its outline.');"],
      "href": "#/p5/erase",
      "syntax": "erase([strengthFill], [strengthStroke])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "a number (0-255) for the strength of erasing under a shape's interior. Defaults to 255, which is full strength.",
        "paramName": "strengthFill"
      }, {
        "paramType": "Number",
        "paramDescription": "a number (0-255) for the strength of erasing under a shape's edge. Defaults to 255, which is full strength.",
        "paramName": "strengthStroke"
      }]
    }, {
      "label": "noErase()",
      "description": "Ends erasing that was started with <a href=\"#/p5/erase\" class=\"code\">erase()</a>.\nThe <a href=\"#/p5/fill\" class=\"code\">fill()</a>, <a href=\"#/p5/stroke\" class=\"code\">stroke()</a>, and\n<a href=\"#/p5/blendMode\" class=\"code\">blendMode()</a> settings will return to what they\nwere prior to calling <a href=\"#/p5/erase\" class=\"code\">erase()</a>.",
      "examples": ["background(235, 145, 15);\nnoStroke();\nfill(30, 45, 220);\nrect(30, 10, 10, 80);\nerase();\ncircle(50, 50, 60);\nnoErase();\nrect(70, 10, 10, 80);\ndescribe('An orange canvas with two tall blue rectangles. A circular hole in the center erases the rectangle on the left but not the one on the right.');"],
      "href": "#/p5/noErase",
      "syntax": "noErase()",
      "parameters": []
    }]
  }]
}, {
  "groupName": "Shape",
  "subgroups": [{
    "subgroupName": "2D Primitives",
    "tokens": [{
      "label": "arc()",
      "description": "Draws an arc to the canvas. Arcs are drawn along the outer edge of an ellipse\n(oval) defined by the <code>x</code>, <code>y</code>, <code>w</code>, and <code>h</code> parameters. Use the <code>start</code> and <code>stop</code>\nparameters to specify the angles (in radians) at which to draw the arc. Arcs are\nalways drawn clockwise from <code>start</code> to <code>stop</code>. The origin of the arc's ellipse may\nbe changed with the <a href=\"#/p5/ellipseMode\" class=\"code\">ellipseMode()</a> function.",
      "examples": ["arc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI + QUARTER_PI);\narc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\ndescribe(\n    'A shattered outline of an ellipse with a quarter of a white circle at the bottom-right.'\n);", "arc(50, 50, 80, 80, 0, PI + QUARTER_PI);\ndescribe('A white ellipse with the top-right third missing. The bottom is outlined in black.');", "arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\ndescribe(\n    'A white ellipse missing a section from the top-right. The bottom is outlined in black.'\n);", "arc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\ndescribe('A white ellipse with a black outline missing a section from the top-right.');", "arc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\ndescribe('A white ellipse with a black outline. The top-right third is missing.');"],
      "href": "#/p5/arc",
      "syntax": "arc(x, y, w, h, start, stop, [mode], [detail])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the arc's ellipse.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the arc's ellipse.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "width of the arc's ellipse by default.",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the arc's ellipse by default.",
        "paramName": "h"
      }, {
        "paramType": "Number",
        "paramDescription": "angle to start the arc, specified in radians.",
        "paramName": "start"
      }, {
        "paramType": "Number",
        "paramDescription": "angle to stop the arc, specified in radians.",
        "paramName": "stop"
      }, {
        "paramType": "Constant",
        "paramDescription": "optional parameter to determine the way of drawing the arc. either CHORD, PIE, or OPEN.",
        "paramName": "mode"
      }, {
        "paramType": "Integer",
        "paramDescription": "optional parameter for WebGL mode only. This is to specify the number of vertices that makes up the perimeter of the arc. Default value is 25. Won't draw a stroke for a detail of more than 50.",
        "paramName": "detail"
      }]
    }, {
      "label": "ellipse()",
      "description": "Draws an ellipse (oval) to the canvas. An ellipse with equal width and height\nis a circle. By default, the first two parameters set the location of the\ncenter of the ellipse. The third and fourth parameters set the shape's width\nand height, respectively. The origin may be changed with the\n<a href=\"#/p5/ellipseMode\" class=\"code\">ellipseMode()</a> function.",
      "examples": ["ellipse(56, 46, 55, 55);\ndescribe('A white ellipse with black outline in middle of a gray canvas.');"],
      "href": "#/p5/ellipse",
      "syntax": "ellipse(x, y, w, [h])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the center of the ellipse.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the center of the ellipse.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "width of the ellipse.",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the ellipse.",
        "paramName": "h"
      }, {
        "paramType": "Integer",
        "paramDescription": "optional parameter for WebGL mode only. This is to specify the number of vertices that makes up the perimeter of the ellipse. Default value is 25. Won't draw a stroke for a detail of more than 50.",
        "paramName": "detail"
      }]
    }, {
      "label": "circle()",
      "description": "Draws a circle to the canvas. A circle is a round shape. Every point on the\nedge of a circle is the same distance from its center. By default, the first\ntwo parameters set the location of the center of the circle. The third\nparameter sets the shape's width and height (diameter). The origin may be\nchanged with the <a href=\"#/p5/ellipseMode\" class=\"code\">ellipseMode()</a> function.",
      "examples": ["circle(30, 30, 20);\ndescribe('A white circle with black outline in the middle of a gray canvas.');"],
      "href": "#/p5/circle",
      "syntax": "circle(x, y, d)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the center of the circle.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the center of the circle.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "diameter of the circle.",
        "paramName": "d"
      }]
    }, {
      "label": "line()",
      "description": "Draws a line, a straight path between two points. Its default width is one pixel.\nThe version of <code>line()</code> with four parameters draws the line in 2D. To color a line,\nuse the <a href=\"#/p5/stroke\" class=\"code\">stroke()</a> function. To change its width, use the\n<a href=\"#/p5/strokeWeight\" class=\"code\">strokeWeight()</a> function. A line\ncan't be filled, so the <a href=\"#/p5/fill\" class=\"code\">fill()</a> function won't affect\nthe color of a  line.",
      "examples": ["line(30, 20, 85, 75);\ndescribe(\n    'A black line on a gray canvas running from top-center to bottom-right.'\n);", "line(30, 20, 85, 20);\nstroke(126);\nline(85, 20, 85, 75);\nstroke(255);\nline(85, 75, 30, 75);\ndescribe(\n    'Three lines drawn in grayscale on a gray canvas. They form the top, right, and bottom sides of a square.'\n);", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('A black line drawn on a gray canvas.');\n}\n\nfunction draw() {\n    background(220);\n    line(0, 0, 0, 10, 10, 0);\n}"],
      "href": "#/p5/line",
      "syntax": "line(x1, y1, x2, y2)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the first point.",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the first point.",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the second point.",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the second point.",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the first point.",
        "paramName": "z1"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the second point.",
        "paramName": "z2"
      }]
    }, {
      "label": "point()",
      "description": "Draws a point, a single coordinate in space. Its default size is one pixel. The first two\nparameters are the point's x- and y-coordinates, respectively. To color a point, use\nthe <a href=\"#/p5/stroke\" class=\"code\">stroke()</a> function. To change its size, use the\n<a href=\"#/p5/strokeWeight\" class=\"code\">strokeWeight()</a> function.",
      "examples": ["point(30, 20);\npoint(85, 20);\npoint(85, 75);\npoint(30, 75);\ndescribe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n);", "point(30, 20);\npoint(85, 20);\nstroke('purple');\nstrokeWeight(10);\npoint(85, 75);\npoint(30, 75);\ndescribe(\n    'Four points drawn on a gray canvas. Two are black and two are purple. The points form the corners of a square.'\n);", "let a = createVector(10, 10);\npoint(a);\nlet b = createVector(10, 20);\npoint(b);\nlet c = createVector(20, 10);\npoint(c);\nlet d = createVector(20, 20);\npoint(d);\ndescribe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n);"],
      "href": "#/p5/point",
      "syntax": "point(x, y, [z])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the x-coordinate.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate (for WebGL mode).",
        "paramName": "z"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "the coordinate vector.",
        "paramName": "coordinateVector"
      }]
    }, {
      "label": "quad()",
      "description": "Draws a quad to the canvas. A quad is a quadrilateral, a four-sided\npolygon. Some examples of quads include rectangles, squares, rhombuses,\nand trapezoids. The first pair of parameters (<code>x1</code>,<code>y1</code>) sets the quad's\nfirst point. The following pairs of parameters set the coordinates for\nits next three points. Parameters should proceed clockwise or\ncounter-clockwise around the shape.",
      "examples": ["quad(20, 20, 80, 20, 80, 80, 20, 80);\ndescribe('A white square with a black outline drawn on a gray canvas.');", "quad(20, 30, 80, 30, 80, 70, 20, 70);\ndescribe('A white rectangle with a black outline drawn on a gray canvas.');", "quad(50, 62, 86, 50, 50, 38, 14, 50);\ndescribe('A white rhombus with a black outline drawn on a gray canvas.');", "quad(20, 50, 80, 30, 80, 70, 20, 70);\ndescribe('A white trapezoid with a black outline drawn on a gray canvas.');"],
      "href": "#/p5/quad",
      "syntax": "quad(x1, y1, x2, y2, x3, y3, x4, y4, [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the first point.",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the first point.",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the second point.",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the second point.",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the third point.",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the third point.",
        "paramName": "y3"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the fourth point.",
        "paramName": "x4"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the fourth point.",
        "paramName": "y4"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in the x-direction.",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in the y-direction.",
        "paramName": "detailY"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the first point.",
        "paramName": "z1"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the second point.",
        "paramName": "z2"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the third point.",
        "paramName": "z3"
      }, {
        "paramType": "Number",
        "paramDescription": "the z-coordinate of the fourth point.",
        "paramName": "z4"
      }]
    }, {
      "label": "rect()",
      "description": "Draws a rectangle to the canvas. A rectangle is a four-sided polygon with\nevery angle at ninety degrees. By default, the first two parameters set the\nlocation of the rectangle's upper-left corner. The third and fourth set the\nshape's the width and height, respectively. The way these parameters are\ninterpreted may be changed with the <a href=\"#/p5/rectMode\" class=\"code\">rectMode()</a>\nfunction.",
      "examples": ["rect(30, 20, 55, 55);\ndescribe('A white rectangle with a black outline on a gray canvas.');", "rect(30, 20, 55, 55, 20);\ndescribe(\n    'A white rectangle with a black outline and round edges on a gray canvas.'\n);", "rect(30, 20, 55, 55, 20, 15, 10, 5);\ndescribe('A white rectangle with a black outline and round edges of different radii.');"],
      "href": "#/p5/rect",
      "syntax": "rect(x, y, w, [h], [tl], [tr], [br], [bl])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the rectangle.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the rectangle.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "width of the rectangle.",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the rectangle.",
        "paramName": "h"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of top-left corner.",
        "paramName": "tl"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of top-right corner.",
        "paramName": "tr"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of bottom-right corner.",
        "paramName": "br"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of bottom-left corner.",
        "paramName": "bl"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in the x-direction (for WebGL mode).",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in the y-direction (for WebGL mode).",
        "paramName": "detailY"
      }]
    }, {
      "label": "square()",
      "description": "Draws a square to the canvas. A square is a four-sided polygon with every\nangle at ninety degrees and equal side lengths. By default, the first two\nparameters set the location of the square's upper-left corner. The third\nparameter sets its side size. The way these parameters are interpreted may\nbe changed with the <a href=\"#/p5/rectMode\" class=\"code\">rectMode()</a> function.",
      "examples": ["square(30, 20, 55);\ndescribe('A white square with a black outline in on a gray canvas.');", "square(30, 20, 55, 20);\ndescribe(\n    'A white square with a black outline and round edges on a gray canvas.'\n);", "square(30, 20, 55, 20, 15, 10, 5);\ndescribe('A white square with a black outline and round edges of different radii.');"],
      "href": "#/p5/square",
      "syntax": "square(x, y, s, [tl], [tr], [br], [bl])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the square.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the square.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "side size of the square.",
        "paramName": "s"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of top-left corner.",
        "paramName": "tl"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of top-right corner.",
        "paramName": "tr"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of bottom-right corner.",
        "paramName": "br"
      }, {
        "paramType": "Number",
        "paramDescription": "optional radius of bottom-left corner.",
        "paramName": "bl"
      }]
    }, {
      "label": "triangle()",
      "description": "Draws a triangle to the canvas. A triangle is a three-sided polygon. The\nfirst two parameters specify the triangle's first point <code>(x1,y1)</code>. The middle\ntwo parameters specify its second point <code>(x2,y2)</code>. And the last two parameters\nspecify its third point <code>(x3, y3)</code>.",
      "examples": ["triangle(30, 75, 58, 20, 86, 75);\ndescribe('A white triangle with a black outline on a gray canvas.');"],
      "href": "#/p5/triangle",
      "syntax": "triangle(x1, y1, x2, y2, x3, y3)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the first point.",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the first point.",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate of the second point.",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the second point.",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate of the third point.",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the third point.",
        "paramName": "y3"
      }]
    }]
  }, {
    "subgroupName": "Attributes",
    "tokens": [{
      "label": "ellipseMode()",
      "description": "Modifies the location from which ellipses, circles, and arcs are drawn. By default, the\nfirst two parameters are the x- and y-coordinates of the shape's center. The next\nparameters are its width and height. This is equivalent to calling <code>ellipseMode(CENTER)</code>.",
      "examples": ["ellipseMode(RADIUS);\nfill(255);\nellipse(50, 50, 30, 30);\nellipseMode(CENTER);\nfill(100);\nellipse(50, 50, 30, 30);\ndescribe('A white circle with a gray circle at its center. Both circles have black outlines.');", "ellipseMode(CORNER);\nfill(255);\nellipse(25, 25, 50, 50);\nellipseMode(CORNERS);\nfill(100);\nellipse(25, 25, 50, 50);\ndescribe('A white circle with a gray circle at its top-left corner. Both circles have black outlines.');"],
      "href": "#/p5/ellipseMode",
      "syntax": "ellipseMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either CENTER, RADIUS, CORNER, or CORNERS",
        "paramName": "mode"
      }]
    }, {
      "label": "noSmooth()",
      "description": "Draws all geometry with jagged (aliased) edges.",
      "examples": ["background(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\ndescribe('Two pixelated white circles on a black background.');"],
      "href": "#/p5/noSmooth",
      "syntax": "noSmooth()",
      "parameters": []
    }, {
      "label": "rectMode()",
      "description": "Modifies the location from which rectangles and squares are drawn. By default,\nthe first two parameters are the x- and y-coordinates of the shape's upper-left\ncorner. The next parameters are its width and height. This is equivalent to\ncalling <code>rectMode(CORNER)</code>.",
      "examples": ["rectMode(CORNER);\nfill(255);\nrect(25, 25, 50, 50);\n\nrectMode(CORNERS);\nfill(100);\nrect(25, 25, 50, 50);\n\ndescribe('A small gray square drawn at the top-left corner of a white square.');", "rectMode(RADIUS);\nfill(255);\nrect(50, 50, 30, 30);\n\nrectMode(CENTER);\nfill(100);\nrect(50, 50, 30, 30);\n\ndescribe('A small gray square drawn at the center of a white square.');"],
      "href": "#/p5/rectMode",
      "syntax": "rectMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either CORNER, CORNERS, CENTER, or RADIUS",
        "paramName": "mode"
      }]
    }, {
      "label": "smooth()",
      "description": "Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\" class=\"code\">smooth()</a> will also\nimprove image quality of resized images.",
      "examples": ["background(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\ndescribe('Two pixelated white circles on a black background.');"],
      "href": "#/p5/smooth",
      "syntax": "smooth()",
      "parameters": []
    }, {
      "label": "strokeCap()",
      "description": "Sets the style for rendering line endings. These ends are either rounded\n(<code>ROUND</code>), squared (<code>SQUARE</code>), or extended (<code>PROJECT</code>). The default cap is\n<code>ROUND</code>.",
      "examples": ["strokeWeight(12.0);\nstrokeCap(ROUND);\nline(20, 30, 80, 30);\nstrokeCap(SQUARE);\nline(20, 50, 80, 50);\nstrokeCap(PROJECT);\nline(20, 70, 80, 70);\ndescribe('Three horizontal lines. The top line has rounded ends, the middle line has squared ends, and the bottom line has longer, squared ends.');"],
      "href": "#/p5/strokeCap",
      "syntax": "strokeCap(cap)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either ROUND, SQUARE, or PROJECT",
        "paramName": "cap"
      }]
    }, {
      "label": "strokeJoin()",
      "description": "Sets the style of the joints which connect line segments. These joints are\neither mitered (<code>MITER</code>), beveled (<code>BEVEL</code>), or rounded (<code>ROUND</code>). The default\njoint is <code>MITER</code> in 2D mode and <code>ROUND</code> in WebGL mode.",
      "examples": ["noFill();\nstrokeWeight(10.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\ndescribe('A right-facing arrowhead shape with a pointed tip in center of canvas.');", "noFill();\nstrokeWeight(10.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\ndescribe('A right-facing arrowhead shape with a flat tip in center of canvas.');", "noFill();\nstrokeWeight(10.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\ndescribe('A right-facing arrowhead shape with a rounded tip in center of canvas.');"],
      "href": "#/p5/strokeJoin",
      "syntax": "strokeJoin(join)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either MITER, BEVEL, or ROUND",
        "paramName": "join"
      }]
    }, {
      "label": "strokeWeight()",
      "description": "Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.",
      "examples": ["// Default. \n\nline(20, 20, 80, 20);\n\n// Thicker. \n\nstrokeWeight(4);\nline(20, 40, 80, 40);\n\n// Beastly. \n\nstrokeWeight(10);\nline(20, 70, 80, 70);\ndescribe('Three horizontal black lines. The top line is thin, the middle is medium, and the bottom is thick.');", "// Default. \n\nline(20, 20, 80, 20);\n\n// Adding scale transformation. \n\nscale(5);\n\n// Coordinates adjusted for scaling. \n\nline(4, 8, 16, 8);\ndescribe('Two horizontal black lines. The top line is thin and the bottom is five times thicker than the top.');"],
      "href": "#/p5/strokeWeight",
      "syntax": "strokeWeight(weight)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the weight of the stroke (in pixels).",
        "paramName": "weight"
      }]
    }]
  }, {
    "subgroupName": "Curves",
    "tokens": [{
      "label": "bezier()",
      "description": "Draws a cubic Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The first two parameters specify\nthe first anchor point and the last two parameters specify the other\nanchor point, which become the first and last points on the curve. The\nmiddle parameters specify the two control points which define the shape\nof the curve. Approximately speaking, control points \"pull\" the curve\ntowards them.",
      "examples": ["noFill();\nstroke(255, 102, 0);\nline(85, 20, 10, 10);\nline(90, 90, 15, 80);\nstroke(0, 0, 0);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);", "background(0, 0, 0);\nnoFill();\nstroke(255);\nbezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);"],
      "href": "#/p5/bezier",
      "syntax": "bezier(x1, y1, x2, y2, x3, y3, x4, y4)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate for the first anchor point",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the first anchor point",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the first control point",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the first control point",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the second control point",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the second control point",
        "paramName": "y3"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the second anchor point",
        "paramName": "x4"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the second anchor point",
        "paramName": "y4"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the first anchor point",
        "paramName": "z1"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the first control point",
        "paramName": "z2"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the second control point",
        "paramName": "z3"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the second anchor point",
        "paramName": "z4"
      }]
    }, {
      "label": "bezierDetail()",
      "description": "Sets the resolution at which Bezier's curve is displayed. The default value is 20.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    noFill();\n    bezierDetail(5);\n}\n\nfunction draw() {\n    background(200);\n    bezier(\n        -40, -40, 0,\n        90, -40, 0,\n        -90, 40, 0,\n        40, 40, 0\n    );\n}"],
      "href": "#/p5/bezierDetail",
      "syntax": "bezierDetail(detail)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "resolution of the curves",
        "paramName": "detail"
      }]
    }, {
      "label": "bezierPoint()",
      "description": "Given the x or y co-ordinate values of control and anchor points of a bezier\ncurve, it evaluates the x or y coordinate of the bezier at position t. The\nparameters a and d are the x or y coordinates of first and last points on the\ncurve while b and c are of the control points.The final parameter t is the\nposition of the resultant point which is given between 0 and 1.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
      "examples": ["noFill();\nlet x1 = 85,\n    x2 = 10,\n    x3 = 90,\n    x4 = 15;\nlet y1 = 20,\n    y2 = 10,\n    y3 = 90,\n    y4 = 80;\nbezier(x1, y1, x2, y2, x3, y3, x4, y4);\nfill(255);\nlet steps = 10;\nfor (let i = 0; i <= steps; i++) {\n    let t = i / steps;\n    let x = bezierPoint(x1, x2, x3, x4, t);\n    let y = bezierPoint(y1, y2, y3, y4, t);\n    circle(x, y, 5);\n}"],
      "href": "#/p5/bezierPoint",
      "syntax": "bezierPoint(a, b, c, d, t)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "coordinate of first point on the curve",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of first control point",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second control point",
        "paramName": "c"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second point on the curve",
        "paramName": "d"
      }, {
        "paramType": "Number",
        "paramDescription": "value between 0 and 1",
        "paramName": "t"
      }]
    }, {
      "label": "bezierTangent()",
      "description": "Evaluates the tangent to the Bezier at position t for points a, b, c, d.\nThe parameters a and d are the first and last points\non the curve, and b and c are the control points.\nThe final parameter t varies between 0 and 1.",
      "examples": ["noFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nlet steps = 6;\nfill(255);\nfor (let i = 0; i <= steps; i++) {\n    let t = i / steps;\n\n    // Get the location of the point \n\n    let x = bezierPoint(85, 10, 90, 15, t);\n    let y = bezierPoint(20, 10, 90, 80, t);\n\n    // Get the tangent points \n\n    let tx = bezierTangent(85, 10, 90, 15, t);\n    let ty = bezierTangent(20, 10, 90, 80, t);\n\n    // Calculate an angle from the tangent points \n\n    let a = atan2(ty, tx);\n    a + = PI;\n    stroke(255, 102, 0);\n    line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\n\n    // The following line of code makes a line \n\n\n    // inverse of the above line \n\n\n    //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y); \n\n    stroke(0);\n    ellipse(x, y, 5, 5);\n}", "noFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nstroke(255, 102, 0);\nlet steps = 16;\nfor (let i = 0; i <= steps; i++) {\n    let t = i / steps;\n    let x = bezierPoint(85, 10, 90, 15, t);\n    let y = bezierPoint(20, 10, 90, 80, t);\n    let tx = bezierTangent(85, 10, 90, 15, t);\n    let ty = bezierTangent(20, 10, 90, 80, t);\n    let a = atan2(ty, tx);\n    a - = HALF_PI;\n    line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}"],
      "href": "#/p5/bezierTangent",
      "syntax": "bezierTangent(a, b, c, d, t)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "coordinate of first point on the curve",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of first control point",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second control point",
        "paramName": "c"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second point on the curve",
        "paramName": "d"
      }, {
        "paramType": "Number",
        "paramDescription": "value between 0 and 1",
        "paramName": "t"
      }]
    }, {
      "label": "curve()",
      "description": "Draws a curved line on the screen between two points, given as the\nmiddle four parameters. The first two parameters are a control point, as\nif the curve came from this point even though it's not drawn. The last\ntwo parameters similarly describe the other control point. <br><br>\nLonger curves can be created by putting a series of <a href=\"#/p5/curve\" class=\"code\">curve()</a> functions\ntogether or using <a href=\"#/p5/curveVertex\" class=\"code\">curveVertex()</a>. An additional function called\n<a href=\"#/p5/curveTightness\" class=\"code\">curveTightness()</a> provides control for the visual quality of the curve.\nThe <a href=\"#/p5/curve\" class=\"code\">curve()</a> function is an implementation of Catmull-Rom splines.",
      "examples": ["noFill();\nstroke(255, 102, 0);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\nstroke(0);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nstroke(255, 102, 0);\ncurve(73, 24, 73, 61, 15, 65, 15, 65);", "// Define the curve points as JavaScript objects \n\nlet p1 = {\n    x: 5,\n    y: 26\n};\nlet p2 = {\n    x: 73,\n    y: 24\n};\nlet p3 = {\n    x: 73,\n    y: 61\n};\nlet p4 = {\n    x: 15,\n    y: 65\n};\nnoFill();\nstroke(255, 102, 0);\ncurve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\nstroke(0);\ncurve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\nstroke(255, 102, 0);\ncurve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);", "noFill();\nstroke(255, 102, 0);\ncurve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\nstroke(0);\ncurve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\nstroke(255, 102, 0);\ncurve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);"],
      "href": "#/p5/curve",
      "syntax": "curve(x1, y1, x2, y2, x3, y3, x4, y4)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate for the beginning control point",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the beginning control point",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the first point",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the first point",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the second point",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the second point",
        "paramName": "y3"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the ending control point",
        "paramName": "x4"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the ending control point",
        "paramName": "y4"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the beginning control point",
        "paramName": "z1"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the first point",
        "paramName": "z2"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the second point",
        "paramName": "z3"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the ending control point",
        "paramName": "z4"
      }]
    }, {
      "label": "curveDetail()",
      "description": "Sets the resolution at which curves display. The default value is 20 while\nthe minimum value is 3.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n\n    curveDetail(5);\n}\n\nfunction draw() {\n    background(200);\n\n    curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\n}"],
      "href": "#/p5/curveDetail",
      "syntax": "curveDetail(resolution)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "resolution of the curves",
        "paramName": "resolution"
      }]
    }, {
      "label": "curveTightness()",
      "description": "Modifies the quality of forms created with <a href=\"#/p5/curve\" class=\"code\">curve()</a>\nand <a href=\"#/p5/curveVertex\" class=\"code\">curveVertex()</a>.The parameter tightness\ndetermines how the curve fits to the vertex points. The value 0.0 is the\ndefault value for tightness (this value defines the curves to be Catmull-Rom\nsplines) and the value 1.0 connects all the points with straight lines.\nValues within the range -5.0 and 5.0 will deform the curves but will leave\nthem recognizable and as values increase in magnitude, they will continue to deform.",
      "examples": ["// Move the mouse left and right to see the curve change \n\nfunction setup() {\n    createCanvas(100, 100);\n    noFill();\n}\n\nfunction draw() {\n    background(204);\n    let t = map(mouseX, 0, width, -5, 5);\n    curveTightness(t);\n    beginShape();\n    curveVertex(10, 26);\n    curveVertex(10, 26);\n    curveVertex(83, 24);\n    curveVertex(83, 61);\n    curveVertex(25, 65);\n    curveVertex(25, 65);\n    endShape();\n}"],
      "href": "#/p5/curveTightness",
      "syntax": "curveTightness(amount)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "amount of deformation from the original vertices",
        "paramName": "amount"
      }]
    }, {
      "label": "curvePoint()",
      "description": "Evaluates the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are control points\nof the curve, and b and c are the start and end points of the curve.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
      "examples": ["noFill();\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nfill(255);\nellipseMode(CENTER);\nlet steps = 6;\nfor (let i = 0; i <= steps; i++) {\n    let t = i / steps;\n    let x = curvePoint(5, 5, 73, 73, t);\n    let y = curvePoint(26, 26, 24, 61, t);\n    ellipse(x, y, 5, 5);\n    x = curvePoint(5, 73, 73, 15, t);\n    y = curvePoint(26, 24, 61, 65, t);\n    ellipse(x, y, 5, 5);\n}"],
      "href": "#/p5/curvePoint",
      "syntax": "curvePoint(a, b, c, d, t)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "coordinate of first control point of the curve",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of first point",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second point",
        "paramName": "c"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second control point",
        "paramName": "d"
      }, {
        "paramType": "Number",
        "paramDescription": "value between 0 and 1",
        "paramName": "t"
      }]
    }, {
      "label": "curveTangent()",
      "description": "Evaluates the tangent to the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points on the curve,\nand b and c are the control points.",
      "examples": ["noFill();\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nlet steps = 6;\nfor (let i = 0; i <= steps; i++) {\n    let t = i / steps;\n    let x = curvePoint(5, 73, 73, 15, t);\n    let y = curvePoint(26, 24, 61, 65, t);\n\n    //ellipse(x, y, 5, 5); \n\n    let tx = curveTangent(5, 73, 73, 15, t);\n    let ty = curveTangent(26, 24, 61, 65, t);\n    let a = atan2(ty, tx);\n    a - = PI / 2.0;\n    line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}"],
      "href": "#/p5/curveTangent",
      "syntax": "curveTangent(a, b, c, d, t)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "coordinate of first control point",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of first point on the curve",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second point on the curve",
        "paramName": "c"
      }, {
        "paramType": "Number",
        "paramDescription": "coordinate of second conrol point",
        "paramName": "d"
      }, {
        "paramType": "Number",
        "paramDescription": "value between 0 and 1",
        "paramName": "t"
      }]
    }]
  }, {
    "subgroupName": "Vertex",
    "tokens": [{
      "label": "beginContour()",
      "description": "Use the <a href=\"#/p5/beginContour\" class=\"code\">beginContour()</a> and\n<a href=\"#/p5/endContour\" class=\"code\">endContour()</a> functions to create negative shapes\nwithin shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\" class=\"code\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\" class=\"code\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite direction\nfrom the exterior shape. First draw vertices for the exterior clockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.",
      "examples": ["translate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n\n// Exterior part of shape, clockwise winding \n\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n\n// Interior part of shape, counter-clockwise winding \n\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);"],
      "href": "#/p5/beginContour",
      "syntax": "beginContour()",
      "parameters": []
    }, {
      "label": "beginShape()",
      "description": "Using the <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> and <a href=\"#/p5/endShape\" class=\"code\">endShape()</a> functions allow creating more\ncomplex forms. <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> begins recording vertices for a shape and\n<a href=\"#/p5/endShape\" class=\"code\">endShape()</a> stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.",
      "examples": ["beginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);", "beginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();", "beginShape(LINES);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();", "noFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();", "noFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);", "beginShape(TRIANGLES);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nendShape();", "beginShape(TRIANGLE_STRIP);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nvertex(90, 75);\nendShape();", "beginShape(TRIANGLE_FAN);\nvertex(57.5, 50);\nvertex(57.5, 15);\nvertex(92, 50);\nvertex(57.5, 85);\nvertex(22, 50);\nvertex(57.5, 15);\nendShape();", "beginShape(QUADS);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 75);\nvertex(50, 20);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 75);\nvertex(85, 20);\nendShape();", "beginShape(QUAD_STRIP);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 20);\nvertex(50, 75);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 20);\nvertex(85, 75);\nendShape();", "beginShape(TESS);\nvertex(20, 20);\nvertex(80, 20);\nvertex(80, 40);\nvertex(40, 40);\nvertex(40, 60);\nvertex(80, 60);\nvertex(80, 80);\nvertex(20, 80);\nendShape(CLOSE);"],
      "href": "#/p5/beginShape",
      "syntax": "beginShape([kind])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either POINTS, LINES, TRIANGLES, TRIANGLE_FAN TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS",
        "paramName": "kind"
      }]
    }, {
      "label": "bezierVertex()",
      "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. For WebGL mode bezierVertex() can be used in 2D\nas well as 3D mode. 2D mode expects 6 parameters, while 3D mode\nexpects 9 parameters (including z coordinates).",
      "examples": ["noFill();\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nendShape();", "beginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nbezierVertex(50, 80, 60, 25, 30, 20);\nendShape();", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    setAttributes('antialias', true);\n}\n\nfunction draw() {\n    orbitControl();\n    background(50);\n    strokeWeight(4);\n    stroke(255);\n    point(-25, 30);\n    point(25, 30);\n    point(25, -30);\n    point(-25, -30);\n\n    strokeWeight(1);\n    noFill();\n\n    beginShape();\n    vertex(-25, 30);\n    bezierVertex(25, 30, 25, -30, -25, -30);\n    endShape();\n\n    beginShape();\n    vertex(-25, 30, 20);\n    bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\n    endShape();\n}"],
      "href": "#/p5/bezierVertex",
      "syntax": "bezierVertex(x2, y2, x3, y3, x4, y4)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate for the first control point",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the first control point",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the second control point",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the second control point",
        "paramName": "y3"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the anchor point",
        "paramName": "x4"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the anchor point",
        "paramName": "y4"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the first control point (for WebGL mode)",
        "paramName": "z2"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the second control point (for WebGL mode)",
        "paramName": "z3"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the anchor point (for WebGL mode)",
        "paramName": "z4"
      }]
    }, {
      "label": "curveVertex()",
      "description": "Specifies vertex coordinates for curves. This function may only\nbe used between <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> and <a href=\"#/p5/endShape\" class=\"code\">endShape()</a> and only when there\nis no MODE parameter specified to <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a>.\nFor WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n2D mode expects 2 parameters, while 3D mode expects 3 parameters.",
      "examples": ["strokeWeight(5);\npoint(84, 91);\npoint(68, 19);\npoint(21, 17);\npoint(32, 91);\nstrokeWeight(1);\n\nnoFill();\nbeginShape();\ncurveVertex(84, 91);\ncurveVertex(84, 91);\ncurveVertex(68, 19);\ncurveVertex(21, 17);\ncurveVertex(32, 91);\ncurveVertex(32, 91);\nendShape();"],
      "href": "#/p5/curveVertex",
      "syntax": "curveVertex(x, y)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the vertex",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the vertex",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate of the vertex (for WebGL mode)",
        "paramName": "z"
      }]
    }, {
      "label": "endContour()",
      "description": "Use the <a href=\"#/p5/beginContour\" class=\"code\">beginContour()</a> and <a href=\"#/p5/endContour\" class=\"code\">endContour()</a> functions to create negative\nshapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\" class=\"code\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\" class=\"code\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.",
      "examples": ["translate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n\n// Exterior part of shape, clockwise winding \n\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n\n// Interior part of shape, counter-clockwise winding \n\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);"],
      "href": "#/p5/endContour",
      "syntax": "endContour()",
      "parameters": []
    }, {
      "label": "endShape()",
      "description": "The <a href=\"#/p5/endShape\" class=\"code\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> and may only be\ncalled after <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a>. When <a href=\"#/p5/endshape\" class=\"code\">endShape()</a> is called, all of the image\ndata defined since the previous call to <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> is written into the image\nbuffer. The constant CLOSE as the value for the <code>mode</code> parameter to close\nthe shape (to connect the beginning and the end).",
      "examples": ["noFill();\n\nbeginShape();\nvertex(20, 20);\nvertex(45, 20);\nvertex(45, 80);\nendShape(CLOSE);\n\nbeginShape();\nvertex(50, 20);\nvertex(75, 20);\nvertex(75, 80);\nendShape();"],
      "href": "#/p5/endShape",
      "syntax": "endShape([mode])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "use CLOSE to close the shape",
        "paramName": "mode"
      }]
    }, {
      "label": "quadraticVertex()",
      "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> call, it\nmust be prefaced with a call to <a href=\"#/p5/vertex\" class=\"code\">vertex()</a> to set the first anchor point.\nFor WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n2D mode expects 4 parameters, while 3D mode expects 6 parameters\n(including z coordinates).",
      "examples": ["strokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nendShape();", "strokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\npoint(20, 80);\npoint(80, 80);\npoint(80, 60);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nquadraticVertex(20, 80, 80, 80);\nvertex(80, 60);\nendShape();"],
      "href": "#/p5/quadraticVertex",
      "syntax": "quadraticVertex(cx, cy, x3, y3)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate for the control point",
        "paramName": "cx"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the control point",
        "paramName": "cy"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate for the anchor point",
        "paramName": "x3"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate for the anchor point",
        "paramName": "y3"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the control point (for WebGL mode)",
        "paramName": "cz"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate for the anchor point (for WebGL mode)",
        "paramName": "z3"
      }]
    }, {
      "label": "vertex()",
      "description": "All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\" class=\"code\">vertex()</a>\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\" class=\"code\">beginShape()</a> and\n<a href=\"#/p5/endShape\" class=\"code\">endShape()</a> functions.",
      "examples": ["strokeWeight(3);\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();", "createCanvas(100, 100, WEBGL);\nbackground(240, 240, 240);\nfill(237, 34, 93);\nnoStroke();\nbeginShape();\nvertex(0, 35);\nvertex(35, 0);\nvertex(0, -35);\nvertex(-35, 0);\nendShape();", "createCanvas(100, 100, WEBGL);\nbackground(240, 240, 240);\nfill(237, 34, 93);\nnoStroke();\nbeginShape();\nvertex(-10, 10);\nvertex(0, 35);\nvertex(10, 10);\nvertex(35, 0);\nvertex(10, -8);\nvertex(0, -35);\nvertex(-10, -8);\nvertex(-35, 0);\nendShape();", "strokeWeight(3);\nstroke(237, 34, 93);\nbeginShape(LINES);\nvertex(10, 35);\nvertex(90, 35);\nvertex(10, 65);\nvertex(90, 65);\nvertex(35, 10);\nvertex(35, 90);\nvertex(65, 10);\nvertex(65, 90);\nendShape();", "// Click to change the number of sides. \n\n\n// In WebGL mode, custom shapes will only \n\n\n// display hollow fill sections when \n\n\n// all calls to vertex() use the same z-value. \n\n\nlet sides = 3;\nlet angle, px, py;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    setAttributes('antialias', true);\n    fill(237, 34, 93);\n    strokeWeight(3);\n}\n\nfunction draw() {\n    background(200);\n    rotateX(frameCount * 0.01);\n    rotateZ(frameCount * 0.01);\n    ngon(sides, 0, 0, 80);\n}\n\nfunction mouseClicked() {\n    if (sides > 6) {\n        sides = 3;\n    } else {\n        sides++;\n    }\n}\n\nfunction ngon(n, x, y, d) {\n    beginShape(TESS);\n    for (let i = 0; i < n + 1; i++) {\n        angle = TWO_PI / n * i;\n        px = x + sin(angle) * d / 2;\n        py = y - cos(angle) * d / 2;\n        vertex(px, py, 0);\n    }\n    for (let i = 0; i < n + 1; i++) {\n        angle = TWO_PI / n * i;\n        px = x + sin(angle) * d / 4;\n        py = y - cos(angle) * d / 4;\n        vertex(px, py, 0);\n    }\n    endShape();\n}"],
      "href": "#/p5/vertex",
      "syntax": "vertex(x, y)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the vertex",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the vertex",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate of the vertex. Defaults to 0 if not specified.",
        "paramName": "z"
      }, {
        "paramType": "Number",
        "paramDescription": "the vertex's texture u-coordinate",
        "paramName": "u"
      }, {
        "paramType": "Number",
        "paramDescription": "the vertex's texture v-coordinate",
        "paramName": "v"
      }]
    }, {
      "label": "normal()",
      "description": "Sets the 3d vertex normal to use for subsequent vertices drawn with\n<a href=\"#/p5/vertex\" class=\"code\">vertex()</a>. A normal is a vector that is generally\nnearly perpendicular to a shape's surface which controls how much light will\nbe reflected from that part of the surface.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n}\n\nfunction draw() {\n    background(255);\n    rotateY(frameCount / 100);\n    normalMaterial();\n    beginShape(TRIANGLE_STRIP);\n    normal(-0.4, 0.4, 0.8);\n    vertex(-30, 30, 0);\n\n    normal(0, 0, 1);\n    vertex(-30, -30, 30);\n    vertex(30, 30, 30);\n\n    normal(0.4, -0.4, 0.8);\n    vertex(30, -30, 0);\n    endShape();\n}"],
      "href": "#/p5/normal",
      "syntax": "normal(vector)",
      "parameters": [{
        "paramType": "Vector",
        "paramDescription": "A p5.Vector representing the vertex normal.",
        "paramName": "vector"
      }, {
        "paramType": "Number",
        "paramDescription": "The x component of the vertex normal.",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "The y component of the vertex normal.",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "The z component of the vertex normal.",
        "paramName": "z"
      }]
    }]
  }, {
    "subgroupName": "3D Primitives",
    "tokens": [{
      "label": "plane()",
      "description": "Draw a plane with given a width and height",
      "examples": ["// draw a plane \n\n\n// with width 50 and height 50 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a white plane with black wireframe lines');\n}\n\nfunction draw() {\n    background(200);\n    plane(50, 50);\n}"],
      "href": "#/p5/plane",
      "syntax": "plane([width], [height], [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width of the plane",
        "paramName": "width"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the plane",
        "paramName": "height"
      }, {
        "paramType": "Integer",
        "paramDescription": "Optional number of triangle subdivisions in x-dimension",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "Optional number of triangle subdivisions in y-dimension",
        "paramName": "detailY"
      }]
    }, {
      "label": "box()",
      "description": "Draw a box with given width, height and depth",
      "examples": ["// draw a spinning box \n\n\n// with width, height and depth of 50 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a white box rotating in 3D space');\n}\n\nfunction draw() {\n    background(200);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    box(50);\n}"],
      "href": "#/p5/box",
      "syntax": "box([width], [height], [depth], [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width of the box",
        "paramName": "width"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the box",
        "paramName": "height"
      }, {
        "paramType": "Number",
        "paramDescription": "depth of the box",
        "paramName": "depth"
      }, {
        "paramType": "Integer",
        "paramDescription": "Optional number of triangle subdivisions in x-dimension",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "Optional number of triangle subdivisions in y-dimension",
        "paramName": "detailY"
      }]
    }, {
      "label": "sphere()",
      "description": "Draw a sphere with given radius.",
      "examples": ["// draw a sphere with radius 40 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a white sphere with black wireframe lines');\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    sphere(40);\n}", "let detailX;\n\n// slide to see how detailX works \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailX = createSlider(3, 24, 3);\n    detailX.position(10, height + 5);\n    detailX.style('width', '80px');\n    describe(\n        'a white sphere with low detail on the x-axis, including a slider to adjust detailX'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateY(millis() / 1000);\n    sphere(40, detailX.value(), 16);\n}", "let detailY;\n\n// slide to see how detailY works \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailY = createSlider(3, 16, 3);\n    detailY.position(10, height + 5);\n    detailY.style('width', '80px');\n    describe(\n        'a white sphere with low detail on the y-axis, including a slider to adjust detailY'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateY(millis() / 1000);\n    sphere(40, 16, detailY.value());\n}"],
      "href": "#/p5/sphere",
      "syntax": "sphere([radius], [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "radius of circle",
        "paramName": "radius"
      }, {
        "paramType": "Integer",
        "paramDescription": "optional number of subdivisions in x-dimension",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "optional number of subdivisions in y-dimension",
        "paramName": "detailY"
      }]
    }, {
      "label": "cylinder()",
      "description": "Draw a cylinder with given radius and height",
      "examples": ["// draw a spinning cylinder \n\n\n// with radius 20 and height 50 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a rotating white cylinder');\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateX(frameCount * 0.01);\n    rotateZ(frameCount * 0.01);\n    cylinder(20, 50);\n}", "// slide to see how detailX works \n\nlet detailX;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailX = createSlider(3, 24, 3);\n    detailX.position(10, height + 5);\n    detailX.style('width', '80px');\n    describe(\n        'a rotating white cylinder with limited X detail, with a slider that adjusts detailX'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateY(millis() / 1000);\n    cylinder(20, 75, detailX.value(), 1);\n}", "// slide to see how detailY works \n\nlet detailY;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailY = createSlider(1, 16, 1);\n    detailY.position(10, height + 5);\n    detailY.style('width', '80px');\n    describe(\n        'a rotating white cylinder with limited Y detail, with a slider that adjusts detailY'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateY(millis() / 1000);\n    cylinder(20, 75, 16, detailY.value());\n}"],
      "href": "#/p5/cylinder",
      "syntax": "cylinder([radius], [height], [detailX], [detailY], [bottomCap], [topCap])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "radius of the surface",
        "paramName": "radius"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the cylinder",
        "paramName": "height"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of subdivisions in x-dimension; default is 24",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of subdivisions in y-dimension; default is 1",
        "paramName": "detailY"
      }, {
        "paramType": "Boolean",
        "paramDescription": "whether to draw the bottom of the cylinder",
        "paramName": "bottomCap"
      }, {
        "paramType": "Boolean",
        "paramDescription": "whether to draw the top of the cylinder",
        "paramName": "topCap"
      }]
    }, {
      "label": "cone()",
      "description": "Draw a cone with given radius and height",
      "examples": ["// draw a spinning cone \n\n\n// with radius 40 and height 70 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a rotating white cone');\n}\n\nfunction draw() {\n    background(200);\n    rotateX(frameCount * 0.01);\n    rotateZ(frameCount * 0.01);\n    cone(40, 70);\n}", "// slide to see how detailx works \n\nlet detailX;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailX = createSlider(3, 16, 3);\n    detailX.position(10, height + 5);\n    detailX.style('width', '80px');\n    describe(\n        'a rotating white cone with limited X detail, with a slider that adjusts detailX'\n    );\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    rotateY(millis() / 1000);\n    cone(30, 65, detailX.value(), 16);\n}", "// slide to see how detailY works \n\nlet detailY;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailY = createSlider(3, 16, 3);\n    detailY.position(10, height + 5);\n    detailY.style('width', '80px');\n    describe(\n        'a rotating white cone with limited Y detail, with a slider that adjusts detailY'\n    );\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    rotateY(millis() / 1000);\n    cone(30, 65, 16, detailY.value());\n}"],
      "href": "#/p5/cone",
      "syntax": "cone([radius], [height], [detailX], [detailY], [cap])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "radius of the bottom surface",
        "paramName": "radius"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the cone",
        "paramName": "height"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments, the more segments the smoother geometry default is 24",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments, the more segments the smoother geometry default is 1",
        "paramName": "detailY"
      }, {
        "paramType": "Boolean",
        "paramDescription": "whether to draw the base of the cone",
        "paramName": "cap"
      }]
    }, {
      "label": "ellipsoid()",
      "description": "Draw an ellipsoid with given radius",
      "examples": ["// draw an ellipsoid \n\n\n// with radius 30, 40 and 40. \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a white 3d ellipsoid');\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    ellipsoid(30, 40, 40);\n}", "// slide to see how detailX works \n\nlet detailX;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailX = createSlider(2, 24, 12);\n    detailX.position(10, height + 5);\n    detailX.style('width', '80px');\n    describe(\n        'a rotating white ellipsoid with limited X detail, with a slider that adjusts detailX'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 94);\n    rotateY(millis() / 1000);\n    ellipsoid(30, 40, 40, detailX.value(), 8);\n}", "// slide to see how detailY works \n\nlet detailY;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailY = createSlider(2, 24, 6);\n    detailY.position(10, height + 5);\n    detailY.style('width', '80px');\n    describe(\n        'a rotating white ellipsoid with limited Y detail, with a slider that adjusts detailY'\n    );\n}\n\nfunction draw() {\n    background(205, 105, 9);\n    rotateY(millis() / 1000);\n    ellipsoid(30, 40, 40, 12, detailY.value());\n}"],
      "href": "#/p5/ellipsoid",
      "syntax": "ellipsoid([radiusx], [radiusy], [radiusz], [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-radius of ellipsoid",
        "paramName": "radiusx"
      }, {
        "paramType": "Number",
        "paramDescription": "y-radius of ellipsoid",
        "paramName": "radiusy"
      }, {
        "paramType": "Number",
        "paramDescription": "z-radius of ellipsoid",
        "paramName": "radiusz"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments, the more segments the smoother geometry default is 24. Avoid detail number above 150, it may crash the browser.",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments, the more segments the smoother geometry default is 16. Avoid detail number above 150, it may crash the browser.",
        "paramName": "detailY"
      }]
    }, {
      "label": "torus()",
      "description": "Draw a torus with given radius and tube radius",
      "examples": ["// draw a spinning torus \n\n\n// with ring radius 30 and tube radius 15 \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a rotating white torus');\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    torus(30, 15);\n}", "// slide to see how detailX works \n\nlet detailX;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailX = createSlider(3, 24, 3);\n    detailX.position(10, height + 5);\n    detailX.style('width', '80px');\n    describe(\n        'a rotating white torus with limited X detail, with a slider that adjusts detailX'\n    );\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    rotateY(millis() / 1000);\n    torus(30, 15, detailX.value(), 12);\n}", "// slide to see how detailY works \n\nlet detailY;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    detailY = createSlider(3, 16, 3);\n    detailY.position(10, height + 5);\n    detailY.style('width', '80px');\n    describe(\n        'a rotating white torus with limited Y detail, with a slider that adjusts detailY'\n    );\n}\n\nfunction draw() {\n    background(205, 102, 94);\n    rotateY(millis() / 1000);\n    torus(30, 15, 16, detailY.value());\n}"],
      "href": "#/p5/torus",
      "syntax": "torus([radius], [tubeRadius], [detailX], [detailY])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "radius of the whole ring",
        "paramName": "radius"
      }, {
        "paramType": "Number",
        "paramDescription": "radius of the tube",
        "paramName": "tubeRadius"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in x-dimension, the more segments the smoother geometry default is 24",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of segments in y-dimension, the more segments the smoother geometry default is 16",
        "paramName": "detailY"
      }]
    }, {
      "label": "p5.Geometry",
      "description": "p5 Geometry class",
      "examples": [],
      "href": "#/p5.Geometry",
      "syntax": "new p5.Geometry([detailX], [detailY], [callback])",
      "parameters": [{
        "paramType": "Integer",
        "paramDescription": "number of vertices along the x-axis.",
        "paramName": "detailX"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of vertices along the y-axis.",
        "paramName": "detailY"
      }, {
        "paramType": "Function",
        "paramDescription": "function to call upon object instantiation.",
        "paramName": "callback"
      }]
    }]
  }, {
    "subgroupName": "3D Models",
    "tokens": [{
      "label": "loadModel()",
      "description": "Load a 3d model from an OBJ or STL file.",
      "examples": ["//draw a spinning octahedron \n\nlet octahedron;\n\nfunction preload() {\n    octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('Vertically rotating 3-d octahedron.');\n}\n\nfunction draw() {\n    background(200);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    model(octahedron);\n}", "//draw a spinning teapot \n\nlet teapot;\n\nfunction preload() {\n\n    // Load model with normalise parameter set to true \n\n    teapot = loadModel('assets/teapot.obj', true);\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('Vertically rotating 3-d teapot with red, green and blue gradient.');\n}\n\nfunction draw() {\n    background(200);\n    scale(0.4);\n    // Scaled to make model fit into canvas \n\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    normalMaterial();\n    // For effect \n\n    model(teapot);\n}"],
      "href": "#/p5/loadModel",
      "syntax": "loadModel(path, normalize, [successCallback], [failureCallback], [fileType])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "Path of the model to be loaded",
        "paramName": "path"
      }, {
        "paramType": "Boolean",
        "paramDescription": "If true, scale the model to a standardized size when loading",
        "paramName": "normalize"
      }, {
        "paramType": "function(p5.Geometry)",
        "paramDescription": "Function to be called once the model is loaded. Will be passed the 3D model object.",
        "paramName": "successCallback"
      }, {
        "paramType": "Function(Event)",
        "paramDescription": "called with event error if the model fails to load.",
        "paramName": "failureCallback"
      }, {
        "paramType": "String",
        "paramDescription": "The file extension of the model (.stl, .obj).",
        "paramName": "fileType"
      }]
    }, {
      "label": "model()",
      "description": "Render a 3d model to the screen.",
      "examples": ["//draw a spinning octahedron \n\nlet octahedron;\n\nfunction preload() {\n    octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('Vertically rotating 3-d octahedron.');\n}\n\nfunction draw() {\n    background(200);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    model(octahedron);\n}"],
      "href": "#/p5/model",
      "syntax": "model(model)",
      "parameters": [{
        "paramType": "p5.Geometry",
        "paramDescription": "Loaded 3d model to be rendered",
        "paramName": "model"
      }]
    }]
  }, {
    "subgroupName": "&nbsp;",
    "tokens": [{
      "label": "vertexNormal()",
      "description": "Sets the normal to use for subsequent vertices.",
      "examples": [],
      "href": "#/p5/vertexNormal",
      "syntax": "vertexNormal(x, y, z, v)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "z"
      }, {
        "paramType": "Vector",
        "paramDescription": "",
        "paramName": "v"
      }]
    }]
  }]
}, {
  "groupName": "Constants",
  "subgroups": [{
    "tokens": [{
      "label": "HALF_PI",
      "description": "HALF_PI is a mathematical constant with the value\n1.57079632679489661923. It is half the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\" class=\"code\">sin()</a> and <a href=\"#/p5/cos\" class=\"code\">cos()</a>.",
      "examples": ["arc(50, 50, 80, 80, 0, HALF_PI);"],
      "href": "#/p5/HALF_PI",
      "syntax": "HALF_PI",
      "parameters": []
    }, {
      "label": "PI",
      "description": "PI is a mathematical constant with the value\n3.14159265358979323846. It is the ratio of the circumference\nof a circle to its diameter. It is useful in combination with\nthe trigonometric functions <a href=\"#/p5/sin\" class=\"code\">sin()</a> and <a href=\"#/p5/cos\" class=\"code\">cos()</a>.",
      "examples": ["arc(50, 50, 80, 80, 0, PI);"],
      "href": "#/p5/PI",
      "syntax": "PI",
      "parameters": []
    }, {
      "label": "QUARTER_PI",
      "description": "QUARTER_PI is a mathematical constant with the value 0.7853982.\nIt is one quarter the ratio of the circumference of a circle to\nits diameter. It is useful in combination with the trigonometric\nfunctions <a href=\"#/p5/sin\" class=\"code\">sin()</a> and <a href=\"#/p5/cos\" class=\"code\">cos()</a>.",
      "examples": ["arc(50, 50, 80, 80, 0, QUARTER_PI);"],
      "href": "#/p5/QUARTER_PI",
      "syntax": "QUARTER_PI",
      "parameters": []
    }, {
      "label": "TAU",
      "description": "TAU is an alias for TWO_PI, a mathematical constant with the\nvalue 6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\" class=\"code\">sin()</a> and <a href=\"#/p5/cos\" class=\"code\">cos()</a>.",
      "examples": ["arc(50, 50, 80, 80, 0, TAU);"],
      "href": "#/p5/TAU",
      "syntax": "TAU",
      "parameters": []
    }, {
      "label": "TWO_PI",
      "description": "TWO_PI is a mathematical constant with the value\n6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\" class=\"code\">sin()</a> and <a href=\"#/p5/cos\" class=\"code\">cos()</a>.",
      "examples": ["arc(50, 50, 80, 80, 0, TWO_PI);"],
      "href": "#/p5/TWO_PI",
      "syntax": "TWO_PI",
      "parameters": []
    }, {
      "label": "DEGREES",
      "description": "Constant to be used with the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a> function, to set the mode in\nwhich p5.js interprets and calculates angles (either DEGREES or RADIANS).",
      "examples": ["function setup() {\n    angleMode(DEGREES);\n}"],
      "href": "#/p5/DEGREES",
      "syntax": "DEGREES",
      "parameters": []
    }, {
      "label": "RADIANS",
      "description": "Constant to be used with the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a> function, to set the mode\nin which p5.js interprets and calculates angles (either RADIANS or DEGREES).",
      "examples": ["function setup() {\n    angleMode(RADIANS);\n}"],
      "href": "#/p5/RADIANS",
      "syntax": "RADIANS",
      "parameters": []
    }]
  }]
}, {
  "groupName": "Structure",
  "subgroups": [{
    "tokens": [{
      "label": "preload()",
      "description": "Called directly before <a href=\"#/p5/setup\" class=\"code\">setup()</a>, the <a href=\"#/p5/preload\" class=\"code\">preload()</a> function is used to handle\nasynchronous loading of external files in a blocking way. If a preload\nfunction is defined, <a href=\"#/p5/setup\" class=\"code\">setup()</a> will wait until any load calls within have\nfinished. Nothing besides load calls (<a href=\"#/p5/loadImage\" class=\"code\">loadImage</a>, <a href=\"#/p5/loadJSON\" class=\"code\">loadJSON</a>, <a href=\"#/p5/loadFont\" class=\"code\">loadFont</a>,\n<a href=\"#/p5/loadStrings\" class=\"code\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\nloading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\" class=\"code\">setup()</a>\nor anywhere else with the use of a callback parameter.",
      "examples": ["let img;\nlet c;\n\nfunction preload() {\n\n    // preload() runs once \n\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n\n    // setup() waits until preload() is done \n\n    img.loadPixels();\n\n    // get color of middle pixel \n\n    c = img.get(img.width / 2, img.height / 2);\n}\n\nfunction draw() {\n    background(c);\n    image(img, 25, 25, 50, 50);\n}"],
      "href": "#/p5/preload",
      "syntax": "preload()",
      "parameters": []
    }, {
      "label": "setup()",
      "description": "The <a href=\"#/p5/setup\" class=\"code\">setup()</a> function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one <a href=\"#/p5/setup\" class=\"code\">setup()</a> function for each program and it shouldn't\nbe called again after its initial execution.",
      "examples": ["let a = 0;\n\nfunction setup() {\n    background(0);\n    noStroke();\n    fill(102);\n}\n\nfunction draw() {\n    rect(a++ % width, 10, 2, 80);\n}"],
      "href": "#/p5/setup",
      "syntax": "setup()",
      "parameters": []
    }, {
      "label": "draw()",
      "description": "Called directly after <a href=\"#/p5/setup\" class=\"code\">setup()</a>, the <a href=\"#/p5/draw\" class=\"code\">draw()</a> function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor <a href=\"#/p5/noLoop\" class=\"code\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\" class=\"code\">noLoop()</a> is called in <a href=\"#/p5/setup\" class=\"code\">setup()</a>, <a href=\"#/p5/draw\" class=\"code\">draw()</a> will\nstill be executed once before stopping. <a href=\"#/p5/draw\" class=\"code\">draw()</a> is called automatically and\nshould never be called explicitly.",
      "examples": ["let yPos = 0;\n\nfunction setup() {\n\n    // setup() runs once \n\n    frameRate(30);\n}\n\nfunction draw() {\n\n    // draw() loops forever, until stopped \n\n    background(204);\n    yPos = yPos - 1;\n    if (yPos < 0) {\n        yPos = height;\n    }\n    line(0, yPos, width, yPos);\n}"],
      "href": "#/p5/draw",
      "syntax": "draw()",
      "parameters": []
    }, {
      "label": "remove()",
      "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it. While all functions and\nvariables and objects created by the p5 library will be removed, any\nother global variables created by your code will remain.",
      "examples": ["function draw() {\n    ellipse(50, 50, 10, 10);\n}\n\nfunction mousePressed() {\n    remove();\n    // remove whole sketch on mouse press \n\n}"],
      "href": "#/p5/remove",
      "syntax": "remove()",
      "parameters": []
    }, {
      "label": "disableFriendlyErrors",
      "description": "Turn off some features of the friendly error system (FES), which can give\na significant boost to performance when needed.",
      "examples": ["p5.disableFriendlyErrors = true;\n\nfunction setup() {\n    createCanvas(100, 50);\n}"],
      "href": "#/p5/disableFriendlyErrors",
      "syntax": "disableFriendlyErrors",
      "parameters": []
    }, {
      "label": "noLoop()",
      "description": "Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\" class=\"code\">draw()</a>.\nIf <a href=\"#/p5/loop\" class=\"code\">loop()</a> is called, the code in <a href=\"#/p5/draw\" class=\"code\">draw()</a>\nbegins to run continuously again. If using <a href=\"#/p5/noLoop\" class=\"code\">noLoop()</a>\nin <a href=\"#/p5/setup\" class=\"code\">setup()</a>, it should be the last line inside the block.",
      "examples": ["function setup() {\n    createCanvas(100, 100);\n    background(200);\n    noLoop();\n}\n\nfunction draw() {\n    line(10, 10, 90, 90);\n}", "let x = 0;\n\nfunction setup() {\n    createCanvas(100, 100);\n}\n\nfunction draw() {\n    background(204);\n    x = x + 0.1;\n    if (x > width) {\n        x = 0;\n    }\n    line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n    noLoop();\n}\n\nfunction mouseReleased() {\n    loop();\n}"],
      "href": "#/p5/noLoop",
      "syntax": "noLoop()",
      "parameters": []
    }, {
      "label": "loop()",
      "description": "By default, p5.js loops through draw() continuously, executing the code within\nit. However, the <a href=\"#/p5/draw\" class=\"code\">draw()</a> loop may be stopped by calling\n<a href=\"#/p5/noLoop\" class=\"code\">noLoop()</a>. In that case, the <a href=\"#/p5/draw\" class=\"code\">draw()</a>\nloop can be resumed with loop().",
      "examples": ["let x = 0;\n\nfunction setup() {\n    createCanvas(100, 100);\n    noLoop();\n}\n\nfunction draw() {\n    background(204);\n    x = x + 0.1;\n    if (x > width) {\n        x = 0;\n    }\n    line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n    loop();\n}\n\nfunction mouseReleased() {\n    noLoop();\n}"],
      "href": "#/p5/loop",
      "syntax": "loop()",
      "parameters": []
    }, {
      "label": "isLooping()",
      "description": "By default, p5.js loops through <a href=\"#/p5/draw\" class=\"code\">draw()</a> continuously,\nexecuting the code within it. If the sketch is stopped with\n<a href=\"#/p5/noLoop\" class=\"code\">noLoop()</a> or resumed with <a href=\"#/p5/loop\" class=\"code\">loop()</a>,\nisLooping() returns the current state for use within custom event handlers.",
      "examples": ["let checkbox, button, colBG, colFill;\n\nfunction setup() {\n    createCanvas(100, 100);\n\n    button = createButton('Colorize if loop()');\n    button.position(0, 120);\n    button.mousePressed(changeBG);\n\n    checkbox = createCheckbox('loop()', true);\n    checkbox.changed(checkLoop);\n\n    colBG = color(0);\n    colFill = color(255);\n}\n\nfunction changeBG() {\n    if (isLooping()) {\n        colBG = color(random(255), random(255), random(255));\n        colFill = color(random(255), random(255), random(255));\n    }\n}\n\nfunction checkLoop() {\n    if (this.checked()) {\n        loop();\n    } else {\n        noLoop();\n    }\n}\n\nfunction draw() {\n    background(colBG);\n    fill(colFill);\n    ellipse(frameCount % width, height / 2, 50);\n}"],
      "href": "#/p5/isLooping",
      "syntax": "isLooping()",
      "parameters": []
    }, {
      "label": "push()",
      "description": "The <a href=\"#/p5/push\" class=\"code\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\" class=\"code\">pop()</a> restores these\nsettings. Note that these functions are always used together. They allow you to\nchange the style and transformation settings and later return to what you had.\nWhen a new state is started with <a href=\"#/p5/push\" class=\"code\">push()</a>, it builds on\nthe current style and transform information. The <a href=\"#/p5/push\" class=\"code\">push()</a>\nand <a href=\"#/p5/pop\" class=\"code\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)",
      "examples": ["ellipse(0, 50, 33, 33);\n// Left circle \n\n\npush();\n// Start a new drawing state \n\nstrokeWeight(10);\nfill(204, 153, 0);\ntranslate(50, 0);\nellipse(0, 50, 33, 33);\n// Middle circle \n\npop();\n// Restore original state \n\n\nellipse(100, 50, 33, 33);\n// Right circle ", "ellipse(0, 50, 33, 33);\n// Left circle \n\n\npush();\n// Start a new drawing state \n\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);\n// Left-middle circle \n\n\npush();\n// Start another new drawing state \n\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);\n// Right-middle circle \n\npop();\n// Restore previous state \n\n\npop();\n// Restore original state \n\n\nellipse(100, 50, 33, 33);\n// Right circle "],
      "href": "#/p5/push",
      "syntax": "push()",
      "parameters": []
    }, {
      "label": "pop()",
      "description": "The <a href=\"#/p5/push\" class=\"code\">push()</a> function saves the current drawing style\nsettings and transformations, while <a href=\"#/p5/pop\" class=\"code\">pop()</a> restores\nthese settings. Note that these functions are always used together. They allow\nyou to change the style and transformation settings and later return to what\nyou had. When a new state is started with <a href=\"#/p5/push\" class=\"code\">push()</a>, it\nbuilds on the current style and transform information. The <a href=\"#/p5/push\" class=\"code\">push()</a>\nand <a href=\"#/p5/pop\" class=\"code\">pop()</a> functions can be embedded to provide more\ncontrol. (See the second example for a demonstration.)",
      "examples": ["ellipse(0, 50, 33, 33);\n// Left circle \n\n\npush();\n// Start a new drawing state \n\ntranslate(50, 0);\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(0, 50, 33, 33);\n// Middle circle \n\npop();\n// Restore original state \n\n\nellipse(100, 50, 33, 33);\n// Right circle ", "ellipse(0, 50, 33, 33);\n// Left circle \n\n\npush();\n// Start a new drawing state \n\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);\n// Left-middle circle \n\n\npush();\n// Start another new drawing state \n\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);\n// Right-middle circle \n\npop();\n// Restore previous state \n\n\npop();\n// Restore original state \n\n\nellipse(100, 50, 33, 33);\n// Right circle "],
      "href": "#/p5/pop",
      "syntax": "pop()",
      "parameters": []
    }, {
      "label": "redraw()",
      "description": "Executes the code within <a href=\"#/p5/draw\" class=\"code\">draw()</a> one time. This\nfunction allows the program to update the display window only when necessary,\nfor example when an event registered by <a href=\"#/p5/mousePressed\" class=\"code\">mousePressed()</a>\nor <a href=\"#/p5/keyPressed\" class=\"code\">keyPressed()</a> occurs.",
      "examples": ["let x = 0;\n\nfunction setup() {\n    createCanvas(100, 100);\n    noLoop();\n}\n\nfunction draw() {\n    background(204);\n    line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n    x + = 1;\n    redraw();\n}", "let x = 0;\n\nfunction setup() {\n    createCanvas(100, 100);\n    noLoop();\n}\n\nfunction draw() {\n    background(204);\n    x + = 1;\n    line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n    redraw(5);\n}"],
      "href": "#/p5/redraw",
      "syntax": "redraw([n])",
      "parameters": [{
        "paramType": "Integer",
        "paramDescription": "Redraw for n-times. The default value is 1.",
        "paramName": "n"
      }]
    }, {
      "label": "p5()",
      "description": "The <code>p5()</code> constructor enables you to activate \"instance mode\" instead of normal\n\"global mode\". This is an advanced topic. A short description and example is\nincluded below. Please see\n<a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&amp;feature=youtu.be\">\nDan Shiffman's Coding Train video tutorial</a> or this\n<a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a>\nfor more info.",
      "examples": ["const s = p = > {\n    let x = 100;\n    let y = 100;\n\n    p.setup = function() {\n        p.createCanvas(700, 410);\n    };\n\n    p.draw = function() {\n        p.background(0);\n        p.fill(255);\n        p.rect(x, y, 50, 50);\n    };\n};\n\nnew p5(s);\n// invoke p5 "],
      "href": "#/p5/p5",
      "syntax": "p5(sketch, node)",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "a function containing a p5.js sketch",
        "paramName": "sketch"
      }, {
        "paramType": "String|Object",
        "paramDescription": "ID or pointer to HTML DOM node to contain sketch in",
        "paramName": "node"
      }]
    }]
  }]
}, {
  "groupName": "DOM",
  "subgroups": [{
    "tokens": [{
      "label": "p5.Element",
      "description": "Base class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\" class=\"code\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\" class=\"code\">createCanvas()</a>, <a href=\"#/p5/createGraphics\" class=\"code\">createGraphics()</a>,\n<a href=\"#/p5/createDiv\" class=\"code\">createDiv()</a>, <a href=\"#/p5/createImg\" class=\"code\">createImg()</a>, <a href=\"#/p5/createInput\" class=\"code\">createInput()</a>, etc.",
      "examples": [],
      "href": "#/p5.Element",
      "syntax": "new p5.Element(elt, [pInst])",
      "parameters": [{
        "paramType": "HTMLElement",
        "paramDescription": "DOM node that is wrapped",
        "paramName": "elt"
      }, {
        "paramType": "P5",
        "paramDescription": "pointer to p5 instance",
        "paramName": "pInst"
      }]
    }, {
      "label": "select()",
      "description": "Searches the page for the first element that matches the given CSS selector string (can be an\nID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\" class=\"code\">p5.Element</a>.\nThe DOM node itself can be accessed with .elt.\nReturns null if none found. You can also specify a container to search within.",
      "examples": ["function setup() {\n    createCanvas(50, 50);\n    background(30);\n\n    // move canvas down and right \n\n    select('canvas').position(10, 30);\n}", "// select using ID \n\nlet a = select('#container');\nlet b = select('#beep', '#container');\nlet c;\nif (a) {\n\n    // select using class \n\n    c = select('.boop', a);\n}\n\n// select using CSS selector string \n\nlet d = select('#container #bleep');\nlet e = select('#container p');\n[a, b, c, d, e];\n// unused "],
      "href": "#/p5/select",
      "syntax": "select(selectors, [container])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "CSS selector string of element to search for",
        "paramName": "selectors"
      }, {
        "paramType": "String|p5.Element|HTMLElement",
        "paramDescription": "CSS selector string, p5.Element, or HTML element to search within",
        "paramName": "container"
      }]
    }, {
      "label": "selectAll()",
      "description": "Searches the page for elements that match the given CSS selector string (can be an ID a class,\ntag name or a combination) and returns them as <a href=\"#/p5.Element\" class=\"code\">p5.Element</a>s in\nan array.\nThe DOM node itself can be accessed with .elt.\nReturns an empty array if none found.\nYou can also specify a container to search within.",
      "examples": ["function setup() {\n    createButton('btn');\n    createButton('2nd btn');\n    createButton('3rd btn');\n    let buttons = selectAll('button');\n\n    for (let i = 0; i < 3; i++) {\n        buttons[i].size(100);\n        buttons[i].position(0, i * 30);\n    }\n}", "// these are all valid calls to selectAll() \n\nlet a = selectAll('.beep');\na = selectAll('div');\na = selectAll('button', '#container');\n\nlet b = createDiv();\nb.id('container');\nlet c = select('#container');\na = selectAll('p', c);\na = selectAll('#container p');\n\nlet d = document.getElementById('container');\na = selectAll('.boop', d);\na = selectAll('#container .boop');\nconsole.log(a);"],
      "href": "#/p5/selectAll",
      "syntax": "selectAll(selectors, [container])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "CSS selector string of elements to search for",
        "paramName": "selectors"
      }, {
        "paramType": "String|p5.Element|HTMLElement",
        "paramDescription": "CSS selector string, p5.Element , or HTML element to search within",
        "paramName": "container"
      }]
    }, {
      "label": "removeElements()",
      "description": "Removes all elements created by p5, except any canvas / graphics\nelements created by <a href=\"#/p5/createCanvas\" class=\"code\">createCanvas</a> or <a href=\"#/p5/createGraphics\" class=\"code\">createGraphics</a>.\nEvent handlers are removed, and element is removed from the DOM.",
      "examples": ["function setup() {\n    createCanvas(100, 100);\n    background('grey');\n    let div = createDiv('this is some text');\n    let p = createP('this is a paragraph');\n    div.style('font-size', '16px');\n    p.style('font-size', '16px');\n}\n\nfunction mousePressed() {\n    removeElements();\n    // this will remove the div and p, not canvas \n\n}"],
      "href": "#/p5/removeElements",
      "syntax": "removeElements()",
      "parameters": []
    }, {
      "label": "changed()",
      "description": "The .<a href=\"#/p5.Element/changed\" class=\"code\">changed()</a> function is called when the value of an\nelement changes.\nThis can be used to attach an element specific event listener.",
      "examples": ["let sel;\n\nfunction setup() {\n    textAlign(CENTER);\n    background(200);\n    sel = createSelect();\n    sel.position(10, 10);\n    sel.option('pear');\n    sel.option('kiwi');\n    sel.option('grape');\n    sel.changed(mySelectEvent);\n}\n\nfunction mySelectEvent() {\n    let item = sel.value();\n    background(200);\n    text(\"it's a \" + item + '!', 50, 50);\n}", "let checkbox;\nlet cnv;\n\nfunction setup() {\n    checkbox = createCheckbox(' fill');\n    checkbox.changed(changeFill);\n    cnv = createCanvas(100, 100);\n    cnv.position(0, 30);\n    noFill();\n}\n\nfunction draw() {\n    background(200);\n    ellipse(50, 50, 50, 50);\n}\n\nfunction changeFill() {\n    if (checkbox.checked()) {\n        fill(0);\n    } else {\n        noFill();\n    }\n}"],
      "href": "#/p5/changed",
      "syntax": "changed(fxn)",
      "parameters": [{
        "paramType": "Function|Boolean",
        "paramDescription": "function to be fired when the value of an element changes. if false is passed instead, the previously firing function will no longer fire.",
        "paramName": "fxn"
      }]
    }, {
      "label": "input()",
      "description": "The .<a href=\"#/p5.Element/input\" class=\"code\">input()</a> function is called when any user input is\ndetected with an element. The input event is often used\nto detect keystrokes in a input element, or changes on a\nslider element. This can be used to attach an element specific\nevent listener.",
      "examples": ["// Open your console to see the output \n\nfunction setup() {\n    createCanvas(100, 100);\n    background('grey');\n    let inp = createInput('');\n    inp.position(0, 0);\n    inp.size(100);\n    inp.input(myInputEvent);\n}\n\nfunction myInputEvent() {\n    console.log('you are typing: ', this.value());\n}"],
      "href": "#/p5/input",
      "syntax": "input(fxn)",
      "parameters": [{
        "paramType": "Function|Boolean",
        "paramDescription": "function to be fired when any user input is detected within the element. if false is passed instead, the previously firing function will no longer fire.",
        "paramName": "fxn"
      }]
    }, {
      "label": "createDiv()",
      "description": "Creates a <code>&lt;div&gt;&lt;/div&gt;</code> element in the DOM with given inner HTML.",
      "examples": ["let div = createDiv('this is some text');\ndiv.style('font-size', '16px');\ndiv.position(10, 0);"],
      "href": "#/p5/createDiv",
      "syntax": "createDiv([html])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "inner HTML for element created",
        "paramName": "html"
      }]
    }, {
      "label": "createP()",
      "description": "Creates a <code>&lt;p&gt;&lt;/p&gt;</code> element in the DOM with given inner HTML. Used\nfor paragraph length text.",
      "examples": ["let p = createP('this is some text');\np.style('font-size', '16px');\np.position(10, 0);"],
      "href": "#/p5/createP",
      "syntax": "createP([html])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "inner HTML for element created",
        "paramName": "html"
      }]
    }, {
      "label": "createSpan()",
      "description": "Creates a <code>&lt;span&gt;&lt;/span&gt;</code> element in the DOM with given inner HTML.",
      "examples": ["let span = createSpan('this is some text');\nspan.position(0, 0);"],
      "href": "#/p5/createSpan",
      "syntax": "createSpan([html])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "inner HTML for element created",
        "paramName": "html"
      }]
    }, {
      "label": "createImg()",
      "description": "Creates an <code>&lt;img&gt;</code> element in the DOM with given src and\nalternate text.",
      "examples": ["let img = createImg(\n    'https://p5js.org/assets/img/asterisk-01.png',\n    'the p5 magenta asterisk'\n);\nimg.position(0, -10);"],
      "href": "#/p5/createImg",
      "syntax": "createImg(src, alt)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "src path or url for image",
        "paramName": "src"
      }, {
        "paramType": "String",
        "paramDescription": "alternate text to be used if image does not load. You can use also an empty string (\"\") if that an image is not intended to be viewed.",
        "paramName": "alt"
      }, {
        "paramType": "String",
        "paramDescription": "crossOrigin property of the img element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with canvas. if an empty string(\"\") is passed, CORS is not used",
        "paramName": "crossOrigin"
      }, {
        "paramType": "Function",
        "paramDescription": "callback to be called once image data is loaded with the p5.Element as argument",
        "paramName": "successCallback"
      }]
    }, {
      "label": "createA()",
      "description": "Creates an <code>&lt;a&gt;&lt;/a&gt;</code> element in the DOM for including a hyperlink.",
      "examples": ["let a = createA('http://p5js.org/', 'this is a link');\na.position(0, 0);"],
      "href": "#/p5/createA",
      "syntax": "createA(href, html, [target])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "url of page to link to",
        "paramName": "href"
      }, {
        "paramType": "String",
        "paramDescription": "inner html of link element to display",
        "paramName": "html"
      }, {
        "paramType": "String",
        "paramDescription": "target where new link should open, could be _blank, _self, _parent, _top.",
        "paramName": "target"
      }]
    }, {
      "label": "createSlider()",
      "description": "Creates a slider <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM.\nUse .size() to set the display length of the slider.",
      "examples": ["let slider;\n\nfunction setup() {\n    slider = createSlider(0, 255, 100);\n    slider.position(10, 10);\n    slider.style('width', '80px');\n}\n\nfunction draw() {\n    let val = slider.value();\n    background(val);\n}", "let slider;\n\nfunction setup() {\n    colorMode(HSB);\n    slider = createSlider(0, 360, 60, 40);\n    slider.position(10, 10);\n    slider.style('width', '80px');\n}\n\nfunction draw() {\n    let val = slider.value();\n    background(val, 100, 100, 1);\n}"],
      "href": "#/p5/createSlider",
      "syntax": "createSlider(min, max, [value], [step])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "minimum value of the slider",
        "paramName": "min"
      }, {
        "paramType": "Number",
        "paramDescription": "maximum value of the slider",
        "paramName": "max"
      }, {
        "paramType": "Number",
        "paramDescription": "default value of the slider",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)",
        "paramName": "step"
      }]
    }, {
      "label": "createButton()",
      "description": "Creates a <code>&lt;button&gt;&lt;/button&gt;</code> element in the DOM.\nUse .size() to set the display size of the button.\nUse .mousePressed() to specify behavior on press.",
      "examples": ["let button;\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(0);\n    button = createButton('click me');\n    button.position(0, 0);\n    button.mousePressed(changeBG);\n}\n\nfunction changeBG() {\n    let val = random(255);\n    background(val);\n}"],
      "href": "#/p5/createButton",
      "syntax": "createButton(label, [value])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "label displayed on the button",
        "paramName": "label"
      }, {
        "paramType": "String",
        "paramDescription": "value of the button",
        "paramName": "value"
      }]
    }, {
      "label": "createCheckbox()",
      "description": "Creates a checkbox <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM.\nCalling .checked() on a checkbox returns a boolean indicating whether\nit is checked or not.",
      "examples": ["let checkbox;\n\nfunction setup() {\n    checkbox = createCheckbox('label', false);\n    checkbox.changed(myCheckedEvent);\n}\n\nfunction myCheckedEvent() {\n    if (checkbox.checked()) {\n        console.log('Checking!');\n    } else {\n        console.log('Unchecking!');\n    }\n}"],
      "href": "#/p5/createCheckbox",
      "syntax": "createCheckbox([label], [value])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "label displayed after checkbox",
        "paramName": "label"
      }, {
        "paramType": "Boolean",
        "paramDescription": "value of the checkbox; checked is true, unchecked is false",
        "paramName": "value"
      }]
    }, {
      "label": "createSelect()",
      "description": "Creates a dropdown menu <code>&lt;select&gt;&lt;/select&gt;</code> element in the DOM.\nIt also assigns select-related methods to <a href=\"#/p5.Element\" class=\"code\">p5.Element</a> when selecting an existing select box. Options in the menu are unique by <code>name</code> (the display text).",
      "examples": ["let sel;\n\nfunction setup() {\n    textAlign(CENTER);\n    background(200);\n    sel = createSelect();\n    sel.position(10, 10);\n    sel.option('pear');\n    sel.option('kiwi');\n    sel.option('grape');\n    sel.selected('kiwi');\n    sel.changed(mySelectEvent);\n}\n\nfunction mySelectEvent() {\n    let item = sel.value();\n    background(200);\n    text('It is a ' + item + '!', 50, 50);\n}", "let sel;\n\nfunction setup() {\n    textAlign(CENTER);\n    background(200);\n    sel = createSelect();\n    sel.position(10, 10);\n    sel.option('oil');\n    sel.option('milk');\n    sel.option('bread');\n    sel.disable('milk');\n}", "let sel;\n\nfunction setup() {\n    textAlign(CENTER);\n    background(200);\n    sel = createSelect();\n    sel.position(10, 10);\n    sel.option('oil');\n    sel.option('milk');\n    sel.option('bread');\n\n    // disable milk and oil \n\n    sel.disable('milk');\n    sel.disable('oil');\n\n    // enable milk again \n\n    sel.enable('milk');\n}"],
      "href": "#/p5/createSelect",
      "syntax": "createSelect([multiple])",
      "parameters": [{
        "paramType": "Boolean",
        "paramDescription": "true if dropdown should support multiple selections",
        "paramName": "multiple"
      }, {
        "paramType": "Object",
        "paramDescription": "DOM select element",
        "paramName": "existing"
      }]
    }, {
      "label": "createRadio()",
      "description": "Creates a radio button element in the DOM. It also helps existing radio buttons\nassign methods of <a href=\"#/p5.Element/\" class=\"code\">p5.Element</a>.",
      "examples": ["let radio;\n\nfunction setup() {\n    radio = createRadio();\n    radio.option('black');\n    radio.option('white');\n    radio.option('gray');\n    radio.style('width', '60px');\n    textAlign(CENTER);\n    fill(255, 0, 0);\n}\n\nfunction draw() {\n    let val = radio.value();\n    background(val);\n    text(val, width / 2, height / 2);\n}", "let radio;\n\nfunction setup() {\n    radio = createRadio();\n    radio.option('1', 'apple');\n    radio.option('2', 'bread');\n    radio.option('3', 'juice');\n    radio.style('width', '30px');\n    radio.selected('2');\n    textAlign(CENTER);\n}\n\nfunction draw() {\n    background(200);\n    let val = radio.value();\n    if (val) {\n        text('item cost is $' + val, width / 2, height / 2);\n    }\n}"],
      "href": "#/p5/createRadio",
      "syntax": "createRadio(containerElement, [name])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "A container HTML Element, either a div or span, inside which all existing radio inputs will be considered as options.",
        "paramName": "containerElement"
      }, {
        "paramType": "String",
        "paramDescription": "A name parameter for each Input Element.",
        "paramName": "name"
      }]
    }, {
      "label": "createColorPicker()",
      "description": "Creates a colorPicker element in the DOM for color input.\nThe .value() method will return a hex string (#rrggbb) of the color.\nThe .color() method will return a <a href=\"#/p5.Color\" class=\"code\">p5.Color</a>\nobject with the current chosen color.",
      "examples": ["let colorPicker;\n\nfunction setup() {\n    createCanvas(100, 100);\n    colorPicker = createColorPicker('#ed225d');\n    colorPicker.position(0, height + 5);\n}\n\nfunction draw() {\n    background(colorPicker.color());\n}", "let inp1, inp2;\n\nfunction setup() {\n    createCanvas(100, 100);\n    background('grey');\n    inp1 = createColorPicker('#ff0000');\n    inp1.position(0, height + 5);\n    inp1.input(setShade1);\n    inp2 = createColorPicker(color('yellow'));\n    inp2.position(0, height + 30);\n    inp2.input(setShade2);\n    setMidShade();\n}\n\nfunction setMidShade() {\n\n    // Finding a shade between the two \n\n    let commonShade = lerpColor(inp1.color(), inp2.color(), 0.5);\n    fill(commonShade);\n    rect(20, 20, 60, 60);\n}\n\nfunction setShade1() {\n    setMidShade();\n    console.log('You are choosing shade 1 to be : ', this.value());\n}\n\nfunction setShade2() {\n    setMidShade();\n    console.log('You are choosing shade 2 to be : ', this.value());\n}"],
      "href": "#/p5/createColorPicker",
      "syntax": "createColorPicker([value])",
      "parameters": [{
        "paramType": "String|p5.Color",
        "paramDescription": "default color of element",
        "paramName": "value"
      }]
    }, {
      "label": "createInput()",
      "description": "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM for text input.\nUse .<a href=\"#/p5.Element/size\" class=\"code\">size()</a> to set the display length of the box.",
      "examples": ["function setup() {\n    createCanvas(100, 100);\n    background('grey');\n    let inp = createInput('');\n    inp.position(0, 0);\n    inp.size(100);\n    inp.input(myInputEvent);\n}\n\nfunction myInputEvent() {\n    console.log('you are typing: ', this.value());\n}"],
      "href": "#/p5/createInput",
      "syntax": "createInput(value, [type])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "default value of the input box",
        "paramName": "value"
      }, {
        "paramType": "String",
        "paramDescription": "type of text, ie text, password etc. Defaults to text. Needs a value to be specified first.",
        "paramName": "type"
      }]
    }, {
      "label": "createFileInput()",
      "description": "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM of type 'file'.\nThis allows users to select local files for use in a sketch.",
      "examples": ["let input;\nlet img;\n\nfunction setup() {\n    input = createFileInput(handleFile);\n    input.position(0, 0);\n}\n\nfunction draw() {\n    background(255);\n    if (img) {\n        image(img, 0, 0, width, height);\n    }\n}\n\nfunction handleFile(file) {\n    print(file);\n    if (file.type === 'image') {\n        img = createImg(file.data, '');\n        img.hide();\n    } else {\n        img = null;\n    }\n}"],
      "href": "#/p5/createFileInput",
      "syntax": "createFileInput(callback, [multiple])",
      "parameters": [{
        "paramType": "Function",
        "paramDescription": "callback function for when a file is loaded",
        "paramName": "callback"
      }, {
        "paramType": "Boolean",
        "paramDescription": "optional, to allow multiple files to be selected",
        "paramName": "multiple"
      }]
    }, {
      "label": "createVideo()",
      "description": "Creates an HTML5 <code>&lt;video&gt;</code> element in the DOM for simple playback\nof audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\" class=\"code\">hide()</a>\nand drawn into canvas using <a href=\"#/p5/image\" class=\"code\">image()</a>. The first parameter\ncan be either a single string path to a video file, or an array of string\npaths to different formats of the same video. This is useful for ensuring\nthat your video can play across different browsers, as each supports\ndifferent formats. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\npage</a> for further information about supported formats.",
      "examples": ["let vid;\n\nfunction setup() {\n    noCanvas();\n\n    vid = createVideo(\n        ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n        vidLoad\n    );\n\n    vid.size(100, 100);\n}\n\n\n// This function is called when the video loads \n\nfunction vidLoad() {\n    vid.loop();\n    vid.volume(0);\n}"],
      "href": "#/p5/createVideo",
      "syntax": "createVideo(src, [callback])",
      "parameters": [{
        "paramType": "String|String[]",
        "paramDescription": "path to a video file, or array of paths for supporting different browsers",
        "paramName": "src"
      }, {
        "paramType": "Function",
        "paramDescription": "callback function to be called upon 'canplaythrough' event fire, that is, when the browser can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content",
        "paramName": "callback"
      }]
    }, {
      "label": "createAudio()",
      "description": "Creates a hidden HTML5 <code>&lt;audio&gt;</code> element in the DOM for simple audio\nplayback. The first parameter can be either a single string path to a\naudio file, or an array of string paths to different formats of the same\naudio. This is useful for ensuring that your audio can play across\ndifferent browsers, as each supports different formats.\nSee <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\npage for further information about supported formats</a>.",
      "examples": ["let ele;\n\nfunction setup() {\n    ele = createAudio('assets/beat.mp3');\n\n\n    // here we set the element to autoplay \n\n\n    // The element will play as soon \n\n\n    // as it is able to do so. \n\n    ele.autoplay(true);\n}"],
      "href": "#/p5/createAudio",
      "syntax": "createAudio([src], [callback])",
      "parameters": [{
        "paramType": "String|String[]",
        "paramDescription": "path to an audio file, or array of paths for supporting different browsers",
        "paramName": "src"
      }, {
        "paramType": "Function",
        "paramDescription": "callback function to be called upon 'canplaythrough' event fire, that is, when the browser can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content",
        "paramName": "callback"
      }]
    }, {
      "label": "createCapture()",
      "description": "Creates a new HTML5 <code>&lt;video&gt;</code> element that contains the audio/video feed\nfrom a webcam. The element is separate from the canvas and is displayed by\ndefault. The element can be hidden using .<a href=\"#/p5.Element/hide\" class=\"code\">hide()</a>.\nThe feed can be drawn onto the canvas using <a href=\"#/p5/image\" class=\"code\">image()</a>.\nThe loadedmetadata property can be used to detect when the element has fully\nloaded (see second example).",
      "examples": ["let capture;\n\nfunction setup() {\n    createCanvas(100, 100);\n    capture = createCapture(VIDEO);\n    capture.hide();\n}\n\nfunction draw() {\n    image(capture, 0, 0, width, width * capture.height / capture.width);\n    filter(INVERT);\n}", "function setup() {\n    createCanvas(480, 120);\n    let constraints = {\n        video: {\n            mandatory: {\n                minWidth: 1280,\n                minHeight: 720\n            },\n            optional: [{\n                maxFrameRate: 10\n            }]\n        },\n        audio: true\n    };\n    createCapture(constraints, function(stream) {\n        console.log(stream);\n    });\n}", "let capture;\n\nfunction setup() {\n    createCanvas(640, 480);\n    capture = createCapture(VIDEO);\n}\n\nfunction draw() {\n    background(0);\n    if (capture.loadedmetadata) {\n        let c = capture.get(0, 0, 100, 100);\n        image(c, 0, 0);\n    }\n}"],
      "href": "#/p5/createCapture",
      "syntax": "createCapture(type, [callback])",
      "parameters": [{
        "paramType": "String|Constant|Object",
        "paramDescription": "type of capture, either VIDEO or AUDIO if none specified, default both, or a Constraints object",
        "paramName": "type"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be called once stream has loaded",
        "paramName": "callback"
      }]
    }, {
      "label": "createElement()",
      "description": "Creates element with given tag in the DOM with given content.",
      "examples": ["let h5 = createElement('h5', 'im an h5 p5.element!');\nh5.style('color', '#00a1d3');\nh5.position(0, 0);"],
      "href": "#/p5/createElement",
      "syntax": "createElement(tag, [content])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "tag for the new element",
        "paramName": "tag"
      }, {
        "paramType": "String",
        "paramDescription": "html content to be inserted into the element",
        "paramName": "content"
      }]
    }, {
      "label": "p5.MediaElement",
      "description": "Extends <a href=\"#/p5.Element\" class=\"code\">p5.Element</a> to handle audio and video. In addition to the methods\nof <a href=\"#/p5.Element\" class=\"code\">p5.Element</a>, it also contains methods for controlling media. It is not\ncalled directly, but <a href=\"#/p5.MediaElement\" class=\"code\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\" class=\"code\">createVideo</a>,\n<a href=\"#/p5/createAudio\" class=\"code\">createAudio</a>, and <a href=\"#/p5/createCapture\" class=\"code\">createCapture</a>.",
      "examples": [],
      "href": "#/p5.MediaElement",
      "syntax": "new p5.MediaElement(elt)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "DOM node that is wrapped",
        "paramName": "elt"
      }]
    }, {
      "label": "p5.File",
      "description": "Base class for a file.\nUsed for Element.drop and createFileInput.",
      "examples": [],
      "href": "#/p5.File",
      "syntax": "new p5.File(file)",
      "parameters": [{
        "paramType": "File",
        "paramDescription": "File that is wrapped",
        "paramName": "file"
      }]
    }]
  }]
}, {
  "groupName": "Rendering",
  "subgroups": [{
    "tokens": [{
      "label": "p5.Graphics",
      "description": "Thin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.",
      "examples": [],
      "href": "#/p5.Graphics",
      "syntax": "new p5.Graphics(w, h, renderer, [pInst], [canvas])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height",
        "paramName": "h"
      }, {
        "paramType": "Constant",
        "paramDescription": "the renderer to use, either P2D or WEBGL",
        "paramName": "renderer"
      }, {
        "paramType": "P5",
        "paramDescription": "pointer to p5 instance",
        "paramName": "pInst"
      }, {
        "paramType": "Object",
        "paramDescription": "existing html canvas element",
        "paramName": "canvas"
      }]
    }, {
      "label": "createCanvas()",
      "description": "Creates a canvas element in the document and sets its dimensions\nin pixels. This method should be called only once at the start of <a href=\"#/p5/setup\" class=\"code\">setup()</a>.\nCalling <a href=\"#/p5/createCanvas\" class=\"code\">createCanvas</a> more than once in a\nsketch will result in very unpredictable behavior. If you want more than\none drawing canvas you could use <a href=\"#/p5/createGraphics\" class=\"code\">createGraphics()</a>\n(hidden by default but it can be shown).",
      "examples": ["function setup() {\n    createCanvas(100, 50);\n    background(153);\n    line(0, 0, width, height);\n}"],
      "href": "#/p5/createCanvas",
      "syntax": "createCanvas(w, h, [renderer], [canvas])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width of the canvas",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the canvas",
        "paramName": "h"
      }, {
        "paramType": "Constant",
        "paramDescription": "either P2D or WEBGL",
        "paramName": "renderer"
      }, {
        "paramType": "Object",
        "paramDescription": "existing html canvas element",
        "paramName": "canvas"
      }]
    }, {
      "label": "resizeCanvas()",
      "description": "Resizes the canvas to given width and height. The canvas will be cleared\nand draw will be called immediately, allowing the sketch to re-render itself\nin the resized canvas.",
      "examples": ["function setup() {\n    createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n    background(0, 100, 200);\n}\n\nfunction windowResized() {\n    resizeCanvas(windowWidth, windowHeight);\n}"],
      "href": "#/p5/resizeCanvas",
      "syntax": "resizeCanvas(w, h, [noRedraw])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width of the canvas",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the canvas",
        "paramName": "h"
      }, {
        "paramType": "Boolean",
        "paramDescription": "don't redraw the canvas immediately",
        "paramName": "noRedraw"
      }]
    }, {
      "label": "noCanvas()",
      "description": "Removes the default canvas for a p5 sketch that doesn't require a canvas",
      "examples": ["function setup() {\n    noCanvas();\n}"],
      "href": "#/p5/noCanvas",
      "syntax": "noCanvas()",
      "parameters": []
    }, {
      "label": "createGraphics()",
      "description": "Creates and returns a new p5.Graphics object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels.",
      "examples": ["let pg;\n\nfunction setup() {\n    createCanvas(100, 100);\n    pg = createGraphics(100, 100);\n}\n\nfunction draw() {\n    background(200);\n    pg.background(100);\n    pg.noStroke();\n    pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\n    image(pg, 50, 50);\n    image(pg, 0, 0, 50, 50);\n}"],
      "href": "#/p5/createGraphics",
      "syntax": "createGraphics(w, h, [renderer], [canvas])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "width of the offscreen graphics buffer",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the offscreen graphics buffer",
        "paramName": "h"
      }, {
        "paramType": "Constant",
        "paramDescription": "either P2D or WEBGL undefined defaults to p2d",
        "paramName": "renderer"
      }, {
        "paramType": "Object",
        "paramDescription": "existing html canvas element",
        "paramName": "canvas"
      }]
    }, {
      "label": "createFramebuffer()",
      "description": "Creates and returns a new <a href=\"#/p5.Framebuffer\" class=\"code\">p5.Framebuffer</a>, a\nhigh-performance WebGL object that you can draw to and then use as a texture.",
      "examples": ["let prev, next, cam;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    prev = createFramebuffer({\n        format: FLOAT\n    });\n    next = createFramebuffer({\n        format: FLOAT\n    });\n    cam = createCamera();\n    noStroke();\n}\n\nfunction draw() {\n\n    // Swap prev and next so that we can use the previous \n\n\n    // frame as a texture when drawing the current frame \n\n    [prev, next] = [next, prev];\n\n\n    // Draw to the framebuffer \n\n    next.begin();\n    background(255);\n\n    push();\n\n    // Draw the previous texture farther away, but scaled \n\n\n    // up to fill the screen, plus a bit extra scale so it grows \n\n    translate(0, 0, -200);\n    scale(1.001 * (200 + cam.eyeZ) / cam.eyeZ);\n    tint(255, 253);\n    image(prev, -width / 2, -height / 2);\n    pop();\n\n    push();\n    normalMaterial();\n    translate(25 * sin(frameCount * 0.014), 25 * sin(frameCount * 0.02), 0);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n    box(12);\n    pop();\n    next.end();\n\n    image(next, -width / 2, -height / 2);\n}"],
      "href": "#/p5/createFramebuffer",
      "syntax": "createFramebuffer([options])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "An optional object with configuration",
        "paramName": "options"
      }]
    }, {
      "label": "blendMode()",
      "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):",
      "examples": ["blendMode(LIGHTEST);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);", "blendMode(MULTIPLY);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);"],
      "href": "#/p5/blendMode",
      "syntax": "blendMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "blend mode to set for canvas. either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT",
        "paramName": "mode"
      }]
    }, {
      "label": "drawingContext",
      "description": "The p5.js API provides a lot of functionality for creating graphics, but there is\nsome native HTML5 Canvas functionality that is not exposed by p5. You can still call\nit directly using the variable <code>drawingContext</code>, as in the example shown. This is\nthe equivalent of calling <code>canvas.getContext('2d');</code> or <code>canvas.getContext('webgl');</code>.\nSee this\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\nreference for the native canvas API</a> for possible drawing functions you can call.",
      "examples": ["function setup() {\n    drawingContext.shadowOffsetX = 5;\n    drawingContext.shadowOffsetY = -5;\n    drawingContext.shadowBlur = 10;\n    drawingContext.shadowColor = 'black';\n    background(200);\n    ellipse(width / 2, height / 2, 50, 50);\n}"],
      "href": "#/p5/drawingContext",
      "syntax": "drawingContext",
      "parameters": []
    }, {
      "label": "setAttributes()",
      "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting how the WebGL\nrenderer works to fine-tune the display and performance.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(255);\n    push();\n    rotateZ(frameCount * 0.02);\n    rotateX(frameCount * 0.02);\n    rotateY(frameCount * 0.02);\n    fill(0, 0, 0);\n    box(50);\n    pop();\n}", "function setup() {\n    setAttributes('antialias', true);\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(255);\n    push();\n    rotateZ(frameCount * 0.02);\n    rotateX(frameCount * 0.02);\n    rotateY(frameCount * 0.02);\n    fill(0, 0, 0);\n    box(50);\n    pop();\n}", "// press the mouse button to disable perPixelLighting \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    fill(255);\n}\n\nlet lights = [{\n        c: '#f00',\n        t: 1.12,\n        p: 1.91,\n        r: 0.2\n    },\n    {\n        c: '#0f0',\n        t: 1.21,\n        p: 1.31,\n        r: 0.2\n    },\n    {\n        c: '#00f',\n        t: 1.37,\n        p: 1.57,\n        r: 0.2\n    },\n    {\n        c: '#ff0',\n        t: 1.12,\n        p: 1.91,\n        r: 0.7\n    },\n    {\n        c: '#0ff',\n        t: 1.21,\n        p: 1.31,\n        r: 0.7\n    },\n    {\n        c: '#f0f',\n        t: 1.37,\n        p: 1.57,\n        r: 0.7\n    }\n];\n\nfunction draw() {\n    let t = millis() / 1000 + 1000;\n    background(0);\n    directionalLight(color('#222'), 1, 1, 1);\n\n    for (let i = 0; i < lights.length; i++) {\n        let light = lights[i];\n        pointLight(\n            color(light.c),\n            p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\n        );\n    }\n\n    specularMaterial(255);\n    sphere(width * 0.1);\n\n    rotateX(t * 0.77);\n    rotateY(t * 0.83);\n    rotateZ(t * 0.91);\n    torus(width * 0.3, width * 0.07, 24, 10);\n}\n\nfunction mousePressed() {\n    setAttributes('perPixelLighting', false);\n    noStroke();\n    fill(255);\n}\n\nfunction mouseReleased() {\n    setAttributes('perPixelLighting', true);\n    noStroke();\n    fill(255);\n}"],
      "href": "#/p5/setAttributes",
      "syntax": "setAttributes(key, value)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "Name of attribute",
        "paramName": "key"
      }, {
        "paramType": "Boolean",
        "paramDescription": "New value of named attribute",
        "paramName": "value"
      }, {
        "paramType": "Object",
        "paramDescription": "object with key-value pairs",
        "paramName": "obj"
      }]
    }]
  }, {
    "subgroupName": "&nbsp;",
    "tokens": [{
      "label": "p5.Framebuffer",
      "description": "An object that one can draw to and then read as a texture. While similar\nto a p5.Graphics, using a p5.Framebuffer as a texture will generally run\nmuch faster, as it lives within the same WebGL context as the canvas it\nis created on. It only works in WebGL mode.",
      "examples": [],
      "href": "#/p5.Framebuffer",
      "syntax": "new p5.Framebuffer(target, [settings])",
      "parameters": [{
        "paramType": "p5.Graphics|p5",
        "paramDescription": "A p5 global instance or p5.Graphics",
        "paramName": "target"
      }, {
        "paramType": "Object",
        "paramDescription": "A settings object",
        "paramName": "settings"
      }]
    }]
  }]
}, {
  "groupName": "Foundation",
  "subgroups": [{
    "tokens": [{
      "label": "let",
      "description": "Creates and names a new variable. A variable is a container for a value.",
      "examples": ["let x = 2;\nconsole.log(x);\n// prints 2 to the console \n\nx = 1;\nconsole.log(x);\n// prints 1 to the console "],
      "href": "#/p5/let",
      "syntax": "let",
      "parameters": []
    }, {
      "label": "const",
      "description": "Creates and names a new constant. Like a variable created with <a href=\"#/p5/let\" class=\"code\">let</a>,\na constant that is created with <a href=\"#/p5/const\" class=\"code\">const</a> is a container for a value,\nhowever constants cannot be reassigned once they are declared. Although it is\nnoteworthy that for non-primitive data types like objects &amp; arrays, their\nelements can still be changeable. So if a variable is assigned an array, you\ncan still add or remove elements from the array but cannot reassign another\narray to it. Also unlike <code>let</code>, you cannot declare variables without value\nusing const.",
      "examples": ["// define myFavNumber as a constant and give it the value 7 \n\nconst myFavNumber = 7;\nconsole.log('my favorite number is: ' + myFavNumber);", "const bigCats = ['lion', 'tiger', 'panther'];\nbigCats.push('leopard');\nconsole.log(bigCats);\n\n// bigCats = ['cat']; // throws error as re-assigning not allowed for const ", "const wordFrequency = {};\nwordFrequency['hello'] = 2;\nwordFrequency['bye'] = 1;\nconsole.log(wordFrequency);\n\n// wordFrequency = { 'a': 2, 'b': 3}; // throws error here "],
      "href": "#/p5/const",
      "syntax": "const",
      "parameters": []
    }, {
      "label": "===",
      "description": "The strict equality operator <a href=\"#/p5/===\" class=\"code\">===</a>\nchecks to see if two values are equal and of the same type.",
      "examples": ["console.log(1 === 1);\n// prints true to the console \n\nconsole.log(1 === '1');\n// prints false to the console "],
      "href": "#/p5/===",
      "syntax": "===",
      "parameters": []
    }, {
      "label": ">",
      "description": "The greater than operator <a href=\"#/p5></a>\" class=\"code\">&gt;</a>\nevaluates to true if the left value is greater than\nthe right value.",
      "examples": ["console.log(100 > 1);\n// prints true to the console \n\nconsole.log(1 > 100);\n// prints false to the console "],
      "href": "#/p5/>",
      "syntax": ">",
      "parameters": []
    }, {
      "label": ">=",
      "description": "The greater than or equal to operator <a href=\"#/p5></a>=\" class=\"code\">&gt;=</a>\nevaluates to true if the left value is greater than or equal to\nthe right value.",
      "examples": ["console.log(100 >= 100);\n// prints true to the console \n\nconsole.log(101 >= 100);\n// prints true to the console "],
      "href": "#/p5/>=",
      "syntax": ">=",
      "parameters": []
    }, {
      "label": "<",
      "description": "The less than operator <a href=\"#/p5/<\" class=\"code\">&lt;</a>\nevaluates to true if the left value is less than\nthe right value.",
      "examples": ["console.log(1 < 100);\n// prints true to the console \n\nconsole.log(100 < 99);\n// prints false to the console "],
      "href": "#/p5/<",
      "syntax": "<",
      "parameters": []
    }, {
      "label": "<=",
      "description": "The less than or equal to operator <a href=\"#/p5/<=\" class=\"code\">&lt;=</a>\nevaluates to true if the left value is less than or equal to\nthe right value.",
      "examples": ["console.log(100 <= 100);\n// prints true to the console \n\nconsole.log(99 <= 100);\n// prints true to the console "],
      "href": "#/p5/<=",
      "syntax": "<=",
      "parameters": []
    }, {
      "label": "if-else",
      "description": "The <a href=\"#/p5/if-else\" class=\"code\">if-else</a> statement helps control the flow of your code.",
      "examples": ["let a = 4;\nif (a > 0) {\n    console.log('positive');\n} else {\n    console.log('negative');\n}"],
      "href": "#/p5/if-else",
      "syntax": "if-else",
      "parameters": []
    }, {
      "label": "function",
      "description": "Creates and names a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">function</a>.\nA <a href=\"#/p5/function\" class=\"code\">function</a> is a set of statements that perform a task.",
      "examples": ["let myName = 'Hridi';\n\nfunction sayHello(name) {\n    console.log('Hello ' + name + '!');\n}\nsayHello(myName);\n// calling the function, prints \"Hello Hridi!\" to console. ", "let square = number = > number * number;\nconsole.log(square(5));"],
      "href": "#/p5/function",
      "syntax": "function",
      "parameters": []
    }, {
      "label": "return",
      "description": "Specifies the value to be returned by a function.\nFor more info checkout <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">\nthe MDN entry for return</a>.",
      "examples": ["function calculateSquare(x) {\n    return x * x;\n}\nconst result = calculateSquare(4);\n// returns 16 \n\nconsole.log(result);\n// prints '16' to the console "],
      "href": "#/p5/return",
      "syntax": "return",
      "parameters": []
    }, {
      "label": "boolean",
      "description": "A <a href=\"#/p5/boolean\" class=\"code\">boolean</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript.\nA boolean can only be <code>true</code> or <code>false</code>.",
      "examples": ["let myBoolean = false;\nconsole.log(typeof myBoolean);\n// prints 'boolean' to the console "],
      "href": "#/p5/boolean",
      "syntax": "boolean",
      "parameters": []
    }, {
      "label": "string",
      "description": "A <a href=\"#/p5/string\" class=\"code\">string</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript.\nA string is a series of text characters. In Javascript, a string value must\nbe surrounded by either single-quotation marks(') or double-quotation marks(\").",
      "examples": ["let mood = 'chill';\nconsole.log(typeof mood);\n// prints 'string' to the console "],
      "href": "#/p5/string",
      "syntax": "string",
      "parameters": []
    }, {
      "label": "number",
      "description": "A <a href=\"#/p5/number\" class=\"code\">number</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript.\nA number can be a whole number or a decimal number.",
      "examples": ["let num = 46.5;\nconsole.log(typeof num);\n// prints 'number' to the console "],
      "href": "#/p5/number",
      "syntax": "number",
      "parameters": []
    }, {
      "label": "object",
      "description": "From <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">MDN's object basics</a>:\n An <a href=\"#/p5/object\" class=\"code\">object</a> is a collection of related data and/or\n functionality (which usually consists of several variables and functions —\n which are called properties and methods when they are inside objects.)",
      "examples": ["let author = {\n    name: 'Ursula K Le Guin',\n    books: [\n        'The Left Hand of Darkness',\n        'The Dispossessed',\n        'A Wizard of Earthsea'\n    ]\n};\nconsole.log(author.name);\n// prints 'Ursula K Le Guin' to the console "],
      "href": "#/p5/object",
      "syntax": "object",
      "parameters": []
    }, {
      "label": "class",
      "description": "Creates and names a <a href=\"#/p5/class\" class=\"code\">class</a> which is a template for\nthe creation of <a href=\"#/p5/object\" class=\"code\">objects</a>.",
      "examples": ["class Rectangle {\n    constructor(name, height, width) {\n        this.name = name;\n        this.height = height;\n        this.width = width;\n    }\n}\nlet square = new Rectangle('square', 1, 1);\n// creating new instance of Polygon Class. \n\nconsole.log(square.width);\n// prints '1' to the console "],
      "href": "#/p5/class",
      "syntax": "class",
      "parameters": []
    }, {
      "label": "for",
      "description": "<a href=\"#/p5/for\" class=\"code\">for</a> creates a loop that is useful for executing one\nsection of code multiple times.",
      "examples": ["for (let i = 0; i < 9; i++) {\n    console.log(i);\n}"],
      "href": "#/p5/for",
      "syntax": "for",
      "parameters": []
    }, {
      "label": "while",
      "description": "<a href=\"#/p5/while\" class=\"code\">while</a> creates a loop that is useful for executing\none section of code multiple times.",
      "examples": ["// This example logs the lines below to the console \n\n\n// 4 \n\n\n// 3 \n\n\n// 2 \n\n\n// 1 \n\n\n// 0 \n\nlet num = 5;\nwhile (num > 0) {\n    num = num - 1;\n    console.log(num);\n}"],
      "href": "#/p5/while",
      "syntax": "while",
      "parameters": []
    }, {
      "label": "JSON",
      "description": "",
      "examples": [],
      "href": "#/JSON",
      "syntax": "",
      "parameters": []
    }, {
      "label": "console",
      "description": "",
      "examples": [],
      "href": "#/console",
      "syntax": "",
      "parameters": []
    }]
  }]
}, {
  "groupName": "Transform",
  "subgroups": [{
    "tokens": [{
      "label": "applyMatrix()",
      "description": "Multiplies the current matrix by the one specified through the parameters.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.",
      "examples": ["function setup() {\n    frameRate(10);\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    let step = frameCount % 20;\n    background(200);\n\n    // Equivalent to translate(x, y); \n\n    applyMatrix(1, 0, 0, 1, 40 + step, 50);\n    rect(0, 0, 50, 50);\n}", "function setup() {\n    frameRate(10);\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    let step = frameCount % 20;\n    background(200);\n    translate(50, 50);\n\n    // Equivalent to scale(x, y); \n\n    applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\n    rect(0, 0, 50, 50);\n}", "function setup() {\n    frameRate(10);\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    let step = frameCount % 20;\n    let angle = map(step, 0, 20, 0, TWO_PI);\n    let cos_a = cos(angle);\n    let sin_a = sin(angle);\n    background(200);\n    translate(50, 50);\n\n    // Equivalent to rotate(angle); \n\n    applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\n    rect(0, 0, 50, 50);\n}", "function setup() {\n    frameRate(10);\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    let step = frameCount % 20;\n    let angle = map(step, 0, 20, -PI / 4, PI / 4);\n    background(200);\n    translate(50, 50);\n\n    // equivalent to shearX(angle); \n\n    let shear_factor = 1 / tan(PI / 2 - angle);\n    applyMatrix(1, 0, shear_factor, 1, 0, 0);\n    rect(0, 0, 50, 50);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    noFill();\n}\n\nfunction draw() {\n    background(200);\n    rotateY(PI / 6);\n    stroke(153);\n    box(35);\n    let rad = millis() / 1000;\n\n    // Set rotation angles \n\n    let ct = cos(rad);\n    let st = sin(rad);\n\n    // Matrix for rotation around the Y axis \n\n    applyMatrix(\n        ct, 0.0, st, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        -st, 0.0, ct, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n    stroke(255);\n    box(50);\n}", "function draw() {\n    background(200);\n    let testMatrix = [1, 0, 0, 1, 0, 0];\n    applyMatrix(testMatrix);\n    rect(0, 0, 50, 50);\n}"],
      "href": "#/p5/applyMatrix",
      "syntax": "applyMatrix(arr)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "an array of numbers - should be 6 or 16 length (2×3 or 4×4 matrix values)",
        "paramName": "arr"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "b"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "c"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "d"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "e"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 2×3 or 4×4 matrix to be multiplied",
        "paramName": "f"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "g"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "h"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "i"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "j"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "k"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "l"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "m"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "n"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "o"
      }, {
        "paramType": "Number",
        "paramDescription": "numbers which define the 4×4 matrix to be multiplied",
        "paramName": "p"
      }]
    }, {
      "label": "resetMatrix()",
      "description": "Replaces the current matrix with the identity matrix.",
      "examples": ["translate(50, 50);\napplyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\nrect(0, 0, 20, 20);\n\n// Note that the translate is also reset. \n\nresetMatrix();\nrect(0, 0, 20, 20);"],
      "href": "#/p5/resetMatrix",
      "syntax": "resetMatrix()",
      "parameters": []
    }, {
      "label": "rotate()",
      "description": "Rotates a shape by the amount specified by the angle parameter. This\nfunction accounts for <a href=\"#/p5/angleMode\" class=\"code\">angleMode</a>, so angles\ncan be entered in either RADIANS or DEGREES.",
      "examples": ["translate(width / 2, height / 2);\nrotate(PI / 3.0);\nrect(-26, -26, 52, 52);"],
      "href": "#/p5/rotate",
      "syntax": "rotate(angle, [axis])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle of rotation, specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }, {
        "paramType": "p5.Vector|Number[]",
        "paramDescription": "(in 3d) the axis to rotate around",
        "paramName": "axis"
      }]
    }, {
      "label": "rotateX()",
      "description": "Rotates a shape around X axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(255);\n    rotateX(millis() / 1000);\n    box();\n}"],
      "href": "#/p5/rotateX",
      "syntax": "rotateX(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle of rotation, specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }]
    }, {
      "label": "rotateY()",
      "description": "Rotates a shape around Y axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(255);\n    rotateY(millis() / 1000);\n    box();\n}"],
      "href": "#/p5/rotateY",
      "syntax": "rotateY(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle of rotation, specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }]
    }, {
      "label": "rotateZ()",
      "description": "Rotates a shape around Z axis by the amount specified in angle parameter.\nThe angles can be entered in either RADIANS or DEGREES.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(255);\n    rotateZ(millis() / 1000);\n    box();\n}"],
      "href": "#/p5/rotateZ",
      "syntax": "rotateZ(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle of rotation, specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }]
    }, {
      "label": "scale()",
      "description": "Increases or decreases the size of a shape by expanding or contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.",
      "examples": ["rect(30, 20, 50, 50);\nscale(0.5);\nrect(30, 20, 50, 50);", "rect(30, 20, 50, 50);\nscale(0.5, 1.3);\nrect(30, 20, 50, 50);"],
      "href": "#/p5/scale",
      "syntax": "scale(s, [y], [z])",
      "parameters": [{
        "paramType": "Number|p5.Vector|Number[]",
        "paramDescription": "percent to scale the object, or percentage to scale the object in the x-axis if multiple arguments are given",
        "paramName": "s"
      }, {
        "paramType": "Number",
        "paramDescription": "percent to scale the object in the y-axis",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "percent to scale the object in the z-axis (webgl only)",
        "paramName": "z"
      }, {
        "paramType": "p5.Vector|Number[]",
        "paramDescription": "per-axis percents to scale the object",
        "paramName": "scales"
      }]
    }, {
      "label": "shearX()",
      "description": "Shears a shape around the x-axis by the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.",
      "examples": ["translate(width / 4, height / 4);\nshearX(PI / 4.0);\nrect(0, 0, 30, 30);"],
      "href": "#/p5/shearX",
      "syntax": "shearX(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "angle of shear specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }]
    }, {
      "label": "shearY()",
      "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.",
      "examples": ["translate(width / 4, height / 4);\nshearY(PI / 4.0);\nrect(0, 0, 30, 30);"],
      "href": "#/p5/shearY",
      "syntax": "shearY(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "angle of shear specified in radians or degrees, depending on current angleMode",
        "paramName": "angle"
      }]
    }, {
      "label": "translate()",
      "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.",
      "examples": ["translate(30, 20);\nrect(0, 0, 55, 55);", "rect(0, 0, 55, 55);\n// Draw rect at original 0,0 \n\ntranslate(30, 20);\nrect(0, 0, 55, 55);\n// Draw rect at new 0,0 \n\ntranslate(14, 14);\nrect(0, 0, 55, 55);\n// Draw rect at new 0,0 ", "function draw() {\n    background(200);\n    rectMode(CENTER);\n    translate(width / 2, height / 2);\n    translate(p5.Vector.fromAngle(millis() / 1000, 40));\n    rect(0, 0, 20, 20);\n}"],
      "href": "#/p5/translate",
      "syntax": "translate(x, y, [z])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "left/right translation",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "up/down translation",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "forward/backward translation (WEBGL only)",
        "paramName": "z"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "the vector to translate by",
        "paramName": "vector"
      }]
    }]
  }]
}, {
  "groupName": "Data",
  "subgroups": [{
    "subgroupName": "LocalStorage",
    "tokens": [{
      "label": "storeItem()",
      "description": "Stores a value in local storage under the key name.\n Local storage is saved in the browser and persists\n between browsing sessions and page reloads.\n The key can be the name of the variable but doesn't\n have to be. To retrieve stored items\n see <a href=\"#/p5/getItem\" class=\"code\">getItem</a>.\nSensitive data such as passwords or personal information\n should not be stored in local storage.",
      "examples": ["// Type to change the letter in the \n\n\n// center of the canvas. \n\n\n// If you reload the page, it will \n\n\n// still display the last key you entered \n\nlet myText;\n\nfunction setup() {\n    createCanvas(100, 100);\n    myText = getItem('myText');\n    if (myText === null) {\n        myText = '';\n    }\n    describe(`When you type the key name is displayed as black text on white background.\n   If you reload the page, the last letter typed is still displaying.`);\n}\n\nfunction draw() {\n    textSize(40);\n    background(255);\n    text(myText, width / 2, height / 2);\n}\n\nfunction keyPressed() {\n    myText = key;\n    storeItem('myText', myText);\n}"],
      "href": "#/p5/storeItem",
      "syntax": "storeItem(key, value)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "",
        "paramName": "key"
      }, {
        "paramType": "String|Number|Object|Boolean|p5.Color|p5.Vector",
        "paramDescription": "",
        "paramName": "value"
      }]
    }, {
      "label": "getItem()",
      "description": "Returns the value of an item that was stored in local storage\n using storeItem()",
      "examples": ["// Click the mouse to change \n\n\n// the color of the background \n\n\n// Once you have changed the color \n\n\n// it will stay changed even when you \n\n\n// reload the page. \n\nlet myColor;\n\nfunction setup() {\n    createCanvas(100, 100);\n    myColor = getItem('myColor');\n}\n\nfunction draw() {\n    if (myColor !== null) {\n        background(myColor);\n    }\n    describe(`If you click, the canvas changes to a random color.·\n     If you reload the page, the canvas is still the color it was when the\n     page was previously loaded.`);\n}\n\nfunction mousePressed() {\n    myColor = color(random(255), random(255), random(255));\n    storeItem('myColor', myColor);\n}"],
      "href": "#/p5/getItem",
      "syntax": "getItem(key)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name that you wish to use to store in local storage",
        "paramName": "key"
      }]
    }, {
      "label": "clearStorage()",
      "description": "Clears all local storage items set with storeItem()\n for the current domain.",
      "examples": ["function setup() {\n    let myNum = 10;\n    let myBool = false;\n    storeItem('myNum', myNum);\n    storeItem('myBool', myBool);\n    print(getItem('myNum'));\n    // logs 10 to the console \n\n    print(getItem('myBool'));\n    // logs false to the console \n\n    clearStorage();\n    print(getItem('myNum'));\n    // logs null to the console \n\n    print(getItem('myBool'));\n    // logs null to the console \n\n}"],
      "href": "#/p5/clearStorage",
      "syntax": "clearStorage()",
      "parameters": []
    }, {
      "label": "removeItem()",
      "description": "Removes an item that was stored with storeItem()",
      "examples": ["function setup() {\n    let myVar = 10;\n    storeItem('myVar', myVar);\n    print(getItem('myVar'));\n    // logs 10 to the console \n\n    removeItem('myVar');\n    print(getItem('myVar'));\n    // logs null to the console \n\n}"],
      "href": "#/p5/removeItem",
      "syntax": "removeItem(key)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "",
        "paramName": "key"
      }]
    }]
  }, {
    "subgroupName": "Dictionary",
    "tokens": [{
      "label": "createStringDict()",
      "description": "Creates a new instance of p5.StringDict using the key-value pair\n or the object you provide.",
      "examples": ["function setup() {\n    let myDictionary = createStringDict('p5', 'js');\n    print(myDictionary.hasKey('p5'));\n    // logs true to console \n\n    let anotherDictionary = createStringDict({\n        happy: 'coding'\n    });\n    print(anotherDictionary.hasKey('happy'));\n    // logs true to console \n\n}"],
      "href": "#/p5/createStringDict",
      "syntax": "createStringDict(key, value)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "",
        "paramName": "key"
      }, {
        "paramType": "String",
        "paramDescription": "",
        "paramName": "value"
      }, {
        "paramType": "Object",
        "paramDescription": "object",
        "paramName": "object"
      }]
    }, {
      "label": "createNumberDict()",
      "description": "Creates a new instance of <a href=\"#/p5.NumberDict\" class=\"code\">p5.NumberDict</a> using the key-value pair\n or object you provide.",
      "examples": ["function setup() {\n    let myDictionary = createNumberDict(100, 42);\n    print(myDictionary.hasKey(100));\n    // logs true to console \n\n    let anotherDictionary = createNumberDict({\n        200: 84\n    });\n    print(anotherDictionary.hasKey(200));\n    // logs true to console \n\n}"],
      "href": "#/p5/createNumberDict",
      "syntax": "createNumberDict(key, value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "key"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "value"
      }, {
        "paramType": "Object",
        "paramDescription": "object",
        "paramName": "object"
      }]
    }, {
      "label": "p5.TypedDict",
      "description": "Base class for all p5.Dictionary types. Specifically\n typed Dictionary classes inherit from this class.",
      "examples": [],
      "href": "#/p5.TypedDict",
      "syntax": "new p5.TypedDict()",
      "parameters": []
    }, {
      "label": "p5.NumberDict",
      "description": "A simple Dictionary class for Numbers.",
      "examples": [],
      "href": "#/p5.NumberDict",
      "syntax": "new p5.NumberDict()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Array Functions",
    "tokens": [{
      "label": "append()",
      "description": "Adds a value to the end of an array. Extends the length of\nthe array by one. Maps to Array.push().",
      "examples": ["function setup() {\n    let myArray = ['Mango', 'Apple', 'Papaya'];\n    print(myArray);\n    // ['Mango', 'Apple', 'Papaya'] \n\n\n    append(myArray, 'Peach');\n    print(myArray);\n    // ['Mango', 'Apple', 'Papaya', 'Peach'] \n\n}"],
      "href": "#/p5/append",
      "syntax": "append(array, value)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to append",
        "paramName": "array"
      }, {
        "paramType": "Any",
        "paramDescription": "to be added to the Array",
        "paramName": "value"
      }]
    }, {
      "label": "arrayCopy()",
      "description": "Copies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use <a href=\"#/p5/concat\" class=\"code\">concat()</a>.",
      "examples": ["let src = ['A', 'B', 'C'];\nlet dst = [1, 2, 3];\nlet srcPosition = 1;\nlet dstPosition = 0;\nlet length = 2;\n\nprint(src);\n// ['A', 'B', 'C'] \n\nprint(dst);\n// [ 1 ,  2 ,  3 ] \n\n\narrayCopy(src, srcPosition, dst, dstPosition, length);\nprint(dst);\n// ['B', 'C', 3] "],
      "href": "#/p5/arrayCopy",
      "syntax": "arrayCopy(src, srcPosition, dst, dstPosition, length)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "the source Array",
        "paramName": "src"
      }, {
        "paramType": "Integer",
        "paramDescription": "starting position in the source Array",
        "paramName": "srcPosition"
      }, {
        "paramType": "Array",
        "paramDescription": "the destination Array",
        "paramName": "dst"
      }, {
        "paramType": "Integer",
        "paramDescription": "starting position in the destination Array",
        "paramName": "dstPosition"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of Array elements to be copied",
        "paramName": "length"
      }]
    }, {
      "label": "concat()",
      "description": "Concatenates two arrays, maps to Array.concat(). Does not modify the\ninput arrays.",
      "examples": ["function setup() {\n    let arr1 = ['A', 'B', 'C'];\n    let arr2 = [1, 2, 3];\n\n    print(arr1);\n    // ['A','B','C'] \n\n    print(arr2);\n    // [1,2,3] \n\n\n    let arr3 = concat(arr1, arr2);\n\n    print(arr1);\n    // ['A','B','C'] \n\n    print(arr2);\n    // [1, 2, 3] \n\n    print(arr3);\n    // ['A','B','C', 1, 2, 3] \n\n}"],
      "href": "#/p5/concat",
      "syntax": "concat(a, b)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "first Array to concatenate",
        "paramName": "a"
      }, {
        "paramType": "Array",
        "paramDescription": "second Array to concatenate",
        "paramName": "b"
      }]
    }, {
      "label": "reverse()",
      "description": "Reverses the order of an array, maps to Array.reverse()",
      "examples": ["function setup() {\n    let myArray = ['A', 'B', 'C'];\n    print(myArray);\n    // ['A','B','C'] \n\n\n    reverse(myArray);\n    print(myArray);\n    // ['C','B','A'] \n\n}"],
      "href": "#/p5/reverse",
      "syntax": "reverse(list)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to reverse",
        "paramName": "list"
      }]
    }, {
      "label": "shorten()",
      "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
      "examples": ["function setup() {\n    let myArray = ['A', 'B', 'C'];\n    print(myArray);\n    // ['A', 'B', 'C'] \n\n    let newArray = shorten(myArray);\n    print(myArray);\n    // ['A','B','C'] \n\n    print(newArray);\n    // ['A','B'] \n\n}"],
      "href": "#/p5/shorten",
      "syntax": "shorten(list)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to shorten",
        "paramName": "list"
      }]
    }, {
      "label": "shuffle()",
      "description": "Randomizes the order of the elements of an array. Implements\n<a href=\"http://Bost.Ocks.org/mike/shuffle/\" target=\"_blank\">\nFisher-Yates Shuffle Algorithm</a>.",
      "examples": ["function setup() {\n    let regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n    print(regularArr);\n    shuffle(regularArr, true);\n    // force modifications to passed array \n\n    print(regularArr);\n\n\n    // By default shuffle() returns a shuffled cloned array: \n\n    let newArr = shuffle(regularArr);\n    print(regularArr);\n    print(newArr);\n}"],
      "href": "#/p5/shuffle",
      "syntax": "shuffle(array, [bool])",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to shuffle",
        "paramName": "array"
      }, {
        "paramType": "Boolean",
        "paramDescription": "modify passed array",
        "paramName": "bool"
      }]
    }, {
      "label": "sort()",
      "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
      "examples": ["function setup() {\n    let words = ['banana', 'apple', 'pear', 'lime'];\n    print(words);\n    // ['banana', 'apple', 'pear', 'lime'] \n\n    let count = 4;\n    // length of array \n\n\n    words = sort(words, count);\n    print(words);\n    // ['apple', 'banana', 'lime', 'pear'] \n\n}", "function setup() {\n    let numbers = [2, 6, 1, 5, 14, 9, 8, 12];\n    print(numbers);\n    // [2, 6, 1, 5, 14, 9, 8, 12] \n\n    let count = 5;\n    // Less than the length of the array \n\n\n    numbers = sort(numbers, count);\n    print(numbers);\n    // [1,2,5,6,14,9,8,12] \n\n}"],
      "href": "#/p5/sort",
      "syntax": "sort(list, [count])",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to sort",
        "paramName": "list"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of elements to sort, starting from 0",
        "paramName": "count"
      }]
    }, {
      "label": "splice()",
      "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
      "examples": ["function setup() {\n    let myArray = [0, 1, 2, 3, 4];\n    let insArray = ['A', 'B', 'C'];\n    print(myArray);\n    // [0, 1, 2, 3, 4] \n\n    print(insArray);\n    // ['A','B','C'] \n\n\n    splice(myArray, insArray, 3);\n    print(myArray);\n    // [0,1,2,'A','B','C',3,4] \n\n}"],
      "href": "#/p5/splice",
      "syntax": "splice(list, value, position)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to splice into",
        "paramName": "list"
      }, {
        "paramType": "Any",
        "paramDescription": "value to be spliced in",
        "paramName": "value"
      }, {
        "paramType": "Integer",
        "paramDescription": "in the array from which to insert data",
        "paramName": "position"
      }]
    }, {
      "label": "subset()",
      "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
      "examples": ["function setup() {\n    let myArray = [1, 2, 3, 4, 5];\n    print(myArray);\n    // [1, 2, 3, 4, 5] \n\n\n    let sub1 = subset(myArray, 0, 3);\n    let sub2 = subset(myArray, 2, 2);\n    print(sub1);\n    // [1,2,3] \n\n    print(sub2);\n    // [3,4] \n\n}"],
      "href": "#/p5/subset",
      "syntax": "subset(list, start, [count])",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "Array to extract from",
        "paramName": "list"
      }, {
        "paramType": "Integer",
        "paramDescription": "position to begin",
        "paramName": "start"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of values to extract",
        "paramName": "count"
      }]
    }]
  }, {
    "subgroupName": "Conversion",
    "tokens": [{
      "label": "float()",
      "description": "Converts a string to its floating point representation. The contents of a\nstring must resemble a number, or NaN (not a number) will be returned.\nFor example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\")\nwill return NaN.",
      "examples": ["let str = '20';\nlet diameter = float(str);\nellipse(width / 2, height / 2, diameter, diameter);", "print(float('10.31'));\n// 10.31 \n\nprint(float('Infinity'));\n// Infinity \n\nprint(float('-Infinity'));\n// -Infinity "],
      "href": "#/p5/float",
      "syntax": "float(str)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "float string to parse",
        "paramName": "str"
      }]
    }, {
      "label": "int()",
      "description": "Converts a boolean, string, or float to its integer representation.\nWhen an array of values is passed in, then an int array of the same length\nis returned.",
      "examples": ["print(int('10'));\n// 10 \n\nprint(int(10.31));\n// 10 \n\nprint(int(-10));\n// -10 \n\nprint(int(true));\n// 1 \n\nprint(int(false));\n// 0 \n\nprint(int([false, true, '10.3', 9.8]));\n// [0, 1, 10, 9] \n\nprint(int(Infinity));\n// Infinity \n\nprint(int('-Infinity'));\n// -Infinity "],
      "href": "#/p5/int",
      "syntax": "int(n, [radix])",
      "parameters": [{
        "paramType": "String|Boolean|Number",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Integer",
        "paramDescription": "the radix to convert to (default: 10)",
        "paramName": "radix"
      }, {
        "paramType": "Array",
        "paramDescription": "values to parse",
        "paramName": "ns"
      }]
    }, {
      "label": "str()",
      "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned.",
      "examples": ["print(str('10'));\n// \"10\" \n\nprint(str(10.31));\n// \"10.31\" \n\nprint(str(-10));\n// \"-10\" \n\nprint(str(true));\n// \"true\" \n\nprint(str(false));\n// \"false\" \n\nprint(str([true, '10.3', 9.8]));\n// [ \"true\", \"10.3\", \"9.8\" ] "],
      "href": "#/p5/str",
      "syntax": "str(n)",
      "parameters": [{
        "paramType": "String|Boolean|Number|Array",
        "paramDescription": "value to parse",
        "paramName": "n"
      }]
    }, {
      "label": "boolean()",
      "description": "A <a href=\"#/p5/boolean\" class=\"code\">boolean</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript.\nA boolean can only be <code>true</code> or <code>false</code>.",
      "examples": ["let myBoolean = false;\nconsole.log(typeof myBoolean);\n// prints 'boolean' to the console "],
      "href": "#/p5/boolean",
      "syntax": "boolean",
      "parameters": []
    }, {
      "label": "byte()",
      "description": "Converts a number, string representation of a number, or boolean to its byte\nrepresentation. A byte can be only a whole number between -128 and 127, so\nwhen a value outside of this range is converted, it wraps around to the\ncorresponding byte representation. When an array of number, string or boolean\nvalues is passed in, then an array of bytes the same length is returned.",
      "examples": ["print(byte(127));\n// 127 \n\nprint(byte(128));\n// -128 \n\nprint(byte(23.4));\n// 23 \n\nprint(byte('23.4'));\n// 23 \n\nprint(byte('hello'));\n// NaN \n\nprint(byte(true));\n// 1 \n\nprint(byte([0, 255, '100']));\n// [0, -1, 100] "],
      "href": "#/p5/byte",
      "syntax": "byte(n)",
      "parameters": [{
        "paramType": "String|Boolean|Number",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Array",
        "paramDescription": "values to parse",
        "paramName": "ns"
      }]
    }, {
      "label": "char()",
      "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned.",
      "examples": ["print(char(65));\n// \"A\" \n\nprint(char('65'));\n// \"A\" \n\nprint(char([65, 66, 67]));\n// [ \"A\", \"B\", \"C\" ] \n\nprint(join(char([65, 66, 67]), ''));\n// \"ABC\" "],
      "href": "#/p5/char",
      "syntax": "char(n)",
      "parameters": [{
        "paramType": "String|Number",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Array",
        "paramDescription": "values to parse",
        "paramName": "ns"
      }]
    }, {
      "label": "unchar()",
      "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned.",
      "examples": ["print(unchar('A'));\n// 65 \n\nprint(unchar(['A', 'B', 'C']));\n// [ 65, 66, 67 ] \n\nprint(unchar(split('ABC', '')));\n// [ 65, 66, 67 ] "],
      "href": "#/p5/unchar",
      "syntax": "unchar(n)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Array",
        "paramDescription": "values to parse",
        "paramName": "ns"
      }]
    }, {
      "label": "hex()",
      "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned.",
      "examples": ["print(hex(255));\n// \"000000FF\" \n\nprint(hex(255, 6));\n// \"0000FF\" \n\nprint(hex([0, 127, 255], 6));\n// [ \"000000\", \"00007F\", \"0000FF\" ] \n\nprint(Infinity);\n// \"FFFFFFFF\" \n\nprint(-Infinity);\n// \"00000000\" "],
      "href": "#/p5/hex",
      "syntax": "hex(n, [digits])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "digits"
      }, {
        "paramType": "Number[]",
        "paramDescription": "array of values to parse",
        "paramName": "ns"
      }]
    }, {
      "label": "unhex()",
      "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned.",
      "examples": ["print(unhex('A'));\n// 10 \n\nprint(unhex('FF'));\n// 255 \n\nprint(unhex(['FF', 'AA', '00']));\n// [ 255, 170, 0 ] "],
      "href": "#/p5/unhex",
      "syntax": "unhex(n)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "value to parse",
        "paramName": "n"
      }, {
        "paramType": "Array",
        "paramDescription": "values to parse",
        "paramName": "ns"
      }]
    }]
  }, {
    "subgroupName": "String Functions",
    "tokens": [{
      "label": "join()",
      "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\" class=\"code\">nf()</a> or\nnfs().",
      "examples": ["let array = ['Hello', 'world!'];\nlet separator = ' ';\nlet message = join(array, separator);\ntext(message, 5, 50);"],
      "href": "#/p5/join",
      "syntax": "join(list, separator)",
      "parameters": [{
        "paramType": "Array",
        "paramDescription": "array of Strings to be joined",
        "paramName": "list"
      }, {
        "paramType": "String",
        "paramDescription": "String to be placed between each item",
        "paramName": "separator"
      }]
    }, {
      "label": "match()",
      "description": "This function is used to apply a regular expression to a piece of text,\nand return matching groups (elements found inside parentheses) as a\nString array. If there are no matches, a null value will be returned.\nIf no groups are specified in the regular expression, but the sequence\nmatches, an array of length 1 (with the matched text as the first element\nof the array) will be returned.",
      "examples": ["let string = 'Hello p5js*!';\nlet regexp = 'p5js\\\\*';\nlet m = match(string, regexp);\ntext(m, 5, 50);"],
      "href": "#/p5/match",
      "syntax": "match(str, regexp)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "the String to be searched",
        "paramName": "str"
      }, {
        "paramType": "String",
        "paramDescription": "the regexp to be used for matching",
        "paramName": "regexp"
      }]
    }, {
      "label": "matchAll()",
      "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.",
      "examples": ["let string = 'Hello p5js*! Hello world!';\nlet regexp = 'Hello';\nmatchAll(string, regexp);"],
      "href": "#/p5/matchAll",
      "syntax": "matchAll(str, regexp)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "the String to be searched",
        "paramName": "str"
      }, {
        "paramType": "String",
        "paramDescription": "the regexp to be used for matching",
        "paramName": "regexp"
      }]
    }, {
      "label": "nf()",
      "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.",
      "examples": ["function setup() {\n    background(200);\n    let num1 = 321;\n    let num2 = -1321;\n\n    noStroke();\n    fill(0);\n    textSize(16);\n\n    text(nf(num1, 4, 2), 10, 30);\n    text(nf(num2, 4, 2), 10, 80);\n\n    // Draw dividing line \n\n    stroke(120);\n    line(0, 50, width, 50);\n}"],
      "href": "#/p5/nf",
      "syntax": "nf(num, [left], [right])",
      "parameters": [{
        "paramType": "Number|String",
        "paramDescription": "the Number to format",
        "paramName": "num"
      }, {
        "paramType": "Integer|String",
        "paramDescription": "number of digits to the left of the decimal point",
        "paramName": "left"
      }, {
        "paramType": "Integer|String",
        "paramDescription": "number of digits to the right of the decimal point",
        "paramName": "right"
      }, {
        "paramType": "Array",
        "paramDescription": "the Numbers to format",
        "paramName": "nums"
      }]
    }, {
      "label": "nfc()",
      "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
      "examples": ["function setup() {\n    background(200);\n    let num = 11253106.115;\n    let numArr = [1, 1, 2];\n\n    noStroke();\n    fill(0);\n    textSize(12);\n\n\n    // Draw formatted numbers \n\n    text(nfc(num, 4), 10, 30);\n    text(nfc(numArr, 2), 10, 80);\n\n\n    // Draw dividing line \n\n    stroke(120);\n    line(0, 50, width, 50);\n}"],
      "href": "#/p5/nfc",
      "syntax": "nfc(num, [right])",
      "parameters": [{
        "paramType": "Number|String",
        "paramDescription": "the Number to format",
        "paramName": "num"
      }, {
        "paramType": "Integer|String",
        "paramDescription": "number of digits to the right of the decimal point",
        "paramName": "right"
      }, {
        "paramType": "Array",
        "paramDescription": "the Numbers to format",
        "paramName": "nums"
      }]
    }, {
      "label": "nfp()",
      "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\" class=\"code\">nf()</a> but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for left, and right parameters\nshould always be positive integers.",
      "examples": ["function setup() {\n    background(200);\n    let num1 = 11253106.115;\n    let num2 = -11253106.115;\n\n    noStroke();\n    fill(0);\n    textSize(12);\n\n\n    // Draw formatted numbers \n\n    text(nfp(num1, 4, 2), 10, 30);\n    text(nfp(num2, 4, 2), 10, 80);\n\n\n    // Draw dividing line \n\n    stroke(120);\n    line(0, 50, width, 50);\n}"],
      "href": "#/p5/nfp",
      "syntax": "nfp(num, [left], [right])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the Number to format",
        "paramName": "num"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of digits to the left of the decimal point",
        "paramName": "left"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of digits to the right of the decimal point",
        "paramName": "right"
      }, {
        "paramType": "Number[]",
        "paramDescription": "the Numbers to format",
        "paramName": "nums"
      }]
    }, {
      "label": "nfs()",
      "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\" class=\"code\">nf()</a> but\nputs an additional \"_\" (space) in front of positive numbers just in case to align it with negative\nnumbers which includes \"-\" (minus) sign.",
      "examples": ["function setup() {\n    background(200);\n    let num1 = 321;\n    let num2 = -1321;\n\n    noStroke();\n    fill(0);\n    textSize(16);\n\n\n    // nfs() aligns num1 (positive number) with num2 (negative number) by \n\n\n    // adding a blank space in front of the num1 (positive number) \n\n\n    // [left = 4] in num1 add one 0 in front, to align the digits with num2 \n\n\n    // [right = 2] in num1 and num2 adds two 0's after both numbers \n\n\n    // To see the differences check the example of nf() too. \n\n    text(nfs(num1, 4, 2), 10, 30);\n    text(nfs(num2, 4, 2), 10, 80);\n\n    // Draw dividing line \n\n    stroke(120);\n    line(0, 50, width, 50);\n}"],
      "href": "#/p5/nfs",
      "syntax": "nfs(num, [left], [right])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the Number to format",
        "paramName": "num"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of digits to the left of the decimal point",
        "paramName": "left"
      }, {
        "paramType": "Integer",
        "paramDescription": "number of digits to the right of the decimal point",
        "paramName": "right"
      }, {
        "paramType": "Array",
        "paramDescription": "the Numbers to format",
        "paramName": "nums"
      }]
    }, {
      "label": "split()",
      "description": "The <a href=\"#/p5/split\" class=\"code\">split()</a> function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.",
      "examples": ["let names = 'Pat,Xio,Alex';\nlet splitString = split(names, ',');\ntext(splitString[0], 5, 30);\ntext(splitString[1], 5, 50);\ntext(splitString[2], 5, 70);"],
      "href": "#/p5/split",
      "syntax": "split(value, delim)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "the String to be split",
        "paramName": "value"
      }, {
        "paramType": "String",
        "paramDescription": "the String used to separate the data",
        "paramName": "delim"
      }]
    }, {
      "label": "splitTokens()",
      "description": "The <a href=\"#/p5/splitTokens\" class=\"code\">splitTokens()</a> function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.",
      "examples": ["function setup() {\n    let myStr = 'Mango, Banana, Lime';\n    let myStrArr = splitTokens(myStr, ',');\n\n    print(myStrArr);\n    // prints : [\"Mango\",\" Banana\",\" Lime\"] \n\n}"],
      "href": "#/p5/splitTokens",
      "syntax": "splitTokens(value, [delim])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "the String to be split",
        "paramName": "value"
      }, {
        "paramType": "String",
        "paramDescription": "list of individual Strings that will be used as separators",
        "paramName": "delim"
      }]
    }, {
      "label": "trim()",
      "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
      "examples": ["let string = trim('  No new lines\\n   ');\ntext(string + ' here', 2, 50);"],
      "href": "#/p5/trim",
      "syntax": "trim(str)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "a String to be trimmed",
        "paramName": "str"
      }, {
        "paramType": "Array",
        "paramDescription": "an Array of Strings to be trimmed",
        "paramName": "strs"
      }]
    }]
  }]
}, {
  "groupName": "Events",
  "subgroups": [{
    "subgroupName": "Acceleration",
    "tokens": [{
      "label": "deviceOrientation",
      "description": "The system variable deviceOrientation always contains the orientation of\nthe device. The value of this variable will either be set 'landscape'\nor 'portrait'. If no data is available it will be set to 'undefined'.\neither LANDSCAPE or PORTRAIT.",
      "examples": [],
      "href": "#/p5/deviceOrientation",
      "syntax": "deviceOrientation",
      "parameters": []
    }, {
      "label": "accelerationX",
      "description": "The system variable accelerationX always contains the acceleration of the\ndevice along the x axis. Value is represented as meters per second squared.",
      "examples": ["// Move a touchscreen device to register \n\n\n// acceleration changes. \n\nfunction draw() {\n    background(220, 50);\n    fill('magenta');\n    ellipse(width / 2, height / 2, accelerationX);\n    describe('Magnitude of device acceleration is displayed as ellipse size.');\n}"],
      "href": "#/p5/accelerationX",
      "syntax": "accelerationX",
      "parameters": []
    }, {
      "label": "accelerationY",
      "description": "The system variable accelerationY always contains the acceleration of the\ndevice along the y axis. Value is represented as meters per second squared.",
      "examples": ["// Move a touchscreen device to register \n\n\n// acceleration changes. \n\nfunction draw() {\n    background(220, 50);\n    fill('magenta');\n    ellipse(width / 2, height / 2, accelerationY);\n    describe('Magnitude of device acceleration is displayed as ellipse size');\n}"],
      "href": "#/p5/accelerationY",
      "syntax": "accelerationY",
      "parameters": []
    }, {
      "label": "accelerationZ",
      "description": "The system variable accelerationZ always contains the acceleration of the\ndevice along the z axis. Value is represented as meters per second squared.",
      "examples": ["// Move a touchscreen device to register \n\n\n// acceleration changes. \n\nfunction draw() {\n    background(220, 50);\n    fill('magenta');\n    ellipse(width / 2, height / 2, accelerationZ);\n    describe('Magnitude of device acceleration is displayed as ellipse size');\n}"],
      "href": "#/p5/accelerationZ",
      "syntax": "accelerationZ",
      "parameters": []
    }, {
      "label": "pAccelerationX",
      "description": "The system variable pAccelerationX always contains the acceleration of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
      "examples": [],
      "href": "#/p5/pAccelerationX",
      "syntax": "pAccelerationX",
      "parameters": []
    }, {
      "label": "pAccelerationY",
      "description": "The system variable pAccelerationY always contains the acceleration of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
      "examples": [],
      "href": "#/p5/pAccelerationY",
      "syntax": "pAccelerationY",
      "parameters": []
    }, {
      "label": "pAccelerationZ",
      "description": "The system variable pAccelerationZ always contains the acceleration of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
      "examples": [],
      "href": "#/p5/pAccelerationZ",
      "syntax": "pAccelerationZ",
      "parameters": []
    }, {
      "label": "rotationX",
      "description": "The system variable rotationX always contains the rotation of the\ndevice along the x axis. If the sketch <a href=\"#/p5/angleMode\" class=\"code\">\nangleMode()</a> is set to DEGREES, the value will be -180 to 180. If\nit is set to RADIANS, the value will be -PI to PI.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(200);\n\n    //rotateZ(radians(rotationZ)); \n\n    rotateX(radians(rotationX));\n\n    //rotateY(radians(rotationY)); \n\n    box(200, 200, 200);\n    describe(`red horizontal line right, green vertical line bottom.\n    black background.`);\n}"],
      "href": "#/p5/rotationX",
      "syntax": "rotationX",
      "parameters": []
    }, {
      "label": "rotationY",
      "description": "The system variable rotationY always contains the rotation of the\ndevice along the y axis. If the sketch <a href=\"#/p5/angleMode\" class=\"code\">\nangleMode()</a> is set to DEGREES, the value will be -90 to 90. If\nit is set to RADIANS, the value will be -PI/2 to PI/2.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(200);\n\n    //rotateZ(radians(rotationZ)); \n\n\n    //rotateX(radians(rotationX)); \n\n    rotateY(radians(rotationY));\n    box(200, 200, 200);\n    describe(`red horizontal line right, green vertical line bottom.\n    black background.`);\n}"],
      "href": "#/p5/rotationY",
      "syntax": "rotationY",
      "parameters": []
    }, {
      "label": "rotationZ",
      "description": "The system variable rotationZ always contains the rotation of the\ndevice along the z axis. If the sketch <a href=\"#/p5/angleMode\" class=\"code\">\nangleMode()</a> is set to DEGREES, the value will be 0 to 360. If\nit is set to RADIANS, the value will be 0 to 2*PI.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n    background(200);\n    rotateZ(radians(rotationZ));\n\n    //rotateX(radians(rotationX)); \n\n\n    //rotateY(radians(rotationY)); \n\n    box(200, 200, 200);\n    describe(`red horizontal line right, green vertical line bottom.\n    black background.`);\n}"],
      "href": "#/p5/rotationZ",
      "syntax": "rotationZ",
      "parameters": []
    }, {
      "label": "pRotationX",
      "description": "The system variable pRotationX always contains the rotation of the\ndevice along the x axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\" class=\"code\"> angleMode()</a> is set to DEGREES,\nthe value will be -180 to 180. If it is set to RADIANS, the value will\nbe -PI to PI.",
      "examples": ["// A simple if statement looking at whether \n\n\n// rotationX - pRotationX < 0 is true or not will be \n\n\n// sufficient for determining the rotate direction \n\n\n// in most cases. \n\n\n\n// Some extra logic is needed to account for cases where \n\n\n// the angles wrap around. \n\nlet rotateDirection = 'clockwise';\n\n\n// Simple range conversion to make things simpler. \n\n\n// This is not absolutely necessary but the logic \n\n\n// will be different in that case. \n\n\nlet rX = rotationX + 180;\nlet pRX = pRotationX + 180;\n\nif ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\n    rotateDirection = 'clockwise';\n} else if (rX - pRX < 0 || rX - pRX > 270) {\n    rotateDirection = 'counter-clockwise';\n}\n\nprint(rotateDirection);\ndescribe('no image to display.');"],
      "href": "#/p5/pRotationX",
      "syntax": "pRotationX",
      "parameters": []
    }, {
      "label": "pRotationY",
      "description": "The system variable pRotationY always contains the rotation of the\ndevice along the y axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\" class=\"code\"> angleMode()</a> is set to DEGREES,\nthe value will be -90 to 90. If it is set to RADIANS, the value will\nbe -PI/2 to PI/2.",
      "examples": ["// A simple if statement looking at whether \n\n\n// rotationY - pRotationY < 0 is true or not will be \n\n\n// sufficient for determining the rotate direction \n\n\n// in most cases. \n\n\n\n// Some extra logic is needed to account for cases where \n\n\n// the angles wrap around. \n\nlet rotateDirection = 'clockwise';\n\n\n// Simple range conversion to make things simpler. \n\n\n// This is not absolutely necessary but the logic \n\n\n// will be different in that case. \n\n\nlet rY = rotationY + 180;\nlet pRY = pRotationY + 180;\n\nif ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\n    rotateDirection = 'clockwise';\n} else if (rY - pRY < 0 || rY - pRY > 270) {\n    rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\ndescribe('no image to display.');"],
      "href": "#/p5/pRotationY",
      "syntax": "pRotationY",
      "parameters": []
    }, {
      "label": "pRotationZ",
      "description": "The system variable pRotationZ always contains the rotation of the\ndevice along the z axis in the frame previous to the current frame.\nIf the sketch <a href=\"#/p5/angleMode\" class=\"code\"> angleMode()</a> is set to DEGREES,\nthe value will be 0 to 360. If it is set to RADIANS, the value will\nbe 0 to 2*PI.",
      "examples": ["// A simple if statement looking at whether \n\n\n// rotationZ - pRotationZ < 0 is true or not will be \n\n\n// sufficient for determining the rotate direction \n\n\n// in most cases. \n\n\n\n// Some extra logic is needed to account for cases where \n\n\n// the angles wrap around. \n\nlet rotateDirection = 'clockwise';\n\nif (\n    (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\n    rotationZ - pRotationZ < -270\n) {\n    rotateDirection = 'clockwise';\n} else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\n    rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\ndescribe('no image to display.');"],
      "href": "#/p5/pRotationZ",
      "syntax": "pRotationZ",
      "parameters": []
    }, {
      "label": "turnAxis",
      "description": "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\" class=\"code\">deviceTurned()</a>\nmethod is stored in the turnAxis variable. The turnAxis variable is only defined within\nthe scope of deviceTurned().",
      "examples": ["// Run this example on a mobile device \n\n\n// Rotate the device by 90 degrees in the \n\n\n// X-axis to change the value. \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device turns`);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when x-axis turns`);\n}\n\nfunction deviceTurned() {\n    if (turnAxis === 'X') {\n        if (value === 0) {\n            value = 255;\n        } else if (value === 255) {\n            value = 0;\n        }\n    }\n}"],
      "href": "#/p5/turnAxis",
      "syntax": "turnAxis",
      "parameters": []
    }, {
      "label": "setMoveThreshold()",
      "description": "The <a href=\"#/p5/setMoveThreshold\" class=\"code\">setMoveThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceMoved\" class=\"code\">deviceMoved()</a> function. The default threshold is set to 0.5.",
      "examples": ["// Run this example on a mobile device \n\n\n// You will need to move the device incrementally further \n\n\n// the closer the square's color gets to white in order to change the value. \n\n\nlet value = 0;\nlet threshold = 0.5;\n\nfunction setup() {\n    setMoveThreshold(threshold);\n}\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device moves`);\n}\n\nfunction deviceMoved() {\n    value = value + 5;\n    threshold = threshold + 0.1;\n    if (value > 255) {\n        value = 0;\n        threshold = 30;\n    }\n    setMoveThreshold(threshold);\n}"],
      "href": "#/p5/setMoveThreshold",
      "syntax": "setMoveThreshold(value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "The threshold value",
        "paramName": "value"
      }]
    }, {
      "label": "setShakeThreshold()",
      "description": "The <a href=\"#/p5/setShakeThreshold\" class=\"code\">setShakeThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceShaken\" class=\"code\">deviceShaken()</a> function. The default threshold is set to 30.",
      "examples": ["// Run this example on a mobile device \n\n\n// You will need to shake the device more firmly \n\n\n// the closer the box's fill gets to white in order to change the value. \n\n\nlet value = 0;\nlet threshold = 30;\n\nfunction setup() {\n    setShakeThreshold(threshold);\n}\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device is being shaked`);\n}\n\nfunction deviceMoved() {\n    value = value + 5;\n    threshold = threshold + 5;\n    if (value > 255) {\n        value = 0;\n        threshold = 30;\n    }\n    setShakeThreshold(threshold);\n}"],
      "href": "#/p5/setShakeThreshold",
      "syntax": "setShakeThreshold(value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "The threshold value",
        "paramName": "value"
      }]
    }, {
      "label": "deviceMoved()",
      "description": "The <a href=\"#/p5/deviceMoved\" class=\"code\">deviceMoved()</a> function is called when the device is moved by more than\nthe threshold value along X, Y or Z axis. The default threshold is set to 0.5.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\" class=\"code\">setMoveThreshold()</a>.",
      "examples": ["// Run this example on a mobile device \n\n\n// Move the device around \n\n\n// to change the value. \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device moves`);\n}\n\nfunction deviceMoved() {\n    value = value + 5;\n    if (value > 255) {\n        value = 0;\n    }\n}"],
      "href": "#/p5/deviceMoved",
      "syntax": "deviceMoved()",
      "parameters": []
    }, {
      "label": "deviceTurned()",
      "description": "The <a href=\"#/p5/deviceTurned\" class=\"code\">deviceTurned()</a> function is called when the device rotates by\nmore than 90 degrees continuously.",
      "examples": ["// Run this example on a mobile device \n\n\n// Rotate the device by 90 degrees \n\n\n// to change the value. \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device turns`);\n}\n\nfunction deviceTurned() {\n    if (value === 0) {\n        value = 255;\n    } else if (value === 255) {\n        value = 0;\n    }\n}", "// Run this example on a mobile device \n\n\n// Rotate the device by 90 degrees in the \n\n\n// X-axis to change the value. \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when x-axis turns`);\n}\n\nfunction deviceTurned() {\n    if (turnAxis === 'X') {\n        if (value === 0) {\n            value = 255;\n        } else if (value === 255) {\n            value = 0;\n        }\n    }\n}"],
      "href": "#/p5/deviceTurned",
      "syntax": "deviceTurned()",
      "parameters": []
    }, {
      "label": "deviceShaken()",
      "description": "The <a href=\"#/p5/deviceShaken\" class=\"code\">deviceShaken()</a> function is called when the device total acceleration\nchanges of accelerationX and accelerationY values is more than\nthe threshold value. The default threshold is set to 30.\nThe threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\" class=\"code\">setShakeThreshold()</a>.",
      "examples": ["// Run this example on a mobile device \n\n\n// Shake the device to change the value. \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`50-by-50 black rect in center of canvas.\n    turns white on mobile when device shakes`);\n}\n\nfunction deviceShaken() {\n    value = value + 5;\n    if (value > 255) {\n        value = 0;\n    }\n}"],
      "href": "#/p5/deviceShaken",
      "syntax": "deviceShaken()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Keyboard",
    "tokens": [{
      "label": "keyIsPressed",
      "description": "The boolean system variable <a href=\"#/p5/keyIsPressed\" class=\"code\">keyIsPressed</a> is true if any key is pressed\nand false if no keys are pressed.",
      "examples": ["function draw() {\n    if (keyIsPressed === true) {\n        fill(0);\n    } else {\n        fill(255);\n    }\n    rect(25, 25, 50, 50);\n    describe('50-by-50 white rect that turns black on keypress.');\n}"],
      "href": "#/p5/keyIsPressed",
      "syntax": "keyIsPressed",
      "parameters": []
    }, {
      "label": "key",
      "description": "The system variable key always contains the value of the most recent\nkey on the keyboard that was typed. To get the proper capitalization, it\nis best to use it within <a href=\"#/p5/keyTyped\" class=\"code\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\" class=\"code\">keyCode</a>\nvariable.",
      "examples": ["// Click any key to display it! \n\n\n// (Not Guaranteed to be Case Sensitive) \n\nfunction setup() {\n    fill(245, 123, 158);\n    textSize(50);\n}\n\nfunction draw() {\n    background(200);\n    text(key, 33, 65);\n    // Display last key pressed. \n\n    describe('canvas displays any key value that is pressed in pink font.');\n}"],
      "href": "#/p5/key",
      "syntax": "key",
      "parameters": []
    }, {
      "label": "keyCode",
      "description": "The variable keyCode is used to detect special keys such as BACKSPACE,\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\nYou can also check for custom keys by looking up the keyCode of any key\non a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.",
      "examples": ["let fillVal = 126;\n\nfunction draw() {\n    fill(fillVal);\n    rect(25, 25, 50, 50);\n    describe(`Grey rect center. turns white when up arrow pressed and black when down.\n    Display key pressed and its keyCode in a yellow box.`);\n}\n\nfunction keyPressed() {\n    if (keyCode === UP_ARROW) {\n        fillVal = 255;\n    } else if (keyCode === DOWN_ARROW) {\n        fillVal = 0;\n    }\n}", "function draw() {}\n\nfunction keyPressed() {\n    background('yellow');\n    text(`${key} ${keyCode}`, 10, 40);\n    print(key, ' ', keyCode);\n}"],
      "href": "#/p5/keyCode",
      "syntax": "keyCode",
      "parameters": []
    }, {
      "label": "keyPressed()",
      "description": "The <a href=\"#/p5/keyPressed\" class=\"code\">keyPressed()</a> function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\" class=\"code\">keyCode</a> variable.",
      "examples": ["let value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black rect center. turns white when key pressed and black\n    when released.`);\n}\n\nfunction keyPressed() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "let value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black rect center. turns white when left arrow pressed and\n    black when right.`);\n}\n\nfunction keyPressed() {\n    if (keyCode === LEFT_ARROW) {\n        value = 255;\n    } else if (keyCode === RIGHT_ARROW) {\n        value = 0;\n    }\n}", "function keyPressed() {\n\n    // Do something \n\n    return false;\n    // prevent any default behaviour \n\n}"],
      "href": "#/p5/keyPressed",
      "syntax": "keyPressed([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional KeyboardEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "keyReleased()",
      "description": "The <a href=\"#/p5/keyReleased\" class=\"code\">keyReleased()</a> function is called once every time a key is released.\nSee <a href=\"#/p5/key\" class=\"code\">key</a> and <a href=\"#/p5/keyCode\" class=\"code\">keyCode</a> for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the function.",
      "examples": ["let value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black rect center. turns white when key pressed and black\n    when pressed again`);\n}\n\nfunction keyReleased() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n    return false;\n    // prevent any default behavior \n\n}"],
      "href": "#/p5/keyReleased",
      "syntax": "keyReleased([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional KeyboardEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "keyTyped()",
      "description": "The <a href=\"#/p5/keyTyped\" class=\"code\">keyTyped()</a> function is called once every time a key is pressed, but\naction keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\na keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\" class=\"code\">keyPressed()</a> function instead.\nThe most recent key typed will be stored in the key variable.",
      "examples": ["let value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black rect center. turns white when 'a' key typed and\n    black when 'b' pressed`);\n}\n\nfunction keyTyped() {\n    if (key === 'a') {\n        value = 255;\n    } else if (key === 'b') {\n        value = 0;\n    }\n\n    // uncomment to prevent any default behavior \n\n\n    // return false; \n\n}"],
      "href": "#/p5/keyTyped",
      "syntax": "keyTyped([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional KeyboardEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "keyIsDown()",
      "description": "The <a href=\"#/p5/keyIsDown\" class=\"code\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable <a href=\"#/p5/keyCode\" class=\"code\">keyCode</a> names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.",
      "examples": ["let x = 100;\nlet y = 100;\n\nfunction setup() {\n    createCanvas(512, 512);\n    fill(255, 0, 0);\n}\n\nfunction draw() {\n    if (keyIsDown(LEFT_ARROW)) {\n        x - = 5;\n    }\n\n    if (keyIsDown(RIGHT_ARROW)) {\n        x + = 5;\n    }\n\n    if (keyIsDown(UP_ARROW)) {\n        y - = 5;\n    }\n\n    if (keyIsDown(DOWN_ARROW)) {\n        y + = 5;\n    }\n\n    clear();\n    ellipse(x, y, 50, 50);\n    describe(`50-by-50 red ellipse moves left, right, up, and\n    down with arrow presses.`);\n}", "let diameter = 50;\n\nfunction setup() {\n    createCanvas(512, 512);\n}\n\nfunction draw() {\n\n    // 107 and 187 are keyCodes for \"+\" \n\n    if (keyIsDown(107) || keyIsDown(187)) {\n        diameter + = 1;\n    }\n\n\n    // 109 and 189 are keyCodes for \"-\" \n\n    if (keyIsDown(109) || keyIsDown(189)) {\n        diameter - = 1;\n    }\n\n    clear();\n    fill(255, 0, 0);\n    ellipse(50, 50, diameter, diameter);\n    describe(`50-by-50 red ellipse gets bigger or smaller when\n    + or - are pressed.`);\n}"],
      "href": "#/p5/keyIsDown",
      "syntax": "keyIsDown(code)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "The key to check for.",
        "paramName": "code"
      }]
    }]
  }, {
    "subgroupName": "Mouse",
    "tokens": [{
      "label": "movedX",
      "description": "The variable movedX contains the horizontal movement of the mouse since the last frame",
      "examples": ["let x = 50;\n\nfunction setup() {\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    if (x > 48) {\n        x - = 2;\n    } else if (x < 48) {\n        x + = 2;\n    }\n    x + = floor(movedX / 5);\n    background(237, 34, 93);\n    fill(0);\n    rect(x, 50, 50, 50);\n    describe(`box moves left and right according to mouse movement\n     then slowly back towards the center`);\n}"],
      "href": "#/p5/movedX",
      "syntax": "movedX",
      "parameters": []
    }, {
      "label": "movedY",
      "description": "The variable movedY contains the vertical movement of the mouse since the last frame",
      "examples": ["let y = 50;\n\nfunction setup() {\n    rectMode(CENTER);\n}\n\nfunction draw() {\n    if (y > 48) {\n        y - = 2;\n    } else if (y < 48) {\n        y + = 2;\n    }\n    y + = floor(movedY / 5);\n    background(237, 34, 93);\n    fill(0);\n    rect(50, y, 50, 50);\n    describe(`box moves up and down according to mouse movement then\n    slowly back towards the center`);\n}"],
      "href": "#/p5/movedY",
      "syntax": "movedY",
      "parameters": []
    }, {
      "label": "mouseX",
      "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas. The value at\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\nIf touch is used instead of mouse input, mouseX will hold the x value\nof the most recent touch point.",
      "examples": ["// Move the mouse across the canvas \n\nfunction draw() {\n    background(244, 248, 252);\n    line(mouseX, 0, mouseX, 100);\n    describe('horizontal black line moves left and right with mouse x-position');\n}"],
      "href": "#/p5/mouseX",
      "syntax": "mouseX",
      "parameters": []
    }, {
      "label": "mouseY",
      "description": "The system variable mouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the canvas. The value at\nthe top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\nIf touch is used instead of mouse input, mouseY will hold the y value\nof the most recent touch point.",
      "examples": ["// Move the mouse across the canvas \n\nfunction draw() {\n    background(244, 248, 252);\n    line(0, mouseY, 100, mouseY);\n    describe('vertical black line moves up and down with mouse y-position');\n}"],
      "href": "#/p5/mouseY",
      "syntax": "mouseY",
      "parameters": []
    }, {
      "label": "pmouseX",
      "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n(-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX\nvalue at the start of each touch event.",
      "examples": ["// Move the mouse across the canvas to leave a trail \n\nfunction setup() {\n\n    //slow down the frameRate to make it more visible \n\n    frameRate(10);\n}\n\nfunction draw() {\n    background(244, 248, 252);\n    line(mouseX, mouseY, pmouseX, pmouseY);\n    print(pmouseX + ' -> ' + mouseX);\n    describe(`line trail is created from cursor movements.\n    faster movement make longer line.`);\n}"],
      "href": "#/p5/pmouseX",
      "syntax": "pmouseX",
      "parameters": []
    }, {
      "label": "pmouseY",
      "description": "The system variable pmouseY always contains the vertical position of\nthe mouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n(-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY\nvalue at the start of each touch event.",
      "examples": ["function draw() {\n    background(237, 34, 93);\n    fill(0);\n\n    //draw a square only if the mouse is not moving \n\n    if (mouseY === pmouseY && mouseX === pmouseX) {\n        rect(20, 20, 60, 60);\n    }\n\n    print(pmouseY + ' -> ' + mouseY);\n    describe(`60-by-60 black rect center, fuchsia background.\n    rect flickers on mouse movement`);\n}"],
      "href": "#/p5/pmouseY",
      "syntax": "pmouseY",
      "parameters": []
    }, {
      "label": "winMouseX",
      "description": "The system variable winMouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window.",
      "examples": ["let myCanvas;\n\nfunction setup() {\n\n    //use a variable to store a pointer to the canvas \n\n    myCanvas = createCanvas(100, 100);\n    let body = document.getElementsByTagName('body')[0];\n    myCanvas.parent(body);\n}\n\nfunction draw() {\n    background(237, 34, 93);\n    fill(0);\n\n\n    //move the canvas to the horizontal mouse position \n\n\n    //relative to the window \n\n    myCanvas.position(winMouseX + 1, windowHeight / 2);\n\n\n    //the y of the square is relative to the canvas \n\n    rect(20, mouseY, 60, 60);\n    describe(`60-by-60 black rect y moves with mouse y and fuchsia\n    canvas moves with mouse x`);\n}"],
      "href": "#/p5/winMouseX",
      "syntax": "winMouseX",
      "parameters": []
    }, {
      "label": "winMouseY",
      "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window.",
      "examples": ["let myCanvas;\n\nfunction setup() {\n\n    //use a variable to store a pointer to the canvas \n\n    myCanvas = createCanvas(100, 100);\n    let body = document.getElementsByTagName('body')[0];\n    myCanvas.parent(body);\n}\n\nfunction draw() {\n    background(237, 34, 93);\n    fill(0);\n\n\n    //move the canvas to the vertical mouse position \n\n\n    //relative to the window \n\n    myCanvas.position(windowWidth / 2, winMouseY + 1);\n\n\n    //the x of the square is relative to the canvas \n\n    rect(mouseX, 20, 60, 60);\n    describe(`60-by-60 black rect x moves with mouse x and\n    fuchsia canvas y moves with mouse y`);\n}"],
      "href": "#/p5/winMouseY",
      "syntax": "winMouseY",
      "parameters": []
    }, {
      "label": "pwinMouseX",
      "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\nvalue at the start of each touch event.",
      "examples": ["let myCanvas;\n\nfunction setup() {\n\n    //use a variable to store a pointer to the canvas \n\n    myCanvas = createCanvas(100, 100);\n    noStroke();\n    fill(237, 34, 93);\n}\n\nfunction draw() {\n    clear();\n\n    //the difference between previous and \n\n\n    //current x position is the horizontal mouse speed \n\n    let speed = abs(winMouseX - pwinMouseX);\n\n    //change the size of the circle \n\n\n    //according to the horizontal speed \n\n    ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n\n    //move the canvas to the mouse position \n\n    myCanvas.position(winMouseX + 1, winMouseY + 1);\n    describe(`fuchsia ellipse moves with mouse x and y.\n    Grows and shrinks with mouse speed`);\n}"],
      "href": "#/p5/pwinMouseX",
      "syntax": "pwinMouseX",
      "parameters": []
    }, {
      "label": "pwinMouseY",
      "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window. Note: pwinMouseY will be reset to the current winMouseY\nvalue at the start of each touch event.",
      "examples": ["let myCanvas;\n\nfunction setup() {\n\n    //use a variable to store a pointer to the canvas \n\n    myCanvas = createCanvas(100, 100);\n    noStroke();\n    fill(237, 34, 93);\n}\n\nfunction draw() {\n    clear();\n\n    //the difference between previous and \n\n\n    //current y position is the vertical mouse speed \n\n    let speed = abs(winMouseY - pwinMouseY);\n\n    //change the size of the circle \n\n\n    //according to the vertical speed \n\n    ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n\n    //move the canvas to the mouse position \n\n    myCanvas.position(winMouseX + 1, winMouseY + 1);\n    describe(`fuchsia ellipse moves with mouse x and y.\n    Grows and shrinks with mouse speed`);\n}"],
      "href": "#/p5/pwinMouseY",
      "syntax": "pwinMouseY",
      "parameters": []
    }, {
      "label": "mouseButton",
      "description": "p5 automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button was pressed last.\nWarning: different browsers may track mouseButton differently.",
      "examples": ["function draw() {\n    background(237, 34, 93);\n    fill(0);\n\n    if (mouseIsPressed === true) {\n        if (mouseButton === LEFT) {\n            ellipse(50, 50, 50, 50);\n        }\n        if (mouseButton === RIGHT) {\n            rect(25, 25, 50, 50);\n        }\n        if (mouseButton === CENTER) {\n            triangle(23, 75, 50, 20, 78, 75);\n        }\n    }\n\n    print(mouseButton);\n    describe(`50-by-50 black ellipse appears on center of fuchsia\n    canvas on mouse click/press.`);\n}"],
      "href": "#/p5/mouseButton",
      "syntax": "mouseButton",
      "parameters": []
    }, {
      "label": "mouseIsPressed",
      "description": "The boolean system variable mouseIsPressed is true if the mouse is pressed\nand false if not.",
      "examples": ["function draw() {\n    background(237, 34, 93);\n    fill(0);\n\n    if (mouseIsPressed === true) {\n        ellipse(50, 50, 50, 50);\n    } else {\n        rect(25, 25, 50, 50);\n    }\n\n    print(mouseIsPressed);\n    describe(`black 50-by-50 rect becomes ellipse with mouse click/press.\n    fuchsia background.`);\n}"],
      "href": "#/p5/mouseIsPressed",
      "syntax": "mouseIsPressed",
      "parameters": []
    }, {
      "label": "mouseMoved()",
      "description": "The <a href=\"#/p5/mouseMoved\" class=\"code\">mouseMoved()</a> function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
      "examples": ["// Move the mouse across the page \n\n\n// to change its value \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black 50-by-50 rect becomes lighter with mouse movements until\n  white then resets no image displayed`);\n}\n\nfunction mouseMoved() {\n    value = value + 5;\n    if (value > 255) {\n        value = 0;\n    }\n}", "function mouseMoved() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction mouseMoved(event) {\n    console.log(event);\n}"],
      "href": "#/p5/mouseMoved",
      "syntax": "mouseMoved([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "mouseDragged()",
      "description": "The <a href=\"#/p5/mouseDragged\" class=\"code\">mouseDragged()</a> function is called once every time the mouse moves and\na mouse button is pressed. If no <a href=\"#/p5/mouseDragged\" class=\"code\">mouseDragged()</a> function is defined, the\n<a href=\"#/p5/touchMoved\" class=\"code\">touchMoved()</a> function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the function.",
      "examples": ["// Drag the mouse across the page \n\n\n// to change its value \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe(`black 50-by-50 rect turns lighter with mouse click and\n    drag until white, resets`);\n}\n\nfunction mouseDragged() {\n    value = value + 5;\n    if (value > 255) {\n        value = 0;\n    }\n}", "function mouseDragged() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction mouseDragged(event) {\n    console.log(event);\n}"],
      "href": "#/p5/mouseDragged",
      "syntax": "mouseDragged([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "mousePressed()",
      "description": "The <a href=\"#/p5/mousePressed\" class=\"code\">mousePressed()</a> function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\n<a href=\"#/p5/mousePressed\" class=\"code\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\" class=\"code\">touchStarted()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the function.",
      "examples": ["// Click anywhere in the webpage to change \n\n\n// the color value of the rectangle \n\n\nlet colorValue = 0;\n\nfunction draw() {\n    fill(colorValue);\n    rect(25, 25, 50, 50);\n    describe('black 50-by-50 rect turns white with mouse click/press.');\n}\n\nfunction mousePressed() {\n    if (value === 0) {\n        colorValue = 255;\n    } else {\n        colorValue = 0;\n    }\n}", "function mousePressed() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction mousePressed(event) {\n    console.log(event);\n}"],
      "href": "#/p5/mousePressed",
      "syntax": "mousePressed([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "mouseReleased()",
      "description": "The <a href=\"#/p5/mouseReleased\" class=\"code\">mouseReleased()</a> function is called every time a mouse button is\nreleased. If no <a href=\"#/p5/mouseReleased\" class=\"code\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\" class=\"code\">touchEnded()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the function.",
      "examples": ["// Click within the image to change \n\n\n// the value of the rectangle \n\n\n// after the mouse has been clicked \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('black 50-by-50 rect turns white with mouse click/press.');\n}\n\nfunction mouseReleased() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "function mouseReleased() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction mouseReleased(event) {\n    console.log(event);\n}"],
      "href": "#/p5/mouseReleased",
      "syntax": "mouseReleased([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "mouseClicked()",
      "description": "The <a href=\"#/p5/mouseClicked\" class=\"code\">mouseClicked()</a> function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers handle clicks differently, so this function is only guaranteed to be\nrun when the left mouse button is clicked. To handle other mouse buttons\nbeing pressed or released, see <a href=\"#/p5/mousePressed\" class=\"code\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\" class=\"code\">mouseReleased()</a>.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the function.",
      "examples": ["// Click within the image to change \n\n\n// the value of the rectangle \n\n\n// after the mouse has been clicked \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('black 50-by-50 rect turns white with mouse click/press.');\n}\n\nfunction mouseClicked() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "function mouseClicked() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction mouseClicked(event) {\n    console.log(event);\n}"],
      "href": "#/p5/mouseClicked",
      "syntax": "mouseClicked([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "doubleClicked()",
      "description": "The <a href=\"#/p5/doubleClicked\" class=\"code\">doubleClicked()</a> function is executed every time a event\nlistener has detected a dblclick event which is a part of the\nDOM L3 specification. The doubleClicked event is fired when a\npointing device button (usually a mouse's primary button)\nis clicked twice on a single element. For more info on the\ndblclick event refer to mozilla's documentation here:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>",
      "examples": ["// Click within the image to change \n\n\n// the value of the rectangle \n\n\n// after the mouse has been double clicked \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('black 50-by-50 rect turns white with mouse doubleClick/press.');\n}\n\nfunction doubleClicked() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "function doubleClicked() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}", "// returns a MouseEvent object \n\n\n// as a callback argument \n\nfunction doubleClicked(event) {\n    console.log(event);\n}"],
      "href": "#/p5/doubleClicked",
      "syntax": "doubleClicked([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional MouseEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "mouseWheel()",
      "description": "The function <a href=\"#/p5/mouseWheel\" class=\"code\">mouseWheel()</a> is executed every time a vertical mouse wheel\nevent is detected either triggered by an actual mouse wheel or by a\ntouchpad.<br><br>\nThe event.delta property returns the amount the mouse wheel\nhave scrolled. The values can be positive or negative depending on the\nscroll direction (on macOS with \"natural\" scrolling enabled, the signs\nare inverted).<br><br>\nBrowsers may have different default behaviors attached to various\nmouse events. To prevent any default behavior for this event, add\n\"return false\" to the end of the method.<br><br>\nDue to the current support of the \"wheel\" event on Safari, the function\nmay only work as expected if \"return false\" is included while using Safari.",
      "examples": ["let pos = 25;\n\nfunction draw() {\n    background(237, 34, 93);\n    fill(0);\n    rect(25, pos, 50, 50);\n    describe(`black 50-by-50 rect moves up and down with vertical scroll.\n    fuchsia background`);\n}\n\nfunction mouseWheel(event) {\n    print(event.delta);\n\n    //move the square according to the vertical scroll amount \n\n    pos + = event.delta;\n\n    //uncomment to block page scrolling \n\n\n    //return false; \n\n}"],
      "href": "#/p5/mouseWheel",
      "syntax": "mouseWheel([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional WheelEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "requestPointerLock()",
      "description": "The function <a href=\"#/p5/requestPointerLock\" class=\"code\">requestPointerLock()</a>\nlocks the pointer to its current position and makes it invisible.\nUse <a href=\"#/p5/movedX\" class=\"code\">movedX</a> and <a href=\"#/p5/movedY\" class=\"code\">movedY</a> to get the difference the mouse was moved since\nthe last call of draw.\nNote that not all browsers support this feature.\nThis enables you to create experiences that aren't limited by the mouse moving out of the screen\neven if it is repeatedly moved into one direction.\nFor example, a first person perspective experience.",
      "examples": ["let cam;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    requestPointerLock();\n    cam = createCamera();\n}\n\nfunction draw() {\n    background(255);\n    cam.pan(-movedX * 0.001);\n    cam.tilt(movedY * 0.001);\n    sphere(25);\n    describe(`3D scene moves according to mouse mouse movement in a\n    first person perspective`);\n}"],
      "href": "#/p5/requestPointerLock",
      "syntax": "requestPointerLock()",
      "parameters": []
    }, {
      "label": "exitPointerLock()",
      "description": "The function <a href=\"#/p5/exitPointerLock\" class=\"code\">exitPointerLock()</a>\nexits a previously triggered <a href=\"#/p5/requestPointerLock\" class=\"code\">pointer Lock</a>\nfor example to make ui elements usable etc",
      "examples": ["//click the canvas to lock the pointer \n\n\n//click again to exit (otherwise escape) \n\nlet locked = false;\n\nfunction draw() {\n    background(237, 34, 93);\n    describe('cursor gets locked / unlocked on mouse-click');\n}\n\nfunction mouseClicked() {\n    if (!locked) {\n        locked = true;\n        requestPointerLock();\n    } else {\n        exitPointerLock();\n        locked = false;\n    }\n}"],
      "href": "#/p5/exitPointerLock",
      "syntax": "exitPointerLock()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Touch",
    "tokens": [{
      "label": "touches",
      "description": "The system variable touches[] contains an array of the positions of all\ncurrent touch points, relative to (0, 0) of the canvas, and IDs identifying a\nunique touch as it moves. Each element in the array is an object with x, y,\nand id properties.",
      "examples": ["// On a touchscreen device, touch \n\n\n// the canvas using one or more fingers \n\n\n// at the same time \n\nfunction draw() {\n    clear();\n    let display = touches.length + ' touches';\n    text(display, 5, 10);\n    describe(`Number of touches currently registered are displayed\n    on the canvas`);\n}"],
      "href": "#/p5/touches",
      "syntax": "touches",
      "parameters": []
    }, {
      "label": "touchStarted()",
      "description": "The touchStarted() function is called once after every time a touch is\nregistered. If no <a href=\"#/p5/touchStarted\" class=\"code\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\" class=\"code\">mousePressed()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
      "examples": ["// Touch within the image to change \n\n\n// the value of the rectangle \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('50-by-50 black rect turns white with touch event.');\n}\n\nfunction touchStarted() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "function touchStarted() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}\ndescribe('no image displayed');", "// returns a TouchEvent object \n\n\n// as a callback argument \n\nfunction touchStarted(event) {\n    console.log(event);\n}\ndescribe('no image displayed');"],
      "href": "#/p5/touchStarted",
      "syntax": "touchStarted([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional TouchEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "touchMoved()",
      "description": "The <a href=\"#/p5/touchMoved\" class=\"code\">touchMoved()</a> function is called every time a touch move is registered.\nIf no <a href=\"#/p5/touchMoved\" class=\"code\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\" class=\"code\">mouseDragged()</a> function will\nbe called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
      "examples": ["// Move your finger across the page \n\n\n// to change its value \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('50-by-50 black rect turns lighter with touch until white. resets');\n}\n\nfunction touchMoved() {\n    value = value + 5;\n    if (value > 255) {\n        value = 0;\n    }\n}", "function touchMoved() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}\ndescribe('no image displayed');", "// returns a TouchEvent object \n\n\n// as a callback argument \n\nfunction touchMoved(event) {\n    console.log(event);\n}\ndescribe('no image displayed');"],
      "href": "#/p5/touchMoved",
      "syntax": "touchMoved([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional TouchEvent callback argument.",
        "paramName": "event"
      }]
    }, {
      "label": "touchEnded()",
      "description": "The <a href=\"#/p5/touchEnded\" class=\"code\">touchEnded()</a> function is called every time a touch ends. If no\n<a href=\"#/p5/touchEnded\" class=\"code\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\" class=\"code\">mouseReleased()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
      "examples": ["// Release touch within the image to \n\n\n// change the value of the rectangle \n\n\nlet value = 0;\n\nfunction draw() {\n    fill(value);\n    rect(25, 25, 50, 50);\n    describe('50-by-50 black rect turns white with touch.');\n}\n\nfunction touchEnded() {\n    if (value === 0) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n}", "function touchEnded() {\n    ellipse(mouseX, mouseY, 5, 5);\n\n    // prevent default \n\n    return false;\n}\ndescribe('no image displayed');", "// returns a TouchEvent object \n\n\n// as a callback argument \n\nfunction touchEnded(event) {\n    console.log(event);\n}\ndescribe('no image displayed');"],
      "href": "#/p5/touchEnded",
      "syntax": "touchEnded([event])",
      "parameters": [{
        "paramType": "Object",
        "paramDescription": "optional TouchEvent callback argument.",
        "paramName": "event"
      }]
    }]
  }]
}, {
  "groupName": "Image",
  "subgroups": [{
    "tokens": [{
      "label": "createImage()",
      "description": "Creates a new <a href=\"#/p5.Image\" class=\"code\">p5.Image</a> (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.",
      "examples": ["let img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n    for (let j = 0; j < img.height; j++) {\n        img.set(i, j, color(0, 90, 102));\n    }\n}\nimg.updatePixels();\nimage(img, 17, 17);", "let img = createImage(66, 66);\nimg.loadPixels();\nfor (let i = 0; i < img.width; i++) {\n    for (let j = 0; j < img.height; j++) {\n        img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n    }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);", "let pink = color(255, 102, 204);\nlet img = createImage(66, 66);\nimg.loadPixels();\nlet d = pixelDensity();\nlet halfImage = 4 * (img.width * d) * (img.height / 2 * d);\nfor (let i = 0; i < halfImage; i + = 4) {\n    img.pixels[i] = red(pink);\n    img.pixels[i + 1] = green(pink);\n    img.pixels[i + 2] = blue(pink);\n    img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);"],
      "href": "#/p5/createImage",
      "syntax": "createImage(width, height)",
      "parameters": [{
        "paramType": "Integer",
        "paramDescription": "width in pixels",
        "paramName": "width"
      }, {
        "paramType": "Integer",
        "paramDescription": "height in pixels",
        "paramName": "height"
      }]
    }, {
      "label": "saveCanvas()",
      "description": "Save the current canvas as an image. The browser will either save the\nfile immediately, or prompt the user with a dialogue window.",
      "examples": ["function setup() {\n    let c = createCanvas(100, 100);\n    background(255, 0, 0);\n    saveCanvas(c, 'myCanvas', 'jpg');\n}", "// note that this example has the same result as above \n\n\n// if no canvas is specified, defaults to main canvas \n\nfunction setup() {\n    let c = createCanvas(100, 100);\n    background(255, 0, 0);\n    saveCanvas('myCanvas', 'jpg');\n\n\n    // all of the following are valid \n\n    saveCanvas(c, 'myCanvas', 'jpg');\n    saveCanvas(c, 'myCanvas.jpg');\n    saveCanvas(c, 'myCanvas');\n    saveCanvas(c);\n    saveCanvas('myCanvas', 'png');\n    saveCanvas('myCanvas');\n    saveCanvas();\n}"],
      "href": "#/p5/saveCanvas",
      "syntax": "saveCanvas(selectedCanvas, [filename], [extension])",
      "parameters": [{
        "paramType": "p5.Element|HTMLCanvasElement",
        "paramDescription": "a variable representing a specific html5 canvas (optional)",
        "paramName": "selectedCanvas"
      }, {
        "paramType": "String",
        "paramDescription": "",
        "paramName": "filename"
      }, {
        "paramType": "String",
        "paramDescription": "'jpg' or 'png'",
        "paramName": "extension"
      }]
    }, {
      "label": "saveFrames()",
      "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will pop up save dialogues in an\nattempt to download all of the images that have just been created. With the\ncallback provided the image data isn't saved by default but instead passed\nas an argument to the callback function as an array of objects, with the\nsize of array equal to the total number of frames.",
      "examples": ["function draw() {\n    background(mouseX);\n}\n\nfunction mousePressed() {\n    saveFrames('out', 'png', 1, 25, data = > {\n        print(data);\n    });\n}"],
      "href": "#/p5/saveFrames",
      "syntax": "saveFrames(filename, extension, duration, framerate, [callback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "",
        "paramName": "filename"
      }, {
        "paramType": "String",
        "paramDescription": "'jpg' or 'png'",
        "paramName": "extension"
      }, {
        "paramType": "Number",
        "paramDescription": "Duration in seconds to save the frames for. This parameter will be constrained to be less or equal to 15.",
        "paramName": "duration"
      }, {
        "paramType": "Number",
        "paramDescription": "Framerate to save the frames in. This parameter will be constrained to be less or equal to 22.",
        "paramName": "framerate"
      }, {
        "paramType": "Function(Array)",
        "paramDescription": "A callback function that will be executed to handle the image data. This function should accept an array as argument. The array will contain the specified number of frames of objects. Each object has three properties: imageData - an image/octet-stream, filename and extension.",
        "paramName": "callback"
      }]
    }, {
      "label": "p5.Image",
      "description": "Creates a new <a href=\"#/p5.Image\" class=\"code\">p5.Image</a>. A <a href=\"#/p5.Image\" class=\"code\">p5.Image</a> is a canvas backed representation of an\nimage.",
      "examples": ["function setup() {\n    let img = createImage(100, 100);\n    // same as new p5.Image(100, 100); \n\n    img.loadPixels();\n    createCanvas(100, 100);\n    background(0);\n\n\n    // helper for writing color to array \n\n    function writeColor(image, x, y, red, green, blue, alpha) {\n        let index = (x + y * width) * 4;\n        image.pixels[index] = red;\n        image.pixels[index + 1] = green;\n        image.pixels[index + 2] = blue;\n        image.pixels[index + 3] = alpha;\n    }\n\n    let x, y;\n\n    // fill with random colors \n\n    for (y = 0; y < img.height; y++) {\n        for (x = 0; x < img.width; x++) {\n            let red = random(255);\n            let green = random(255);\n            let blue = random(255);\n            let alpha = 255;\n            writeColor(img, x, y, red, green, blue, alpha);\n        }\n    }\n\n\n    // draw a red line \n\n    y = 0;\n    for (x = 0; x < img.width; x++) {\n        writeColor(img, x, y, 255, 0, 0, 255);\n    }\n\n\n    // draw a green line \n\n    y = img.height - 1;\n    for (x = 0; x < img.width; x++) {\n        writeColor(img, x, y, 0, 255, 0, 255);\n    }\n\n    img.updatePixels();\n    image(img, 0, 0);\n}"],
      "href": "#/p5.Image",
      "syntax": "new p5.Image(width, height)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "width"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "height"
      }]
    }]
  }, {
    "subgroupName": "Loading &amp; Displaying",
    "tokens": [{
      "label": "loadImage()",
      "description": "Loads an image from a path and creates a <a href=\"#/p5.Image\" class=\"code\">p5.Image</a> from it.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n}", "function setup() {\n\n    // here we use a callback to display the image after loading \n\n    loadImage('assets/laDefense.jpg', img = > {\n        image(img, 0, 0);\n    });\n}"],
      "href": "#/p5/loadImage",
      "syntax": "loadImage(path, [successCallback], [failureCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "Path of the image to be loaded",
        "paramName": "path"
      }, {
        "paramType": "function(p5.Image)",
        "paramDescription": "Function to be called once the image is loaded. Will be passed the p5.Image.",
        "paramName": "successCallback"
      }, {
        "paramType": "Function(Event)",
        "paramDescription": "called with event error if the image fails to load.",
        "paramName": "failureCallback"
      }]
    }, {
      "label": "saveGif()",
      "description": "Generates a gif of your current animation and downloads it to your computer!",
      "examples": ["function setup() {\n    createCanvas(100, 100);\n}\n\nfunction draw() {\n    colorMode(RGB);\n    background(30);\n\n\n    // create a bunch of circles that move in... circles! \n\n    for (let i = 0; i < 10; i++) {\n        let opacity = map(i, 0, 10, 0, 255);\n        noStroke();\n        fill(230, 250, 90, opacity);\n        circle(\n            30 * sin(frameCount / (30 - i)) + width / 2,\n            30 * cos(frameCount / (30 - i)) + height / 2,\n            10\n        );\n    }\n}\n\n\n// you can put it in the mousePressed function, \n\n\n// or keyPressed for example \n\nfunction keyPressed() {\n\n    // this will download the first 5 seconds of the animation! \n\n    if (key === 's') {\n        saveGif('mySketch', 5);\n    }\n}"],
      "href": "#/p5/saveGif",
      "syntax": "saveGif(filename, duration, options)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "File name of your gif",
        "paramName": "filename"
      }, {
        "paramType": "Number",
        "paramDescription": "Duration in seconds that you wish to capture from your sketch",
        "paramName": "duration"
      }, {
        "paramType": "Object",
        "paramDescription": "An optional object that can contain five more arguments: delay, specifying how much time we should wait before recording; units, a string that can be either 'seconds' or 'frames'. By default it's 'seconds’; silent, a boolean that defines presence of progress notifications. By default it’s false; notificationDuration, a number that defines how long in seconds the final notification will live. 0, the default value, means that the notification will never be removed; notificationID, a string that specifies the notification DOM element id. By default it’s 'progressBar’.",
        "paramName": "options"
      }]
    }, {
      "label": "image()",
      "description": "Draw an image to the p5.js canvas.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n\n    // Top-left corner of the img is at (0, 0) \n\n\n    // Width and height are the img's original width and height \n\n    image(img, 0, 0);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    background(50);\n\n    // Top-left corner of the img is at (10, 10) \n\n\n    // Width and height are 50×50 \n\n    image(img, 10, 10, 50, 50);\n}", "function setup() {\n\n    // Here, we use a callback to display the image after loading \n\n    loadImage('assets/laDefense.jpg', img = > {\n        image(img, 0, 0);\n    });\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/gradient.png');\n}\n\nfunction setup() {\n\n    // 1. Background image \n\n\n    // Top-left corner of the img is at (0, 0) \n\n\n    // Width and height are the img's original width and height, 100×100 \n\n    image(img, 0, 0);\n\n    // 2. Top right image \n\n\n    // Top-left corner of destination rectangle is at (50, 0) \n\n\n    // Destination rectangle width and height are 40×20 \n\n\n    // The next parameters are relative to the source image: \n\n\n    // - Starting at position (50, 50) on the source image, capture a 50×50 \n\n\n    // subsection \n\n\n    // - Draw this subsection to fill the dimensions of the destination rectangle \n\n    image(img, 50, 0, 40, 20, 50, 50, 50, 50);\n}", "let img;\n\nfunction preload() {\n\n    // dimensions of image are 780 x 440 \n\n\n    // dimensions of canvas are 100 x 100 \n\n    img = loadImage('assets/moonwalk.jpg');\n}\n\nfunction setup() {\n\n    // CONTAIN the whole image without distorting the image's aspect ratio \n\n\n    // CONTAIN the image within the specified destination box and display at LEFT,CENTER position \n\n    background(color('green'));\n    image(img, 0, 0, width, height, 0, 0, img.width, img.height, CONTAIN, LEFT);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense50.png');\n    // dimensions of image are 50 x 50 \n\n}\n\nfunction setup() {\n\n    // COVER the whole destination box without distorting the image's aspect ratio \n\n\n    // COVER the specified destination box which is of dimension 100 x 100 \n\n\n    // Without specifying xAlign or yAlign, the image will be \n\n\n    // centered in the destination box in both axes \n\n    image(img, 0, 0, width, height, 0, 0, img.width, img.height, COVER);\n}"],
      "href": "#/p5/image",
      "syntax": "image(img, x, y, [width], [height])",
      "parameters": [{
        "paramType": "p5.Image|p5.Element|p5.Texture|p5.Framebuffer|p5.FramebufferTexture",
        "paramDescription": "the image to display",
        "paramName": "img"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the top-left corner of the image",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the top-left corner of the image",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "the width to draw the image",
        "paramName": "width"
      }, {
        "paramType": "Number",
        "paramDescription": "the height to draw the image",
        "paramName": "height"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the destination rectangle in which to draw the source image",
        "paramName": "dx"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the destination rectangle in which to draw the source image",
        "paramName": "dy"
      }, {
        "paramType": "Number",
        "paramDescription": "the width of the destination rectangle",
        "paramName": "dWidth"
      }, {
        "paramType": "Number",
        "paramDescription": "the height of the destination rectangle",
        "paramName": "dHeight"
      }, {
        "paramType": "Number",
        "paramDescription": "the x-coordinate of the subsection of the source image to draw into the destination rectangle",
        "paramName": "sx"
      }, {
        "paramType": "Number",
        "paramDescription": "the y-coordinate of the subsection of the source image to draw into the destination rectangle",
        "paramName": "sy"
      }, {
        "paramType": "Number",
        "paramDescription": "the width of the subsection of the source image to draw into the destination rectangle",
        "paramName": "sWidth"
      }, {
        "paramType": "Number",
        "paramDescription": "the height of the subsection of the source image to draw into the destination rectangle",
        "paramName": "sHeight"
      }, {
        "paramType": "Constant",
        "paramDescription": "either CONTAIN or COVER",
        "paramName": "fit"
      }, {
        "paramType": "Constant",
        "paramDescription": "either LEFT, RIGHT or CENTER default is CENTER",
        "paramName": "xAlign"
      }, {
        "paramType": "Constant",
        "paramDescription": "either TOP, BOTTOM or CENTER default is CENTER",
        "paramName": "yAlign"
      }]
    }, {
      "label": "tint()",
      "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    tint(0, 153, 204);\n    // Tint blue \n\n    image(img, 50, 0);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    tint(0, 153, 204, 126);\n    // Tint blue and set transparency \n\n    image(img, 50, 0);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    tint(255, 126);\n    // Apply transparency without changing color \n\n    image(img, 50, 0);\n}"],
      "href": "#/p5/tint",
      "syntax": "tint(v1, v2, v3, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "alpha"
      }, {
        "paramType": "String",
        "paramDescription": "a color string",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "a gray value",
        "paramName": "gray"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red,green,blue & and alpha components of the color",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "the tint color",
        "paramName": "color"
      }]
    }, {
      "label": "noTint()",
      "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    tint(0, 153, 204);\n    // Tint blue \n\n    image(img, 0, 0);\n    noTint();\n    // Disable tint \n\n    image(img, 50, 0);\n}"],
      "href": "#/p5/noTint",
      "syntax": "noTint()",
      "parameters": []
    }, {
      "label": "imageMode()",
      "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to <a href=\"#/p5/image\" class=\"code\">image()</a> are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of <a href=\"#/p5/image\" class=\"code\">image()</a> as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    imageMode(CORNER);\n    image(img, 10, 10, 50, 50);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    imageMode(CORNERS);\n    image(img, 10, 10, 90, 40);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    imageMode(CENTER);\n    image(img, 50, 50, 80, 80);\n}"],
      "href": "#/p5/imageMode",
      "syntax": "imageMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either CORNER, CORNERS, or CENTER",
        "paramName": "mode"
      }]
    }]
  }, {
    "subgroupName": "Pixels",
    "tokens": [{
      "label": "pixels",
      "description": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n/Global_Objects/Uint8ClampedArray\" target=\"_blank\">Uint8ClampedArray</a>\ncontaining the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for <a href=\"#/p5/pixelDensity\" class=\"code\">pixelDensity</a>) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh density displays will have more pixels[] (by a factor of\npixelDensity^2).\nFor example, if the image is 100×100 pixels, there will be 40,000. On a\nretina display, there will be 160,000.",
      "examples": ["let pink = color(255, 102, 204);\nloadPixels();\nlet d = pixelDensity();\nlet halfImage = 4 * (width * d) * (height / 2 * d);\nfor (let i = 0; i < halfImage; i + = 4) {\n    pixels[i] = red(pink);\n    pixels[i + 1] = green(pink);\n    pixels[i + 2] = blue(pink);\n    pixels[i + 3] = alpha(pink);\n}\nupdatePixels();"],
      "href": "#/p5/pixels",
      "syntax": "pixels",
      "parameters": []
    }, {
      "label": "blend()",
      "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
      "examples": ["let img0;\nlet img1;\n\nfunction preload() {\n    img0 = loadImage('assets/rockies.jpg');\n    img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n    background(img0);\n    image(img1, 0, 0);\n    blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n}", "let img0;\nlet img1;\n\nfunction preload() {\n    img0 = loadImage('assets/rockies.jpg');\n    img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n    background(img0);\n    image(img1, 0, 0);\n    blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n}", "let img0;\nlet img1;\n\nfunction preload() {\n    img0 = loadImage('assets/rockies.jpg');\n    img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n    background(img0);\n    image(img1, 0, 0);\n    blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n}"],
      "href": "#/p5/blend",
      "syntax": "blend(srcImage, sx, sy, sw, sh, dx, dy, dw, dh, blendMode)",
      "parameters": [{
        "paramType": "p5.Image",
        "paramDescription": "source image",
        "paramName": "srcImage"
      }, {
        "paramType": "Integer",
        "paramDescription": "X coordinate of the source's upper left corner",
        "paramName": "sx"
      }, {
        "paramType": "Integer",
        "paramDescription": "Y coordinate of the source's upper left corner",
        "paramName": "sy"
      }, {
        "paramType": "Integer",
        "paramDescription": "source image width",
        "paramName": "sw"
      }, {
        "paramType": "Integer",
        "paramDescription": "source image height",
        "paramName": "sh"
      }, {
        "paramType": "Integer",
        "paramDescription": "X coordinate of the destination's upper left corner",
        "paramName": "dx"
      }, {
        "paramType": "Integer",
        "paramDescription": "Y coordinate of the destination's upper left corner",
        "paramName": "dy"
      }, {
        "paramType": "Integer",
        "paramDescription": "destination image width",
        "paramName": "dw"
      }, {
        "paramType": "Integer",
        "paramDescription": "destination image height",
        "paramName": "dh"
      }, {
        "paramType": "Constant",
        "paramDescription": "the blend mode. either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.",
        "paramName": "blendMode"
      }]
    }, {
      "label": "copy()",
      "description": "Copies a region of the canvas to another region of the canvas\nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    background(img);\n    copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\n    stroke(255);\n    noFill();\n\n    // Rectangle shows area being copied \n\n    rect(7, 22, 10, 10);\n}"],
      "href": "#/p5/copy",
      "syntax": "copy(srcImage, sx, sy, sw, sh, dx, dy, dw, dh)",
      "parameters": [{
        "paramType": "p5.Image|p5.Element",
        "paramDescription": "source image",
        "paramName": "srcImage"
      }, {
        "paramType": "Integer",
        "paramDescription": "X coordinate of the source's upper left corner",
        "paramName": "sx"
      }, {
        "paramType": "Integer",
        "paramDescription": "Y coordinate of the source's upper left corner",
        "paramName": "sy"
      }, {
        "paramType": "Integer",
        "paramDescription": "source image width",
        "paramName": "sw"
      }, {
        "paramType": "Integer",
        "paramDescription": "source image height",
        "paramName": "sh"
      }, {
        "paramType": "Integer",
        "paramDescription": "X coordinate of the destination's upper left corner",
        "paramName": "dx"
      }, {
        "paramType": "Integer",
        "paramDescription": "Y coordinate of the destination's upper left corner",
        "paramName": "dy"
      }, {
        "paramType": "Integer",
        "paramDescription": "destination image width",
        "paramName": "dw"
      }, {
        "paramType": "Integer",
        "paramDescription": "destination image height",
        "paramName": "dh"
      }]
    }, {
      "label": "filter()",
      "description": "Applies a filter to the canvas. The presets options are:",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(THRESHOLD);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(GRAY);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(OPAQUE);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(INVERT);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(POSTERIZE, 3);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(DILATE);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(BLUR, 3);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    filter(ERODE);\n}"],
      "href": "#/p5/filter",
      "syntax": "filter(filterType, [filterParam])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. See Filters.js for docs on each available filter",
        "paramName": "filterType"
      }, {
        "paramType": "Number",
        "paramDescription": "an optional parameter unique to each filter, see above",
        "paramName": "filterParam"
      }]
    }, {
      "label": "get()",
      "description": "Get a region of pixels, or a single pixel, from the canvas.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    let c = get();\n    image(c, width / 2, 0);\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0);\n    let c = get(50, 90);\n    fill(c);\n    noStroke();\n    rect(25, 25, 50, 50);\n}"],
      "href": "#/p5/get",
      "syntax": "get(x, y, w, h)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the pixel",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the pixel",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "width of the section to be returned",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of the section to be returned",
        "paramName": "h"
      }]
    }, {
      "label": "loadPixels()",
      "description": "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\" class=\"code\">pixels[]</a> array. This\nfunction must always be called before reading from or writing to <a href=\"#/p5/pixels\" class=\"code\">pixels[]</a>.\nNote that only changes made with <a href=\"#/p5/set\" class=\"code\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\" class=\"code\">pixels[]</a>\nwill occur.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0, width, height);\n    let d = pixelDensity();\n    let halfImage = 4 * (width * d) * (height * d / 2);\n    loadPixels();\n    for (let i = 0; i < halfImage; i++) {\n        pixels[i + halfImage] = pixels[i];\n    }\n    updatePixels();\n}"],
      "href": "#/p5/loadPixels",
      "syntax": "loadPixels()",
      "parameters": []
    }, {
      "label": "set()",
      "description": "Changes the color of any pixel, or writes an image directly to the\ndisplay window.\nThe x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a <a href=\"#/p5.Color\" class=\"code\">p5.Color</a> object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\" class=\"code\">imageMode()</a>.",
      "examples": ["let black = color(0);\nset(30, 20, black);\nset(85, 20, black);\nset(85, 75, black);\nset(30, 75, black);\nupdatePixels();", "for (let i = 30; i < width - 15; i++) {\n    for (let j = 20; j < height - 25; j++) {\n        let c = color(204 - j, 153 - i, 0);\n        set(i, j, c);\n    }\n}\nupdatePixels();", "let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    set(0, 0, img);\n    updatePixels();\n    line(0, 0, width, height);\n    line(0, height, width, 0);\n}"],
      "href": "#/p5/set",
      "syntax": "set(x, y, c)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the pixel",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the pixel",
        "paramName": "y"
      }, {
        "paramType": "Number|Number[]|Object",
        "paramDescription": "insert a grayscale value | a pixel array | a p5.Color object | a p5.Image to copy",
        "paramName": "c"
      }]
    }, {
      "label": "updatePixels()",
      "description": "Updates the display window with the data in the <a href=\"#/p5/pixels\" class=\"code\">pixels[]</a> array.\nUse in conjunction with <a href=\"#/p5/loadPixels\" class=\"code\">loadPixels()</a>. If you're only reading pixels from\nthe array, there's no need to call <a href=\"#/p5/updatePixels\" class=\"code\">updatePixels()</a> — updating is only\nnecessary to apply changes. <a href=\"#/p5/updatePixels\" class=\"code\">updatePixels()</a> should be called anytime the\npixels array is manipulated or <a href=\"#/p5/set\" class=\"code\">set()</a> is called, and only changes made with\n<a href=\"#/p5/set\" class=\"code\">set()</a> or direct changes to <a href=\"#/p5/pixels\" class=\"code\">pixels[]</a> will occur.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n    image(img, 0, 0, width, height);\n    let d = pixelDensity();\n    let halfImage = 4 * (width * d) * (height * d / 2);\n    loadPixels();\n    for (let i = 0; i < halfImage; i++) {\n        pixels[i + halfImage] = pixels[i];\n    }\n    updatePixels();\n}"],
      "href": "#/p5/updatePixels",
      "syntax": "updatePixels([x], [y], [w], [h])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the upper-left corner of region to update",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the upper-left corner of region to update",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "width of region to update",
        "paramName": "w"
      }, {
        "paramType": "Number",
        "paramDescription": "height of region to update",
        "paramName": "h"
      }]
    }]
  }]
}, {
  "groupName": "IO",
  "subgroups": [{
    "subgroupName": "Input",
    "tokens": [{
      "label": "loadJSON()",
      "description": "Loads a JSON file from a file or a URL, and returns an Object.\nNote that even if the JSON file contains an Array, an Object will be\nreturned with index numbers as keys.",
      "examples": ["// Examples use USGS Earthquake API: \n\n\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods \n\nlet earthquakes;\n\nfunction preload() {\n\n    // Get the most recent earthquake in the database \n\n    let url =\n        'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n        'summary/all_day.geojson';\n    earthquakes = loadJSON(url);\n}\n\nfunction setup() {\n    noLoop();\n}\n\nfunction draw() {\n    background(200);\n\n    // Get the magnitude and name of the earthquake out of the loaded JSON \n\n    let earthquakeMag = earthquakes.features[0].properties.mag;\n    let earthquakeName = earthquakes.features[0].properties.place;\n    ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n    textAlign(CENTER);\n    text(earthquakeName, 0, height - 30, width, 30);\n    describe(`50×50 ellipse that changes from black to white\n    depending on the current humidity`);\n}", "function setup() {\n    noLoop();\n    let url =\n        'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n        'summary/all_day.geojson';\n    loadJSON(url, drawEarthquake);\n}\n\nfunction draw() {\n    background(200);\n    describe(`50×50 ellipse that changes from black to white\n    depending on the current humidity`);\n}\n\nfunction drawEarthquake(earthquakes) {\n\n    // Get the magnitude and name of the earthquake out of the loaded JSON \n\n    let earthquakeMag = earthquakes.features[0].properties.mag;\n    let earthquakeName = earthquakes.features[0].properties.place;\n    ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n    textAlign(CENTER);\n    text(earthquakeName, 0, height - 30, width, 30);\n}"],
      "href": "#/p5/loadJSON",
      "syntax": "loadJSON(path, [jsonpOptions], [datatype], [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "path"
      }, {
        "paramType": "Object",
        "paramDescription": "options object for jsonp related settings",
        "paramName": "jsonpOptions"
      }, {
        "paramType": "String",
        "paramDescription": "\"json\" or \"jsonp\"",
        "paramName": "datatype"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadJSON() completes, data is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "loadStrings()",
      "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.",
      "examples": ["let result;\n\nfunction preload() {\n    result = loadStrings('assets/test.txt');\n}\n\nfunction setup() {\n    background(200);\n    text(random(result), 10, 10, 80, 80);\n    describe(`randomly generated text from a file,\n    for example \"i smell like butter\"`);\n}", "function setup() {\n    loadStrings('assets/test.txt', pickString);\n    describe(`randomly generated text from a file,\n    for example \"i have three feet\"`);\n}\n\nfunction pickString(result) {\n    background(200);\n    text(random(result), 10, 10, 80, 80);\n}"],
      "href": "#/p5/loadStrings",
      "syntax": "loadStrings(filename, [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "filename"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadStrings() completes, Array is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "loadTable()",
      "description": "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\" class=\"code\">p5.Table</a> object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.",
      "examples": ["// Given the following CSV file called \"mammals.csv\" \n\n\n// located in the project's \"assets\" folder: \n\n\n// \n\n\n// id,species,name \n\n\n// 0,Capra hircus,Goat \n\n\n// 1,Panthera pardus,Leopard \n\n\n// 2,Equus zebra,Zebra \n\n\nlet table;\n\nfunction preload() {\n\n    //my table is comma separated value \"csv\" \n\n\n    //and has a header specifying the columns labels \n\n    table = loadTable('assets/mammals.csv', 'csv', 'header');\n\n    //the file can be remote \n\n\n    //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\", \n\n\n    //                  \"csv\", \"header\"); \n\n}\n\nfunction setup() {\n\n    //count the columns \n\n    print(table.getRowCount() + ' total rows in table');\n    print(table.getColumnCount() + ' total columns in table');\n\n    print(table.getColumn('name'));\n\n    //[\"Goat\", \"Leopard\", \"Zebra\"] \n\n\n\n    //cycle through the table \n\n    for (let r = 0; r < table.getRowCount(); r++)\n        for (let c = 0; c < table.getColumnCount(); c++) {\n            print(table.getString(r, c));\n        }\n    describe(`randomly generated text from a file,\n    for example \"i smell like butter\"`);\n}"],
      "href": "#/p5/loadTable",
      "syntax": "loadTable(filename, [extension], [header], [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or URL to load",
        "paramName": "filename"
      }, {
        "paramType": "String",
        "paramDescription": "parse the table by comma-separated values \"csv\", semicolon-separated values \"ssv\", or tab-separated values \"tsv\"",
        "paramName": "extension"
      }, {
        "paramType": "String",
        "paramDescription": "\"header\" to indicate table has header row",
        "paramName": "header"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadTable() completes. On success, the Table object is passed in as the first argument.",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "loadXML()",
      "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.",
      "examples": ["// The following short XML file called \"mammals.xml\" is parsed \n\n\n// in the code below. \n\n\n// \n\n\n// \n\n\n// <mammals> \n\n\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal> \n\n\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal> \n\n\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal> \n\n\n// </mammals> \n\n\nlet xml;\n\nfunction preload() {\n    xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n    let children = xml.getChildren('animal');\n\n    for (let i = 0; i < children.length; i++) {\n        let id = children[i].getNum('id');\n        let coloring = children[i].getString('species');\n        let name = children[i].getContent();\n        print(id + ', ' + coloring + ', ' + name);\n    }\n    describe('no image displayed');\n}\n\n\n// Sketch prints: \n\n\n// 0, Capra hircus, Goat \n\n\n// 1, Panthera pardus, Leopard \n\n\n// 2, Equus zebra, Zebra "],
      "href": "#/p5/loadXML",
      "syntax": "loadXML(filename, [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or URL to load",
        "paramName": "filename"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadXML() completes, XML object is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "loadBytes()",
      "description": "This method is suitable for fetching files up to size of 64MB.",
      "examples": ["let data;\n\nfunction preload() {\n    data = loadBytes('assets/mammals.xml');\n}\n\nfunction setup() {\n    for (let i = 0; i < 5; i++) {\n        console.log(data.bytes[i].toString(16));\n    }\n    describe('no image displayed');\n}"],
      "href": "#/p5/loadBytes",
      "syntax": "loadBytes(file, [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or URL to load",
        "paramName": "file"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadBytes() completes",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "httpGet()",
      "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\na Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\nwhich can be used to initialize typed arrays (such as Uint8Array).",
      "examples": ["// Examples use USGS Earthquake API: \n\n\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods \n\nlet earthquakes;\n\nfunction preload() {\n\n    // Get the most recent earthquake in the database \n\n    let url =\n        'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\n        'format=geojson&limit=1&orderby=time';\n    httpGet(url, 'jsonp', false, function(response) {\n\n        // when the HTTP request completes, populate the variable that holds the \n\n\n        // earthquake data used in the visualization. \n\n        earthquakes = response;\n    });\n}\n\nfunction draw() {\n    if (!earthquakes) {\n\n        // Wait until the earthquake data has loaded before drawing. \n\n        return;\n    }\n    background(200);\n\n    // Get the magnitude and name of the earthquake out of the loaded JSON \n\n    let earthquakeMag = earthquakes.features[0].properties.mag;\n    let earthquakeName = earthquakes.features[0].properties.place;\n    ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n    textAlign(CENTER);\n    text(earthquakeName, 0, height - 30, width, 30);\n    noLoop();\n}"],
      "href": "#/p5/httpGet",
      "syntax": "httpGet(path, [datatype], [data], [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "path"
      }, {
        "paramType": "String",
        "paramDescription": "\"json\", \"jsonp\", \"binary\", \"arrayBuffer\", \"xml\", or \"text\"",
        "paramName": "datatype"
      }, {
        "paramType": "Object|Boolean",
        "paramDescription": "param data passed sent with request",
        "paramName": "data"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after httpGet() completes, data is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "httpPost()",
      "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'POST')</code>.",
      "examples": ["// Examples use jsonplaceholder.typicode.com for a Mock Data API \n\n\nlet url = 'https://jsonplaceholder.typicode.com/posts';\nlet postData = {\n    userId: 1,\n    title: 'p5 Clicked!',\n    body: 'p5.js is very cool.'\n};\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(200);\n}\n\nfunction mousePressed() {\n    httpPost(url, 'json', postData, function(result) {\n        strokeWeight(2);\n        text(result.body, mouseX, mouseY);\n    });\n}", "let url = 'ttps://invalidURL';\n// A bad URL that will cause errors \n\nlet postData = {\n    title: 'p5 Clicked!',\n    body: 'p5.js is very cool.'\n};\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(200);\n}\n\nfunction mousePressed() {\n    httpPost(\n        url,\n        'json',\n        postData,\n        function(result) {\n\n            // ... won't be called \n\n        },\n        function(error) {\n            strokeWeight(2);\n            text(error.toString(), mouseX, mouseY);\n        }\n    );\n}"],
      "href": "#/p5/httpPost",
      "syntax": "httpPost(path, [datatype], [data], [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "path"
      }, {
        "paramType": "String",
        "paramDescription": "\"json\", \"jsonp\", \"xml\", or \"text\". If omitted, httpPost() will guess.",
        "paramName": "datatype"
      }, {
        "paramType": "Object|Boolean",
        "paramDescription": "param data passed sent with request",
        "paramName": "data"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after httpPost() completes, data is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "httpDo()",
      "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.<br><br>\nFor more advanced use, you may also pass in the path as the first argument\nand a object as the second argument, the signature follows the one specified\nin the Fetch API specification.\nThis method is suitable for fetching files up to size of 64MB when \"GET\" is used.",
      "examples": ["// Examples use USGS Earthquake API: \n\n\n// https://earthquake.usgs.gov/fdsnws/event/1/#methods \n\n\n\n// displays an animation of all USGS earthquakes \n\nlet earthquakes;\nlet eqFeatureIndex = 0;\n\nfunction preload() {\n    let url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n    httpDo(\n        url, {\n            method: 'GET',\n\n            // Other Request options, like special headers for apis \n\n            headers: {\n                authorization: 'Bearer secretKey'\n            }\n        },\n        function(res) {\n            earthquakes = res;\n        }\n    );\n}\n\nfunction draw() {\n\n    // wait until the data is loaded \n\n    if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\n        return;\n    }\n    clear();\n\n    let feature = earthquakes.features[eqFeatureIndex];\n    let mag = feature.properties.mag;\n    let rad = mag / 11 * ((width + height) / 2);\n    fill(255, 0, 0, 100);\n    ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\n\n    if (eqFeatureIndex >= earthquakes.features.length) {\n        eqFeatureIndex = 0;\n    } else {\n        eqFeatureIndex + = 1;\n    }\n}"],
      "href": "#/p5/httpDo",
      "syntax": "httpDo(path, [method], [datatype], [data], [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "path"
      }, {
        "paramType": "String",
        "paramDescription": "either \"GET\", \"POST\", or \"PUT\", defaults to \"GET\"",
        "paramName": "method"
      }, {
        "paramType": "String",
        "paramDescription": "\"json\", \"jsonp\", \"xml\", or \"text\"",
        "paramName": "datatype"
      }, {
        "paramType": "Object",
        "paramDescription": "param data passed sent with request",
        "paramName": "data"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after httpGet() completes, data is passed in as first argument",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if there is an error, response is passed in as first argument",
        "paramName": "errorCallback"
      }, {
        "paramType": "Object",
        "paramDescription": "Request object options as documented in the \"fetch\" API reference",
        "paramName": "options"
      }]
    }, {
      "label": "p5.XML",
      "description": "XML is a representation of an XML object, able to parse XML code. Use\n<a href=\"#/p5/loadXML\" class=\"code\">loadXML()</a> to load external XML files and create XML objects.",
      "examples": ["// The following short XML file called \"mammals.xml\" is parsed \n\n\n// in the code below. \n\n\n// \n\n\n// \n\n\n// <mammals> \n\n\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal> \n\n\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal> \n\n\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal> \n\n\n// </mammals> \n\n\nlet xml;\n\nfunction preload() {\n    xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n    let children = xml.getChildren('animal');\n\n    for (let i = 0; i < children.length; i++) {\n        let id = children[i].getNum('id');\n        let coloring = children[i].getString('species');\n        let name = children[i].getContent();\n        print(id + ', ' + coloring + ', ' + name);\n    }\n\n    describe('no image displayed');\n}\n\n\n// Sketch prints: \n\n\n// 0, Capra hircus, Goat \n\n\n// 1, Panthera pardus, Leopard \n\n\n// 2, Equus zebra, Zebra "],
      "href": "#/p5.XML",
      "syntax": "new p5.XML()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Output",
    "tokens": [{
      "label": "createWriter()",
      "description": "",
      "examples": ["function setup() {\n    createCanvas(100, 100);\n    background(200);\n    text('click here to save', 10, 10, 70, 80);\n}\n\nfunction mousePressed() {\n    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n        const writer = createWriter('squares.txt');\n        for (let i = 0; i < 10; i++) {\n            writer.print(i * i);\n        }\n        writer.close();\n        writer.clear();\n    }\n}"],
      "href": "#/p5/createWriter",
      "syntax": "createWriter(name, [extension])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file to be created",
        "paramName": "name"
      }, {
        "paramType": "String",
        "paramDescription": "",
        "paramName": "extension"
      }]
    }, {
      "label": "p5.PrintWriter",
      "description": "",
      "examples": [],
      "href": "#/p5.PrintWriter",
      "syntax": "",
      "parameters": []
    }, {
      "label": "save()",
      "description": "Saves a given element(image, text, json, csv, wav, or html) to the client's\ncomputer. The first parameter can be a pointer to element we want to save.\nThe element can be one of <a href=\"#/p5.Element\" class=\"code\">p5.Element</a>,an Array of\nStrings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\" class=\"code\">p5.Table\n</a>, a <a href=\"#/p5.Image\" class=\"code\">p5.Image</a>, or a p5.SoundFile (requires\np5.sound). The second parameter is a filename (including extension).The\nthird parameter is for options specific to this type of object. This method\nwill save a file that fits the given parameters.\nIf it is called without specifying an element, by default it will save the\nwhole canvas as an image file. You can optionally specify a filename as\nthe first parameter in such a case.\n<strong>Note that it is not recommended to\ncall this method within draw, as it will open a new save dialog on every\nrender.</strong>",
      "examples": ["// Saves the canvas as an image \n\ncnv = createCanvas(300, 300);\nsave(cnv, 'myCanvas.jpg');\n\n\n// Saves the canvas as an image by default \n\nsave('myCanvas.jpg');\ndescribe('An example for saving a canvas as an image.');", "// Saves p5.Image as an image \n\nimg = createImage(10, 10);\nsave(img, 'myImage.png');\ndescribe('An example for saving a p5.Image element as an image.');", "// Saves p5.Renderer object as an image \n\nobj = createGraphics(100, 100);\nsave(obj, 'myObject.png');\ndescribe('An example for saving a p5.Renderer element.');", "let myTable = new p5.Table();\n\n// Saves table as html file \n\nsave(myTable, 'myTable.html');\n\n\n// Comma Separated Values \n\nsave(myTable, 'myTable.csv');\n\n\n// Tab Separated Values \n\nsave(myTable, 'myTable.tsv');\n\ndescribe(`An example showing how to save a table in formats of\nHTML, CSV and TSV.`);", "let myJSON = {\n    a: 1,\n    b: true\n};\n\n\n// Saves pretty JSON \n\nsave(myJSON, 'my.json');\n\n\n// Optimizes JSON filesize \n\nsave(myJSON, 'my.json', true);\n\ndescribe('An example for saving JSON to a txt file with some extra arguments.');", "// Saves array of strings to text file with line breaks after each item \n\nlet arrayOfStrings = ['a', 'b'];\nsave(arrayOfStrings, 'my.txt');\ndescribe(`An example for saving an array of strings to text file\nwith line breaks.`);"],
      "href": "#/p5/save",
      "syntax": "save([objectOrFilename], [filename], [options])",
      "parameters": [{
        "paramType": "Object|String",
        "paramDescription": "If filename is provided, will save canvas as an image with either png or jpg extension depending on the filename. If object is provided, will save depending on the object and filename (see examples above).",
        "paramName": "objectOrFilename"
      }, {
        "paramType": "String",
        "paramDescription": "If an object is provided as the first parameter, then the second parameter indicates the filename, and should include an appropriate file extension (see examples above).",
        "paramName": "filename"
      }, {
        "paramType": "Boolean|String",
        "paramDescription": "Additional options depend on filetype. For example, when saving JSON, true indicates that the output will be optimized for filesize, rather than readability.",
        "paramName": "options"
      }]
    }, {
      "label": "saveJSON()",
      "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
      "examples": ["let json = {};\n// new  JSON Object \n\n\njson.id = 0;\njson.species = 'Panthera leo';\njson.name = 'Lion';\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(200);\n    text('click here to save', 10, 10, 70, 80);\n    describe('no image displayed');\n}\n\nfunction mousePressed() {\n    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n        saveJSON(json, 'lion.json');\n    }\n}\n\n\n// saves the following to a file called \"lion.json\": \n\n\n// { \n\n\n//   \"id\": 0, \n\n\n//   \"species\": \"Panthera leo\", \n\n\n//   \"name\": \"Lion\" \n\n\n// } "],
      "href": "#/p5/saveJSON",
      "syntax": "saveJSON(json, filename, [optimize])",
      "parameters": [{
        "paramType": "Array|Object",
        "paramDescription": "",
        "paramName": "json"
      }, {
        "paramType": "String",
        "paramDescription": "",
        "paramName": "filename"
      }, {
        "paramType": "Boolean",
        "paramDescription": "If true, removes line breaks and spaces from the output file to optimize filesize (but not readability).",
        "paramName": "optimize"
      }]
    }, {
      "label": "saveStrings()",
      "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
      "examples": ["let words = 'apple bear cat dog';\n\n\n// .split() outputs an Array \n\nlet list = split(words, ' ');\n\nfunction setup() {\n    createCanvas(100, 100);\n    background(200);\n    text('click here to save', 10, 10, 70, 80);\n    describe('no image displayed');\n}\n\nfunction mousePressed() {\n    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n        saveStrings(list, 'nouns.txt');\n    }\n}\n\n\n// Saves the following to a file called 'nouns.txt': \n\n\n// \n\n\n// apple \n\n\n// bear \n\n\n// cat \n\n\n// dog "],
      "href": "#/p5/saveStrings",
      "syntax": "saveStrings(list, filename, [extension], [isCRLF])",
      "parameters": [{
        "paramType": "String[]",
        "paramDescription": "string array to be written",
        "paramName": "list"
      }, {
        "paramType": "String",
        "paramDescription": "filename for output",
        "paramName": "filename"
      }, {
        "paramType": "String",
        "paramDescription": "the filename's extension",
        "paramName": "extension"
      }, {
        "paramType": "Boolean",
        "paramDescription": "if true, change line-break to CRLF",
        "paramName": "isCRLF"
      }]
    }, {
      "label": "saveTable()",
      "description": "Writes the contents of a <a href=\"#/p5.Table\" class=\"code\">Table</a> object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
      "examples": ["let table;\n\nfunction setup() {\n    table = new p5.Table();\n\n    table.addColumn('id');\n    table.addColumn('species');\n    table.addColumn('name');\n\n    let newRow = table.addRow();\n    newRow.setNum('id', table.getRowCount() - 1);\n    newRow.setString('species', 'Panthera leo');\n    newRow.setString('name', 'Lion');\n\n\n    // To save, un-comment next line then click 'run' \n\n\n    // saveTable(table, 'new.csv'); \n\n\n    describe('no image displayed');\n}\n\n\n// Saves the following to a file called 'new.csv': \n\n\n// id,species,name \n\n\n// 0,Panthera leo,Lion "],
      "href": "#/p5/saveTable",
      "syntax": "saveTable(Table, filename, [options])",
      "parameters": [{
        "paramType": "p5.Table",
        "paramDescription": "the Table object to save to a file",
        "paramName": "Table"
      }, {
        "paramType": "String",
        "paramDescription": "the filename to which the Table should be saved",
        "paramName": "filename"
      }, {
        "paramType": "String",
        "paramDescription": "can be one of \"tsv\", \"csv\", or \"html\"",
        "paramName": "options"
      }]
    }]
  }, {
    "subgroupName": "Table",
    "tokens": [{
      "label": "p5.Table",
      "description": "<a href=\"#/p5.Table\" class=\"code\">Table</a> objects store data with multiple rows and columns, much\nlike in a traditional spreadsheet. Tables can be generated from\nscratch, dynamically, or using data from an existing file.",
      "examples": [],
      "href": "#/p5.Table",
      "syntax": "new p5.Table([rows])",
      "parameters": [{
        "paramType": "p5.TableRow[]",
        "paramDescription": "An array of p5.TableRow objects",
        "paramName": "rows"
      }]
    }, {
      "label": "p5.TableRow",
      "description": "A TableRow object represents a single row of data values,\nstored in columns, from a table.",
      "examples": [],
      "href": "#/p5.TableRow",
      "syntax": "new p5.TableRow([str], [separator])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "optional: populate the row with a string of values, separated by the separator",
        "paramName": "str"
      }, {
        "paramType": "String",
        "paramDescription": "comma separated values (csv) by default",
        "paramName": "separator"
      }]
    }]
  }, {
    "subgroupName": "Time &amp; Date",
    "tokens": [{
      "label": "day()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\" class=\"code\">day()</a> function\nreturns the current day as a value from 1 - 31.",
      "examples": ["let d = day();\ntext('Current day: \\n' + d, 5, 50);"],
      "href": "#/p5/day",
      "syntax": "day()",
      "parameters": []
    }, {
      "label": "hour()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\" class=\"code\">hour()</a> function\nreturns the current hour as a value from 0 - 23.",
      "examples": ["let h = hour();\ntext('Current hour:\\n' + h, 5, 50);"],
      "href": "#/p5/hour",
      "syntax": "hour()",
      "parameters": []
    }, {
      "label": "minute()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\" class=\"code\">minute()</a> function\nreturns the current minute as a value from 0 - 59.",
      "examples": ["let m = minute();\ntext('Current minute: \\n' + m, 5, 50);"],
      "href": "#/p5/minute",
      "syntax": "minute()",
      "parameters": []
    }, {
      "label": "millis()",
      "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the sketch (when <code>setup()</code> is called). This information is often\nused for timing events and animation sequences.",
      "examples": ["let millisecond = millis();\ntext('Milliseconds \\nrunning: \\n' + millisecond, 5, 40);"],
      "href": "#/p5/millis",
      "syntax": "millis()",
      "parameters": []
    }, {
      "label": "month()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\" class=\"code\">month()</a> function\nreturns the current month as a value from 1 - 12.",
      "examples": ["let m = month();\ntext('Current month: \\n' + m, 5, 50);"],
      "href": "#/p5/month",
      "syntax": "month()",
      "parameters": []
    }, {
      "label": "second()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\" class=\"code\">second()</a> function\nreturns the current second as a value from 0 - 59.",
      "examples": ["let s = second();\ntext('Current second: \\n' + s, 5, 50);"],
      "href": "#/p5/second",
      "syntax": "second()",
      "parameters": []
    }, {
      "label": "year()",
      "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\" class=\"code\">year()</a> function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
      "examples": ["let y = year();\ntext('Current year: \\n' + y, 5, 50);"],
      "href": "#/p5/year",
      "syntax": "year()",
      "parameters": []
    }]
  }]
}, {
  "groupName": "Math",
  "subgroups": [{
    "subgroupName": "Calculation",
    "tokens": [{
      "label": "abs()",
      "description": "Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive.",
      "examples": ["function setup() {\n    let x = -3;\n    let y = abs(x);\n\n    print(x);\n    // -3 \n\n    print(y);\n    // 3 \n\n\n    describe('no image displayed');\n}"],
      "href": "#/p5/abs",
      "syntax": "abs(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to compute",
        "paramName": "n"
      }]
    }, {
      "label": "ceil()",
      "description": "Calculates the closest int value that is greater than or equal to the\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\nreturns the value 10.",
      "examples": ["function draw() {\n    background(200);\n\n    // map, mouseX between 0 and 5. \n\n    let ax = map(mouseX, 0, 100, 0, 5);\n    let ay = 66;\n\n\n    //Get the ceiling of the mapped number. \n\n    let bx = ceil(map(mouseX, 0, 100, 0, 5));\n    let by = 33;\n\n\n    // Multiply the mapped numbers by 20 to more easily \n\n\n    // see the changes. \n\n    stroke(0);\n    fill(0);\n    line(0, ay, ax * 20, ay);\n    line(0, by, bx * 20, by);\n\n\n    // Reformat the float returned by map and draw it. \n\n    noStroke();\n    text(nfc(ax, 2), ax, ay - 5);\n    text(nfc(bx, 1), bx, by - 5);\n\n    describe(`2 horizontal lines & number sets. increase with\n    mouse x. bottom to 2 decimals`);\n}"],
      "href": "#/p5/ceil",
      "syntax": "ceil(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to round up",
        "paramName": "n"
      }]
    }, {
      "label": "constrain()",
      "description": "Constrains a value between a minimum and maximum value.",
      "examples": ["function draw() {\n    background(200);\n\n    let leftWall = 25;\n    let rightWall = 75;\n\n\n    // xm is just the mouseX, while \n\n\n    // xc is the mouseX, but constrained \n\n\n    // between the leftWall and rightWall! \n\n    let xm = mouseX;\n    let xc = constrain(mouseX, leftWall, rightWall);\n\n\n    // Draw the walls. \n\n    stroke(150);\n    line(leftWall, 0, leftWall, height);\n    line(rightWall, 0, rightWall, height);\n\n\n    // Draw xm and xc as circles. \n\n    noStroke();\n    fill(150);\n    ellipse(xm, 33, 9, 9);\n    // Not Constrained \n\n    fill(0);\n    ellipse(xc, 66, 9, 9);\n    // Constrained \n\n\n    describe(`2 vertical lines. 2 ellipses move with mouse X,\n    1 does not move past lines`);\n}"],
      "href": "#/p5/constrain",
      "syntax": "constrain(n, low, high)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to constrain",
        "paramName": "n"
      }, {
        "paramType": "Number",
        "paramDescription": "minimum limit",
        "paramName": "low"
      }, {
        "paramType": "Number",
        "paramDescription": "maximum limit",
        "paramName": "high"
      }]
    }, {
      "label": "dist()",
      "description": "Calculates the distance between two points, in either two or three dimensions.\nIf you looking for distance between two vectors see <a herf=\"#/p5.Vector/dist\">p5.Vector.dist()</a>",
      "examples": ["// Move your mouse inside the canvas to see the \n\n\n// change in distance between two points! \n\nfunction draw() {\n    background(200);\n    fill(0);\n\n    let x1 = 10;\n    let y1 = 90;\n    let x2 = mouseX;\n    let y2 = mouseY;\n\n    line(x1, y1, x2, y2);\n    ellipse(x1, y1, 7, 7);\n    ellipse(x2, y2, 7, 7);\n\n\n    // d is the length of the line \n\n\n    // the distance from point 1 to point 2. \n\n    let d = dist(x1, y1, x2, y2);\n\n\n    // Let's write d along the line we are drawing! \n\n    push();\n    translate((x1 + x2) / 2, (y1 + y2) / 2);\n    rotate(atan2(y2 - y1, x2 - x1));\n    text(nfc(d, 1), 0, -5);\n    pop();\n\n    // Fancy! \n\n\n    describe(`2 ellipses joined by line. 1 ellipse moves with\n    mouse X&Y. Distance displayed.`);\n}"],
      "href": "#/p5/dist",
      "syntax": "dist(x1, y1, x2, y2)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate of the first point",
        "paramName": "x1"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the first point",
        "paramName": "y1"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate of the second point",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of the second point",
        "paramName": "y2"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate of the first point",
        "paramName": "z1"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate of the second point",
        "paramName": "z2"
      }]
    }, {
      "label": "exp()",
      "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
      "examples": ["function draw() {\n    background(200);\n\n\n    // Compute the exp() function with a value between 0 and 2 \n\n    let xValue = map(mouseX, 0, width, 0, 2);\n    let yValue = exp(xValue);\n\n    let y = map(yValue, 0, 8, height, 0);\n\n    let legend = 'exp (' + nfc(xValue, 3) + ')\\n= ' + nf(yValue, 1, 4);\n    stroke(150);\n    line(mouseX, y, mouseX, height);\n    fill(0);\n    text(legend, 5, 15);\n    noStroke();\n    ellipse(mouseX, y, 7, 7);\n\n\n    // Draw the exp(x) curve, \n\n\n    // over the domain of x from 0 to 2 \n\n    noFill();\n    stroke(0);\n    beginShape();\n    for (let x = 0; x < width; x++) {\n        xValue = map(x, 0, width, 0, 2);\n        yValue = exp(xValue);\n        y = map(yValue, 0, 8, height, 0);\n        vertex(x, y);\n    }\n\n    endShape();\n    line(0, 0, 0, height);\n    line(0, height - 1, width, height - 1);\n\n    describe('ellipse moves along a curve with mouse x. e^n displayed.');\n}"],
      "href": "#/p5/exp",
      "syntax": "exp(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "exponent to raise",
        "paramName": "n"
      }]
    }, {
      "label": "floor()",
      "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
      "examples": ["function draw() {\n    background(200);\n\n    //map, mouseX between 0 and 5. \n\n    let ax = map(mouseX, 0, 100, 0, 5);\n    let ay = 66;\n\n\n    //Get the floor of the mapped number. \n\n    let bx = floor(map(mouseX, 0, 100, 0, 5));\n    let by = 33;\n\n\n    // Multiply the mapped numbers by 20 to more easily \n\n\n    // see the changes. \n\n    stroke(0);\n    fill(0);\n    line(0, ay, ax * 20, ay);\n    line(0, by, bx * 20, by);\n\n\n    // Reformat the float returned by map and draw it. \n\n    noStroke();\n    text(nfc(ax, 2), ax, ay - 5);\n    text(nfc(bx, 1), bx, by - 5);\n\n    describe(`2 horizontal lines & number sets.\n    increase with mouse x. bottom to 2 decimals`);\n}"],
      "href": "#/p5/floor",
      "syntax": "floor(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to round down",
        "paramName": "n"
      }]
    }, {
      "label": "lerp()",
      "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nis equal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, and 1.0 is equal to the second point. If the\nvalue of amt is more than 1.0 or less than 0.0, the number will be\ncalculated accordingly in the ratio of the two given numbers. The lerp()\nfunction is convenient for creating motion along a straight\npath and for drawing dotted lines.",
      "examples": ["function setup() {\n    background(200);\n    let a = 20;\n    let b = 80;\n    let c = lerp(a, b, 0.2);\n    let d = lerp(a, b, 0.5);\n    let e = lerp(a, b, 0.8);\n\n    let y = 50;\n\n    strokeWeight(5);\n    stroke(0);\n    // Draw the original points in black \n\n    point(a, y);\n    point(b, y);\n\n    stroke(100);\n    // Draw the lerp points in gray \n\n    point(c, y);\n    point(d, y);\n    point(e, y);\n\n    describe(`5 points horizontally staggered mid-canvas.\n    mid 3 are grey, outer black`);\n}"],
      "href": "#/p5/lerp",
      "syntax": "lerp(start, stop, amt)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "first value",
        "paramName": "start"
      }, {
        "paramType": "Number",
        "paramDescription": "second value",
        "paramName": "stop"
      }, {
        "paramType": "Number",
        "paramDescription": "number",
        "paramName": "amt"
      }]
    }, {
      "label": "log()",
      "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
      "examples": ["function draw() {\n    background(200);\n    let maxX = 2.8;\n    let maxY = 1.5;\n\n\n    // Compute the natural log of a value between 0 and maxX \n\n    let xValue = map(mouseX, 0, width, 0, maxX);\n    let yValue, y;\n    if (xValue > 0) {\n\n        // Cannot take the log of a negative number. \n\n        yValue = log(xValue);\n        y = map(yValue, -maxY, maxY, height, 0);\n\n\n        // Display the calculation occurring. \n\n        let legend = 'log(' + nf(xValue, 1, 2) + ')\\n= ' + nf(yValue, 1, 3);\n        stroke(150);\n        line(mouseX, y, mouseX, height);\n        fill(0);\n        text(legend, 5, 15);\n        noStroke();\n        ellipse(mouseX, y, 7, 7);\n    }\n\n\n    // Draw the log(x) curve, \n\n\n    // over the domain of x from 0 to maxX \n\n    noFill();\n    stroke(0);\n    beginShape();\n    for (let x = 0; x < width; x++) {\n        xValue = map(x, 0, width, 0, maxX);\n        yValue = log(xValue);\n        y = map(yValue, -maxY, maxY, height, 0);\n        vertex(x, y);\n    }\n    endShape();\n    line(0, 0, 0, height);\n    line(0, height / 2, width, height / 2);\n\n    describe(`ellipse moves along a curve with mouse x.\n    natural logarithm of n displayed.`);\n}"],
      "href": "#/p5/log",
      "syntax": "log(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number greater than 0",
        "paramName": "n"
      }]
    }, {
      "label": "mag()",
      "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\" class=\"code\">mag()</a> is\na shortcut for writing dist(0, 0, x, y).",
      "examples": ["function setup() {\n    let x1 = 20;\n    let x2 = 80;\n    let y1 = 30;\n    let y2 = 70;\n\n    line(0, 0, x1, y1);\n    print(mag(x1, y1));\n    // Prints \"36.05551275463989\" \n\n    line(0, 0, x2, y1);\n    print(mag(x2, y1));\n    // Prints \"85.44003745317531\" \n\n    line(0, 0, x1, y2);\n    print(mag(x1, y2));\n    // Prints \"72.80109889280519\" \n\n    line(0, 0, x2, y2);\n    print(mag(x2, y2));\n    // Prints \"106.3014581273465\" \n\n\n    describe('4 lines of different length radiate from top left of canvas.');\n}"],
      "href": "#/p5/mag",
      "syntax": "mag(a, b)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "first value",
        "paramName": "a"
      }, {
        "paramType": "Number",
        "paramDescription": "second value",
        "paramName": "b"
      }]
    }, {
      "label": "map()",
      "description": "Re-maps a number from one range to another.",
      "examples": ["let value = 25;\nlet m = map(value, 0, 100, 0, width);\nellipse(m, 50, 10, 10);\ndescribe('10×10 white ellipse with in mid left canvas');", "function setup() {\n    noStroke();\n}\n\nfunction draw() {\n    background(204);\n    let x1 = map(mouseX, 0, width, 25, 75);\n    ellipse(x1, 25, 25, 25);\n\n    //This ellipse is constrained to the 0-100 range \n\n\n    //after setting withinBounds to true \n\n    let x2 = map(mouseX, 0, width, 0, 100, true);\n    ellipse(x2, 75, 25, 25);\n\n    describe(`Two 25×25 white ellipses move with mouse x.\n    Bottom has more range from X`);\n}"],
      "href": "#/p5/map",
      "syntax": "map(value, start1, stop1, start2, stop2, [withinBounds])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the incoming value to be converted",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "lower bound of the value's current range",
        "paramName": "start1"
      }, {
        "paramType": "Number",
        "paramDescription": "upper bound of the value's current range",
        "paramName": "stop1"
      }, {
        "paramType": "Number",
        "paramDescription": "lower bound of the value's target range",
        "paramName": "start2"
      }, {
        "paramType": "Number",
        "paramDescription": "upper bound of the value's target range",
        "paramName": "stop2"
      }, {
        "paramType": "Boolean",
        "paramDescription": "constrain the value to the newly mapped range",
        "paramName": "withinBounds"
      }]
    }, {
      "label": "max()",
      "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/max\" class=\"code\">max()</a> accepts any number of Number parameters, or an Array\nof any length.",
      "examples": ["function setup() {\n\n    // Change the elements in the array and run the sketch \n\n\n    // to show how max() works! \n\n    let numArray = [2, 1, 5, 4, 8, 9];\n    fill(0);\n    noStroke();\n    text('Array Elements', 0, 10);\n\n    // Draw all numbers in the array \n\n    let spacing = 15;\n    let elemsY = 25;\n    for (let i = 0; i < numArray.length; i++) {\n        text(numArray[i], i * spacing, elemsY);\n    }\n    let maxX = 33;\n    let maxY = 80;\n\n    // Draw the Maximum value in the array. \n\n    textSize(32);\n    text(max(numArray), maxX, maxY);\n\n    describe(`Small text at top reads: Array Elements 2 1 5 4 8 9.\n    Large text at center: 9`);\n}"],
      "href": "#/p5/max",
      "syntax": "max(n0, n1)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "Number to compare",
        "paramName": "n0"
      }, {
        "paramType": "Number",
        "paramDescription": "Number to compare",
        "paramName": "n1"
      }, {
        "paramType": "Number[]",
        "paramDescription": "Numbers to compare",
        "paramName": "nums"
      }]
    }, {
      "label": "min()",
      "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/min\" class=\"code\">min()</a> accepts any number of Number parameters, or an Array\nof any length.",
      "examples": ["function setup() {\n\n    // Change the elements in the array and run the sketch \n\n\n    // to show how min() works! \n\n    let numArray = [2, 1, 5, 4, 8, 9];\n    fill(0);\n    noStroke();\n    text('Array Elements', 0, 10);\n\n    // Draw all numbers in the array \n\n    let spacing = 15;\n    let elemsY = 25;\n    for (let i = 0; i < numArray.length; i++) {\n        text(numArray[i], i * spacing, elemsY);\n    }\n    let maxX = 33;\n    let maxY = 80;\n\n    // Draw the Minimum value in the array. \n\n    textSize(32);\n    text(min(numArray), maxX, maxY);\n\n    describe(`Small text at top reads: Array Elements 2 1 5 4 8 9.\n    Large text at center: 1`);\n}"],
      "href": "#/p5/min",
      "syntax": "min(n0, n1)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "Number to compare",
        "paramName": "n0"
      }, {
        "paramType": "Number",
        "paramDescription": "Number to compare",
        "paramName": "n1"
      }, {
        "paramType": "Number[]",
        "paramDescription": "Numbers to compare",
        "paramName": "nums"
      }]
    }, {
      "label": "norm()",
      "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the example above.)",
      "examples": ["function draw() {\n    background(200);\n    let currentNum = mouseX;\n    let lowerBound = 0;\n    let upperBound = width;\n    //100; \n\n    let normalized = norm(currentNum, lowerBound, upperBound);\n    let lineY = 70;\n    stroke(3);\n    line(0, lineY, width, lineY);\n\n    //Draw an ellipse mapped to the non-normalized value. \n\n    noStroke();\n    fill(50);\n    let s = 7;\n    // ellipse size \n\n    ellipse(currentNum, lineY, s, s);\n\n\n    // Draw the guide \n\n    let guideY = lineY + 15;\n    text('0', 0, guideY);\n    textAlign(RIGHT);\n    text('100', width, guideY);\n\n\n    // Draw the normalized value \n\n    textAlign(LEFT);\n    fill(0);\n    textSize(32);\n    let normalY = 40;\n    let normalX = 20;\n    text(normalized, normalX, normalY);\n\n    describe(`ellipse moves with mouse. 0 shown left, 100 right,\n    and updating values center`);\n}"],
      "href": "#/p5/norm",
      "syntax": "norm(value, start, stop)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "incoming value to be normalized",
        "paramName": "value"
      }, {
        "paramType": "Number",
        "paramDescription": "lower bound of the value's current range",
        "paramName": "start"
      }, {
        "paramType": "Number",
        "paramDescription": "upper bound of the value's current range",
        "paramName": "stop"
      }]
    }, {
      "label": "pow()",
      "description": "Facilitates exponential expressions. The <a href=\"#/p5/pow\" class=\"code\">pow()</a> function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3 × 3 × 3 × 3 × 3 and pow(3, -5) is equivalent to 1 /\n3 × 3 × 3 × 3 × 3. Maps to\nMath.pow().",
      "examples": ["function setup() {\n\n    //Exponentially increase the size of an ellipse. \n\n    let eSize = 3;\n    // Original Size \n\n    let eLoc = 10;\n    // Original Location \n\n\n    ellipse(eLoc, eLoc, eSize, eSize);\n\n    ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\n\n    ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\n\n    ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\n\n    describe('small to large ellipses radiating from top left of canvas');\n}"],
      "href": "#/p5/pow",
      "syntax": "pow(n, e)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "base of the exponential expression",
        "paramName": "n"
      }, {
        "paramType": "Number",
        "paramDescription": "power by which to raise the base",
        "paramName": "e"
      }]
    }, {
      "label": "round()",
      "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
      "examples": ["let x = round(3.7);\ntext(x, width / 2, height / 2);\ndescribe('\"4\" written in middle of canvas');", "let x = round(12.782383, 2);\ntext(x, width / 2, height / 2);\ndescribe('\"12.78\" written in middle of canvas');", "function draw() {\n    background(200);\n\n    //map, mouseX between 0 and 5. \n\n    let ax = map(mouseX, 0, 100, 0, 5);\n    let ay = 66;\n\n\n    // Round the mapped number. \n\n    let bx = round(map(mouseX, 0, 100, 0, 5));\n    let by = 33;\n\n\n    // Multiply the mapped numbers by 20 to more easily \n\n\n    // see the changes. \n\n    stroke(0);\n    fill(0);\n    line(0, ay, ax * 20, ay);\n    line(0, by, bx * 20, by);\n\n\n    // Reformat the float returned by map and draw it. \n\n    noStroke();\n    text(nfc(ax, 2), ax, ay - 5);\n    text(nfc(bx, 1), bx, by - 5);\n\n    describe('two horizontal lines rounded values displayed on top.');\n}"],
      "href": "#/p5/round",
      "syntax": "round(n, [decimals])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to round",
        "paramName": "n"
      }, {
        "paramType": "Number",
        "paramDescription": "number of decimal places to round to, default is 0",
        "paramName": "decimals"
      }]
    }, {
      "label": "sq()",
      "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
      "examples": ["function draw() {\n    background(200);\n    let eSize = 7;\n    let x1 = map(mouseX, 0, width, 0, 10);\n    let y1 = 80;\n    let x2 = sq(x1);\n    let y2 = 20;\n\n\n    // Draw the non-squared. \n\n    line(0, y1, width, y1);\n    ellipse(x1, y1, eSize, eSize);\n\n\n    // Draw the squared. \n\n    line(0, y2, width, y2);\n    ellipse(x2, y2, eSize, eSize);\n\n\n    // Draw dividing line. \n\n    stroke(100);\n    line(0, height / 2, width, height / 2);\n\n\n    // Draw text. \n\n    let spacing = 15;\n    noStroke();\n    fill(0);\n    text('x = ' + x1, 0, y1 + spacing);\n    text('sq(x) = ' + x2, 0, y2 + spacing);\n\n    describe(`horizontal center line squared values displayed on\n    top and regular on bottom.`);\n}"],
      "href": "#/p5/sq",
      "syntax": "sq(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number to square",
        "paramName": "n"
      }]
    }, {
      "label": "sqrt()",
      "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
      "examples": ["function draw() {\n    background(200);\n    let eSize = 7;\n    let x1 = mouseX;\n    let y1 = 80;\n    let x2 = sqrt(x1);\n    let y2 = 20;\n\n\n    // Draw the non-squared. \n\n    line(0, y1, width, y1);\n    ellipse(x1, y1, eSize, eSize);\n\n\n    // Draw the squared. \n\n    line(0, y2, width, y2);\n    ellipse(x2, y2, eSize, eSize);\n\n\n    // Draw dividing line. \n\n    stroke(100);\n    line(0, height / 2, width, height / 2);\n\n\n    // Draw text. \n\n    noStroke();\n    fill(0);\n    let spacing = 15;\n    text('x = ' + x1, 0, y1 + spacing);\n    text('sqrt(x) = ' + x2, 0, y2 + spacing);\n\n    describe(`horizontal center line squareroot values displayed on\n    top and regular on bottom.`);\n}"],
      "href": "#/p5/sqrt",
      "syntax": "sqrt(n)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "non-negative number to square root",
        "paramName": "n"
      }]
    }, {
      "label": "fract()",
      "description": "Calculates the fractional part of a number.",
      "examples": ["text(7345.73472742, 10, 25);\ntext(fract(7345.73472742), 10, 75);\ndescribe(`first row having a number and the second having\n  the fractional part of the number`);", "text(1.4215e-15, 10, 25);\ntext(fract(1.4215e-15), 10, 75);\ndescribe(`first row having a number expressed in scientific\n  notation and the second having the fractional part of the number`);"],
      "href": "#/p5/fract",
      "syntax": "fract(num)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "Number whose fractional part needs to be found out",
        "paramName": "num"
      }]
    }]
  }, {
    "subgroupName": "Vector",
    "tokens": [{
      "label": "createVector()",
      "description": "Creates a new <a href=\"#/p5.Vector\" class=\"code\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three-dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
      "examples": ["let v1;\n\nfunction setup() {\n    createCanvas(100, 100);\n    stroke(255, 0, 255);\n    v1 = createVector(width / 2, height / 2);\n}\n\nfunction draw() {\n    background(255);\n    line(v1.x, v1.y, mouseX, mouseY);\n    describe('draws a line from center of canvas to mouse pointer position.');\n}"],
      "href": "#/p5/createVector",
      "syntax": "createVector([x], [y], [z])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x component of the vector",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of the vector",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of the vector",
        "paramName": "z"
      }]
    }, {
      "label": "p5.Vector",
      "description": "A class to describe a two or three-dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (<code>x</code>, <code>y</code> for 2D; or <code>x</code>, <code>y</code>, <code>z</code> for 3D). The magnitude\nand direction can be accessed via the methods <a href=\"#/p5.Vector/mag\" class=\"code\">p5.Vector.mag()</a> and <a href=\"#/p5.Vector/heading\" class=\"code\">heading()</a>.",
      "examples": ["let v1 = createVector(40, 50);\nlet v2 = createVector(40, 50);\n\nellipse(v1.x, v1.y, 50, 50);\nellipse(v2.x, v2.y, 50, 50);\nv1.add(v2);\nellipse(v1.x, v1.y, 50, 50);\n\ndescribe(`2 white ellipses. One center-left the other\n  bottom right and off canvas`);"],
      "href": "#/p5.Vector",
      "syntax": "new p5.Vector([x], [y], [z])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x component of the vector",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of the vector",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of the vector",
        "paramName": "z"
      }]
    }]
  }, {
    "subgroupName": "Noise",
    "tokens": [{
      "label": "noise()",
      "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more naturally ordered, harmonic\nsuccession of numbers compared to the standard <a href=\"#/p5/random\" class=\"code\">random()</a> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br><br> The main difference to the\n<a href=\"#/p5/random\" class=\"code\">random()</a> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program; see\nthe <a href=\"#/p5/noiseSeed\" class=\"code\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\ndepending on the number of coordinates given. The resulting value will\nalways be between 0.0 and 1.0. The noise value can be animated by moving\nthrough the noise space as demonstrated in the example above. The 2nd\nand 3rd dimensions can also be interpreted as time.<br><br>The actual\nnoise is structured similar to an audio signal, in respect to the\nfunction's use of frequencies. Similar to the concept of harmonics in\nphysics, Perlin noise is computed over several octaves which are added\ntogether for the final result. <br><br>Another way to adjust the\ncharacter of the resulting sequence is the scale of the input\ncoordinates. As the function works within an infinite space the value of\nthe coordinates doesn't matter as such, only the distance between\nsuccessive coordinates does (eg. when using <a href=\"#/p5/noise\" class=\"code\">noise()</a> within a\nloop). As a general rule the smaller the difference between coordinates,\nthe smoother the resulting noise sequence will be. Steps of 0.005-0.03\nwork best for most applications, but this will differ depending on use.",
      "examples": ["let xoff = 0.0;\n\nfunction draw() {\n    background(204);\n    xoff = xoff + 0.01;\n    let n = noise(xoff) * width;\n    line(n, 0, n, height);\n    describe(`vertical line moves left to right with updating\n    noise values.`);\n}", "let noiseScale = 0.02;\n\nfunction draw() {\n    background(0);\n    for (let x = 0; x < width; x++) {\n        let noiseVal = noise((mouseX + x) * noiseScale, mouseY * noiseScale);\n        stroke(noiseVal * 255);\n        line(x, mouseY + noiseVal * 80, x, height);\n    }\n    describe(`horizontal wave pattern effected by mouse x-position\n    & updating noise values.`);\n}"],
      "href": "#/p5/noise",
      "syntax": "noise(x, [y], [z])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "x-coordinate in noise space",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate in noise space",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z-coordinate in noise space",
        "paramName": "z"
      }]
    }, {
      "label": "noiseDetail()",
      "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overall intensity of the noise, whereas higher octaves\n create finer-grained details in the noise sequence.\nBy default, noise is computed over 4 octaves with each octave contributing\n exactly half as much as its predecessor, starting at 50% strength for the 1st\n octave. This falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however, note that values greater than 0.5 might\n result in greater than 1.0 values returned by <a href=\"#/p5/noise\" class=\"code\">noise()</a>.\nBy changing these parameters, the signal created by the <a href=\"#/p5/noise\" class=\"code\">noise()</a>\n function can be adapted to fit very specific needs and characteristics.",
      "examples": ["let noiseVal;\nlet noiseScale = 0.02;\n\nfunction setup() {\n    createCanvas(100, 100);\n}\n\nfunction draw() {\n    background(0);\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width / 2; x++) {\n            noiseDetail(2, 0.2);\n            noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n            stroke(noiseVal * 255);\n            point(x, y);\n            noiseDetail(8, 0.65);\n            noiseVal = noise(\n                (mouseX + x + width / 2) * noiseScale,\n                (mouseY + y) * noiseScale\n            );\n            stroke(noiseVal * 255);\n            point(x + width / 2, y);\n        }\n    }\n    describe(`2 vertical grey smokey patterns affected by\n     mouse x-position and noise.`);\n}"],
      "href": "#/p5/noiseDetail",
      "syntax": "noiseDetail(lod, falloff)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number of octaves to be used by the noise",
        "paramName": "lod"
      }, {
        "paramType": "Number",
        "paramDescription": "falloff factor for each octave",
        "paramName": "falloff"
      }]
    }, {
      "label": "noiseSeed()",
      "description": "Sets the seed value for <a href=\"#/p5/noise\" class=\"code\">noise()</a>. By default,\n<a href=\"#/p5/noise\" class=\"code\">noise()</a> produces different results each time\nthe program is run. Set the <code>seed</code> parameter to a constant to return\nthe same pseudo-random numbers each time the software is run.",
      "examples": ["let xoff = 0.0;\n\nfunction setup() {\n    noiseSeed(99);\n    stroke(0, 10);\n}\n\nfunction draw() {\n    xoff = xoff + .01;\n    let n = noise(xoff) * width;\n    line(n, 0, n, height);\n    describe(`vertical grey lines drawing in pattern affected by noise.`);\n}"],
      "href": "#/p5/noiseSeed",
      "syntax": "noiseSeed(seed)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the seed value",
        "paramName": "seed"
      }]
    }]
  }, {
    "subgroupName": "Random",
    "tokens": [{
      "label": "randomSeed()",
      "description": "Sets the seed value for <a href=\"#/p5/random\" class=\"code\">random()</a>.",
      "examples": ["randomSeed(99);\nfor (let i = 0; i < 100; i++) {\n    let r = random(0, 255);\n    stroke(r);\n    line(i, 0, i, 100);\n}\ndescribe('many vertical lines drawn in white, black, or grey.');"],
      "href": "#/p5/randomSeed",
      "syntax": "randomSeed(seed)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the seed value",
        "paramName": "seed"
      }]
    }, {
      "label": "random()",
      "description": "Return a random floating-point number.",
      "examples": ["for (let i = 0; i < 100; i++) {\n    let r = random(50);\n    stroke(r * 5);\n    line(50, i, 50 + r, i);\n}\ndescribe(`100 horizontal lines from center canvas to right.\n  The size and fill change each time.`);", "for (let i = 0; i < 100; i++) {\n    let r = random(-50, 50);\n    line(50, i, 50 + r, i);\n}\ndescribe(`100 horizontal lines from center of canvas.\n  The height & side change each render.`);", "// Get a random element from an array using the random(Array) syntax \n\nlet words = ['apple', 'bear', 'cat', 'dog'];\nlet word = random(words);\n// select random word \n\ntext(word, 10, 50);\n// draw the word \n\ndescribe('word displayed at random. Either apple, bear, cat, or dog.');"],
      "href": "#/p5/random",
      "syntax": "random([min], [max])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the lower bound (inclusive)",
        "paramName": "min"
      }, {
        "paramType": "Number",
        "paramDescription": "the upper bound (exclusive)",
        "paramName": "max"
      }, {
        "paramType": "Array",
        "paramDescription": "the array to choose from",
        "paramName": "choices"
      }]
    }, {
      "label": "randomGaussian()",
      "description": "Returns a random number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <a href=\"#/p5/randomGaussian\" class=\"code\">randomGaussian()</a> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.\nTakes either 0, 1 or 2 arguments.<br>\n If no args, the mean is 0 and the standard deviation is 1.<br>\n If one arg, that arg is the mean and the standard deviation is 1.<br>\n If two args, the first arg is the mean and the second is the standard deviation.",
      "examples": ["for (let y = 0; y < 100; y++) {\n    let x = randomGaussian(50, 15);\n    line(50, y, x, y);\n}\ndescribe(`100 horizontal lines from center of canvas.\n  The height & side change each render.`);", "let distribution = new Array(360);\n\nfunction setup() {\n    createCanvas(100, 100);\n    for (let i = 0; i < distribution.length; i++) {\n        distribution[i] = floor(randomGaussian(0, 15));\n    }\n}\n\nfunction draw() {\n    background(204);\n    translate(width / 2, width / 2);\n    for (let i = 0; i < distribution.length; i++) {\n        rotate(TWO_PI / distribution.length);\n        stroke(0);\n        let dist = abs(distribution[i]);\n        line(0, 0, dist, 0);\n    }\n    describe(`black lines radiate from center of canvas.\n     The size changes each render.`);\n}"],
      "href": "#/p5/randomGaussian",
      "syntax": "randomGaussian([mean], [sd])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the mean",
        "paramName": "mean"
      }, {
        "paramType": "Number",
        "paramDescription": "the standard deviation",
        "paramName": "sd"
      }]
    }]
  }, {
    "subgroupName": "Trigonometry",
    "tokens": [{
      "label": "acos()",
      "description": "The inverse of <a href=\"#/p5/cos\" class=\"code\">cos()</a>, returns the arc cosine of a value.\nThis function expects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927) if the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a> is RADIANS\nor 0 to 180 if the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a> is DEGREES.",
      "examples": ["let a = PI;\nlet c = cos(a);\nlet ac = acos(c);\n\n// Prints: \"3.1415927 : -1.0 : 3.1415927\" \n\nprint(a + ' : ' + c + ' : ' + ac);", "let a = PI + PI / 4.0;\nlet c = cos(a);\nlet ac = acos(c);\n\n// Prints: \"3.926991 : -0.70710665 : 2.3561943\" \n\nprint(a + ' : ' + c + ' : ' + ac);"],
      "href": "#/p5/acos",
      "syntax": "acos(value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the value whose arc cosine is to be returned",
        "paramName": "value"
      }]
    }, {
      "label": "asin()",
      "description": "The inverse of <a href=\"#/p5/sin\" class=\"code\">sin()</a>, returns the arc sine of a value.\nThis function expects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle\nmode is DEGREES.",
      "examples": ["let a = PI / 3.0;\nlet s = sin(a);\nlet as = asin(s);\n\n// Prints: \"1.0471975 : 0.86602540 : 1.0471975\" \n\nprint(a + ' : ' + s + ' : ' + as);", "let a = PI + PI / 3.0;\nlet s = sin(a);\nlet as = asin(s);\n\n// Prints: \"4.1887902 : -0.86602540 : -1.0471975\" \n\nprint(a + ' : ' + s + ' : ' + as);"],
      "href": "#/p5/asin",
      "syntax": "asin(value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the value whose arc sine is to be returned",
        "paramName": "value"
      }]
    }, {
      "label": "atan()",
      "description": "The inverse of <a href=\"#/p5/tan\" class=\"code\">tan()</a>, returns the arc tangent of a value.\nThis function expects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or\n-90 to 90 if the angle mode is DEGREES.",
      "examples": ["let a = PI / 3.0;\nlet t = tan(a);\nlet at = atan(t);\n\n// Prints: \"1.0471975 : 1.7320508 : 1.0471975\" \n\nprint(a + ' : ' + t + ' : ' + at);", "let a = PI + PI / 3.0;\nlet t = tan(a);\nlet at = atan(t);\n\n// Prints: \"4.1887902 : 1.7320508 : 1.0471975\" \n\nprint(a + ' : ' + t + ' : ' + at);"],
      "href": "#/p5/atan",
      "syntax": "atan(value)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the value whose arc tangent is to be returned",
        "paramName": "value"
      }]
    }, {
      "label": "atan2()",
      "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI if the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a>\nis RADIANS or 180 to -180 if the <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a> is DEGREES.\nThe <a href=\"#/p5/\" class=\"code\">atan2()</a> function is most often used for orienting geometry\nto the position of the cursor.",
      "examples": ["function draw() {\n    background(204);\n    translate(width / 2, height / 2);\n    let a = atan2(mouseY - height / 2, mouseX - width / 2);\n    rotate(a);\n    rect(-30, -5, 60, 10);\n    describe('60×10 rect at center of canvas rotates with mouse movements');\n}"],
      "href": "#/p5/atan2",
      "syntax": "atan2(y, x)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "y-coordinate of the point",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate of the point",
        "paramName": "x"
      }]
    }, {
      "label": "cos()",
      "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\" class=\"code\">angleMode</a>. Values are returned in the range -1 to 1.",
      "examples": ["let a = 0.0;\nlet inc = TWO_PI / 25.0;\nfor (let i = 0; i < 25; i++) {\n    line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\n    a = a + inc;\n}\ndescribe(`vertical black lines form wave patterns, extend-down on\n  left and right side`);"],
      "href": "#/p5/cos",
      "syntax": "cos(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle",
        "paramName": "angle"
      }]
    }, {
      "label": "sin()",
      "description": "Calculates the sine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\" class=\"code\">angleMode</a>. Values are returned in the range -1 to 1.",
      "examples": ["let a = 0.0;\nlet inc = TWO_PI / 25.0;\nfor (let i = 0; i < 25; i++) {\n    line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\n    a = a + inc;\n}\ndescribe(`vertical black lines extend down and up from center\n  to form wave pattern.`);"],
      "href": "#/p5/sin",
      "syntax": "sin(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle",
        "paramName": "angle"
      }]
    }, {
      "label": "tan()",
      "description": "Calculates the tangent of an angle. This function takes into account\nthe current <a href=\"#/p5/angleMode\" class=\"code\">angleMode</a>. Values are returned in the range of all real numbers.",
      "examples": ["let a = 0.0;\nlet inc = TWO_PI / 50.0;\nfor (let i = 0; i < 100; i = i + 2) {\n    line(i, 50, i, 50 + tan(a) * 2.0);\n    a = a + inc;\n}\ndescribe(`vertical black lines end down and up from center to\n  form spike pattern.`);"],
      "href": "#/p5/tan",
      "syntax": "tan(angle)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the angle",
        "paramName": "angle"
      }]
    }, {
      "label": "degrees()",
      "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\" class=\"code\">angleMode()</a>.",
      "examples": ["let rad = PI / 4;\nlet deg = degrees(rad);\nprint(rad + ' radians is ' + deg + ' degrees');\n\n// Prints: 0.7853981633974483 radians is 45 degrees "],
      "href": "#/p5/degrees",
      "syntax": "degrees(radians)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the radians value to convert to degrees",
        "paramName": "radians"
      }]
    }, {
      "label": "radians()",
      "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\" class=\"code\">angleMode</a>.",
      "examples": ["let deg = 45.0;\nlet rad = radians(deg);\nprint(deg + ' degrees is ' + rad + ' radians');\n\n// Prints: 45 degrees is 0.7853981633974483 radians "],
      "href": "#/p5/radians",
      "syntax": "radians(degrees)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the degree value to convert to radians",
        "paramName": "degrees"
      }]
    }, {
      "label": "angleMode()",
      "description": "Sets the current mode of p5 to the given mode. Default mode is RADIANS.",
      "examples": ["function draw() {\n    background(204);\n    angleMode(DEGREES);\n    // Change the mode to DEGREES \n\n    let a = atan2(mouseY - height / 2, mouseX - width / 2);\n    translate(width / 2, height / 2);\n    push();\n    rotate(a);\n    rect(-20, -5, 40, 10);\n    // Larger rectangle is rotating in degrees \n\n    pop();\n    angleMode(RADIANS);\n    // Change the mode to RADIANS \n\n    rotate(a);\n    // variable a stays the same \n\n    rect(-40, -5, 20, 10);\n    // Smaller rectangle is rotating in radians \n\n    describe(`40×10 rect in center rotates with mouse moves.\n    20×10 rect moves faster.`);\n}"],
      "href": "#/p5/angleMode",
      "syntax": "angleMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either RADIANS or DEGREES",
        "paramName": "mode"
      }]
    }]
  }]
}, {
  "groupName": "Typography",
  "subgroups": [{
    "subgroupName": "Attributes",
    "tokens": [{
      "label": "textAlign()",
      "description": "Sets the current alignment for drawing text. Accepts two\narguments: horizAlign (LEFT, CENTER, or RIGHT) and\nvertAlign (TOP, BOTTOM, CENTER, or BASELINE).",
      "examples": ["textSize(16);\ntextAlign(RIGHT);\ntext('ABCD', 50, 30);\ntextAlign(CENTER);\ntext('EFGH', 50, 50);\ntextAlign(LEFT);\ntext('IJKL', 50, 70);\ndescribe(`Letters ABCD displayed at top left, EFGH at center, and\n  IJKL at bottom right.`);", "textSize(16);\nstrokeWeight(0.5);\n\nline(0, 12, width, 12);\ntextAlign(CENTER, TOP);\ntext('TOP', 0, 12, width);\n\nline(0, 37, width, 37);\ntextAlign(CENTER, CENTER);\ntext('CENTER', 0, 37, width);\n\nline(0, 62, width, 62);\ntextAlign(CENTER, BASELINE);\ntext('BASELINE', 0, 62, width);\n\nline(0, 97, width, 97);\ntextAlign(CENTER, BOTTOM);\ntext('BOTTOM', 0, 97, width);\n\ndescribe(`The names of the four vertical alignments (TOP, CENTER, BASELINE,\n  and BOTTOM) rendered each showing that alignment's placement relative to a\n  horizontal line.`);"],
      "href": "#/p5/textAlign",
      "syntax": "textAlign(horizAlign, [vertAlign])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "horizontal alignment, either LEFT, CENTER, or RIGHT",
        "paramName": "horizAlign"
      }, {
        "paramType": "Constant",
        "paramDescription": "vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE",
        "paramName": "vertAlign"
      }]
    }, {
      "label": "textLeading()",
      "description": "Sets/gets the spacing, in pixels, between lines of text. This setting will be\nused in all subsequent calls to the <a href=\"#/p5/text\" class=\"code\">text()</a> function.",
      "examples": ["let lines = 'L1\\nL2\\nL3';\n// \"\\n\" is a \"new line\" character \n\ntextSize(12);\n\ntextLeading(10);\ntext(lines, 10, 25);\n\ntextLeading(20);\ntext(lines, 40, 25);\n\ntextLeading(30);\ntext(lines, 70, 25);\n\ndescribe(`A set of L1, L2, and L3, displayed vertically 3 times.\n  Spacing increases for each set.`);"],
      "href": "#/p5/textLeading",
      "syntax": "textLeading(leading)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the size in pixels for spacing between lines",
        "paramName": "leading"
      }]
    }, {
      "label": "textSize()",
      "description": "Sets/gets the current font size. This size will be used in all subsequent\ncalls to the <a href=\"#/p5/text\" class=\"code\">text()</a> function. Font size is measured in pixels.",
      "examples": ["textSize(12);\ntext('Font Size 12', 10, 30);\ntextSize(14);\ntext('Font Size 14', 10, 60);\ntextSize(16);\ntext('Font Size 16', 10, 90);\n\ndescribe(`'Font Size 12' displayed small,\n  'Font Size 14' medium, and\n  'Font Size 16' large`);"],
      "href": "#/p5/textSize",
      "syntax": "textSize(theSize)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "the size of the letters in units of pixels",
        "paramName": "theSize"
      }]
    }, {
      "label": "textStyle()",
      "description": "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\nNote: this may be is overridden by CSS styling. For non-system fonts\n(opentype, truetype, etc.) please load styled fonts instead.",
      "examples": ["strokeWeight(0);\ntextSize(12);\ntextStyle(NORMAL);\ntext('Font Style Normal', 10, 15);\ntextStyle(ITALIC);\ntext('Font Style Italic', 10, 40);\ntextStyle(BOLD);\ntext('Font Style Bold', 10, 65);\ntextStyle(BOLDITALIC);\ntext('Font Style Bold Italic', 10, 90);\ndescribe(`The words “Font Style Normal” displayed normally,\n  “Font Style Italic” in italic,\n  “Font Style Bold” in bold, and\n  “Font Style Bold Italic” in bold italics.`);"],
      "href": "#/p5/textStyle",
      "syntax": "textStyle(theStyle)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "styling for text, either NORMAL, ITALIC, BOLD or BOLDITALIC",
        "paramName": "theStyle"
      }]
    }, {
      "label": "textWidth()",
      "description": "Calculates and returns the width of any character or text string.",
      "examples": ["textSize(28);\n\nlet aChar = 'P';\nlet cWidth = textWidth(aChar);\ntext(aChar, 0, 40);\nline(cWidth, 0, cWidth, 50);\n\nlet aString = 'p5.js';\nlet sWidth = textWidth(aString);\ntext(aString, 0, 85);\nline(sWidth, 50, sWidth, 100);\n\ndescribe('Letter P and p5.js are displayed with vertical lines at end.');"],
      "href": "#/p5/textWidth",
      "syntax": "textWidth(theText)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "the String of characters to measure",
        "paramName": "theText"
      }]
    }, {
      "label": "textAscent()",
      "description": "Returns the ascent of the current font at its current size. The ascent\nrepresents the distance, in pixels, of the tallest character above\nthe baseline.",
      "examples": ["let base = height * 0.75;\nlet scalar = 0.8;\n// Different for each font \n\n\ntextSize(32);\n// Set initial text size \n\nlet asc = textAscent() * scalar;\n// Calc ascent \n\nline(0, base - asc, width, base - asc);\ntext('dp', 0, base);\n// Draw text on baseline \n\n\ntextSize(64);\n// Increase text size \n\nasc = textAscent() * scalar;\n// Recalc ascent \n\nline(40, base - asc, width, base - asc);\ntext('dp', 40, base);\n// Draw text on baseline "],
      "href": "#/p5/textAscent",
      "syntax": "textAscent()",
      "parameters": []
    }, {
      "label": "textDescent()",
      "description": "Returns the descent of the current font at its current size. The descent\nrepresents the distance, in pixels, of the character with the longest\ndescender below the baseline.",
      "examples": ["let base = height * 0.75;\nlet scalar = 0.8;\n// Different for each font \n\n\ntextSize(32);\n// Set initial text size \n\nlet desc = textDescent() * scalar;\n// Calc descent \n\nline(0, base + desc, width, base + desc);\ntext('dp', 0, base);\n// Draw text on baseline \n\n\ntextSize(64);\n// Increase text size \n\ndesc = textDescent() * scalar;\n// Recalc descent \n\nline(40, base + desc, width, base + desc);\ntext('dp', 40, base);\n// Draw text on baseline "],
      "href": "#/p5/textDescent",
      "syntax": "textDescent()",
      "parameters": []
    }, {
      "label": "textWrap()",
      "description": "Specifies how lines of text are wrapped within a text box. This requires a max-width set on the text area, specified in <a href=\"#/p5/text\" class=\"code\">text()</a> as parameter <code>x2</code>.",
      "examples": ["textSize(20);\ntextWrap(WORD);\ntext('Have a wonderful day', 0, 10, 100);", "textSize(20);\ntextWrap(CHAR);\ntext('Have a wonderful day', 0, 10, 100);", "textSize(20);\ntextWrap(CHAR);\ntext('祝你有美好的一天', 0, 10, 100);", "const scream = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAA';\ntextSize(20);\ntextWrap(WORD);\ntext(scream, 0, 0, 100);\nfill(0, 0, 0, 75);\ntext(scream, 0, 20, 100);\nfill(0, 0, 0, 50);\ntext(scream, 0, 40, 100);\nfill(0, 0, 0, 25);\ntext(scream, 0, 60, 100);\nstrokeWeight(2);\nellipseMode(CENTER);\nfill(255);\nellipse(15, 50, 15, 15);\nfill(0);\nellipse(11, 47, 1, 1);\nellipse(19, 47, 1, 1);\nellipse(15, 52, 5, 5);\nline(15, 60, 15, 70);\nline(15, 65, 5, 55);\nline(15, 65, 25, 55);\nline(15, 70, 10, 80);\nline(15, 70, 20, 80);"],
      "href": "#/p5/textWrap",
      "syntax": "textWrap(wrapStyle)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "text wrapping style, either WORD or CHAR",
        "paramName": "wrapStyle"
      }]
    }]
  }, {
    "subgroupName": "Loading &amp; Displaying",
    "tokens": [{
      "label": "loadFont()",
      "description": "Loads an opentype font file (.otf, .ttf) from a file or a URL,\nand returns a <a href=\"#/p5.Font\" class=\"code\">p5.Font</a> object. This function\nis asynchronous, meaning it may not finish before the next line in\nyour sketch is executed.",
      "examples": ["let myFont;\n\nfunction preload() {\n    myFont = loadFont('assets/inconsolata.otf');\n}\n\nfunction setup() {\n    fill('#ED225D');\n    textFont(myFont);\n    textSize(36);\n    text('p5*js', 10, 50);\n}", "function setup() {\n    loadFont('assets/inconsolata.otf', drawText);\n}\n\nfunction drawText(font) {\n    fill('#ED225D');\n    textFont(font, 36);\n    text('p5*js', 10, 50);\n}", "function preload() {\n    loadFont('assets/inconsolata.otf');\n}\n\nfunction setup() {\n    let myDiv = createDiv('hello there');\n    myDiv.style('font-family', 'Inconsolata');\n}"],
      "href": "#/p5/loadFont",
      "syntax": "loadFont(path, [callback], [onError])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "name of the file or url to load",
        "paramName": "path"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed after loadFont() completes",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "function to be executed if an error occurs",
        "paramName": "onError"
      }]
    }, {
      "label": "text()",
      "description": "Draws text to the screen. Displays the information specified in the first\nparameter on the screen in the position specified by the additional\nparameters. A default font will be used unless a font is set with the\n<a href=\"#/p5/textFont\" class=\"code\">textFont()</a> function and a default size will be\nused unless a font is set with <a href=\"#/p5/textSize\" class=\"code\">textSize()</a>. Change\nthe color of the text with the <a href=\"#/p5/fill\" class=\"code\">fill()</a> function. Change\nthe outline of the text with the <a href=\"#/p5/stroke\" class=\"code\">stroke()</a> and\n<a href=\"#/p5/strokeWeight\" class=\"code\">strokeWeight()</a> functions.",
      "examples": ["textSize(32);\ntext('word', 10, 30);\nfill(0, 102, 153);\ntext('word', 10, 60);\nfill(0, 102, 153, 51);\ntext('word', 10, 90);", "let s = 'The quick brown fox jumped over the lazy dog.';\nfill(50);\ntext(s, 10, 10, 70, 80);\n// Text wraps within text box ", "let inconsolata;\n\nfunction preload() {\n    inconsolata = loadFont('assets/inconsolata.otf');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    textFont(inconsolata);\n    textSize(width / 3);\n    textAlign(CENTER, CENTER);\n}\n\nfunction draw() {\n    background(0);\n    let time = millis();\n    rotateX(time / 1000);\n    rotateZ(time / 1234);\n    text('p5.js', 0, 0);\n}"],
      "href": "#/p5/text",
      "syntax": "text(str, x, y, [x2], [y2])",
      "parameters": [{
        "paramType": "String|Object|Array|Number|Boolean",
        "paramDescription": "the alphanumeric symbols to be displayed",
        "paramName": "str"
      }, {
        "paramType": "Number",
        "paramDescription": "x-coordinate of text",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y-coordinate of text",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "by default, the width of the text box, see rectMode() for more info",
        "paramName": "x2"
      }, {
        "paramType": "Number",
        "paramDescription": "by default, the height of the text box, see rectMode() for more info",
        "paramName": "y2"
      }]
    }, {
      "label": "textFont()",
      "description": "Sets the current font that will be drawn with the <a href=\"#/p5/text\" class=\"code\">text()</a> function.\nIf textFont() is called without any argument, it will return the current font if one has\nbeen set already. If not, it will return the name of the default font as a string.\nIf textFont() is called with a font to use, it will return the p5 object.",
      "examples": ["fill(0);\ntextSize(12);\ntextFont('Georgia');\ntext('Georgia', 12, 30);\ntextFont('Helvetica');\ntext('Helvetica', 12, 60);", "let fontRegular, fontItalic, fontBold;\n\nfunction preload() {\n    fontRegular = loadFont('assets/Regular.otf');\n    fontItalic = loadFont('assets/Italic.ttf');\n    fontBold = loadFont('assets/Bold.ttf');\n}\n\nfunction setup() {\n    background(210);\n    fill(0)\n        .strokeWeight(0)\n        .textSize(10);\n    textFont(fontRegular);\n    text('Font Style Normal', 10, 30);\n    textFont(fontItalic);\n    text('Font Style Italic', 10, 50);\n    textFont(fontBold);\n    text('Font Style Bold', 10, 70);\n}"],
      "href": "#/p5/textFont",
      "syntax": "textFont()",
      "parameters": [{
        "paramType": "Object|String",
        "paramDescription": "a font loaded via loadFont(), or a String representing a web safe font (a font that is generally available across all systems)",
        "paramName": "font"
      }, {
        "paramType": "Number",
        "paramDescription": "the font size to use",
        "paramName": "size"
      }]
    }, {
      "label": "p5.Font",
      "description": "Base class for font handling",
      "examples": [],
      "href": "#/p5.Font",
      "syntax": "new p5.Font([pInst])",
      "parameters": [{
        "paramType": "P5",
        "paramDescription": "pointer to p5 instance",
        "paramName": "pInst"
      }]
    }]
  }]
}, {
  "groupName": "3D",
  "subgroups": [{
    "subgroupName": "Interaction",
    "tokens": [{
      "label": "orbitControl()",
      "description": "Allows movement around a 3D sketch using a mouse or trackpad or touch.\nLeft-clicking and dragging or swipe motion will rotate the camera position\nabout the center of the sketch, right-clicking and dragging or multi-swipe\nwill pan the camera position without rotation, and using the mouse wheel\n(scrolling) or pinch in/out will move the camera further or closer\nfrom the center of the sketch. This function can be called with parameters\ndictating sensitivity to mouse/touch movement along the X and Y axes.\nCalling this function without parameters is equivalent to calling\norbitControl(1,1). To reverse direction of movement in either axis,\nenter a negative number for sensitivity.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    normalMaterial();\n    describe(\n        'Camera orbits around a box when mouse is hold-clicked & then moved.'\n    );\n}\n\nfunction draw() {\n    background(200);\n\n\n    // If you execute the line commented out instead of next line, the direction of rotation \n\n\n    // will be the direction the mouse or touch pointer moves, not around the X or Y axis. \n\n    orbitControl();\n\n    // orbitControl(1, 1, 1, {freeRotation: true}); \n\n\n    rotateY(0.5);\n    box(30, 50);\n}"],
      "href": "#/p5/orbitControl",
      "syntax": "orbitControl([sensitivityX], [sensitivityY], [sensitivityZ], [options])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "sensitivity to mouse movement along X axis",
        "paramName": "sensitivityX"
      }, {
        "paramType": "Number",
        "paramDescription": "sensitivity to mouse movement along Y axis",
        "paramName": "sensitivityY"
      }, {
        "paramType": "Number",
        "paramDescription": "sensitivity to scroll movement along Z axis",
        "paramName": "sensitivityZ"
      }, {
        "paramType": "Object",
        "paramDescription": "An optional object that can contain additional settings, disableTouchActions - Boolean, default value is true. Setting this to true makes mobile interactions smoother by preventing accidental interactions with the page while orbiting. But if you're already doing it via css or want the default touch actions, consider setting it to false. freeRotation - Boolean, default value is false. By default, horizontal movement of the mouse or touch pointer rotates the camera around the y-axis, and vertical movement rotates the camera around the x-axis. But if setting this option to true, the camera always rotates in the direction the pointer is moving. For zoom and move, the behavior is the same regardless of true/false.",
        "paramName": "options"
      }]
    }, {
      "label": "debugMode()",
      "description": "debugMode() helps visualize 3D space by adding a grid to indicate where the\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\ndirections. This function can be called without parameters to create a\ndefault grid and axes icon, or it can be called according to the examples\nabove to customize the size and position of the grid and/or axes icon.  The\ngrid is drawn using the most recently set stroke color and weight.  To\nspecify these parameters, add a call to stroke() and strokeWeight()\njust before the end of the draw() loop.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode();\n    describe(\n        'a 3D box is centered on a grid in a 3D sketch. an icon indicates the direction of each axis: a red line points +X, a green line +Y, and a blue line +Z. the grid and icon disappear when the spacebar is pressed.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    box(15, 30);\n\n    // Press the spacebar to turn debugMode off! \n\n    if (keyIsDown(32)) {\n        noDebugMode();\n    }\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode(GRID);\n    describe('a 3D box is centered on a grid in a 3D sketch.');\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    box(15, 30);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode(AXES);\n    describe(\n        'a 3D box is centered in a 3D sketch. an icon indicates the direction of each axis: a red line points +X, a green line +Y, and a blue line +Z.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    box(15, 30);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode(GRID, 100, 10, 0, 0, 0);\n    describe('a 3D box is centered on a grid in a 3D sketch');\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    box(15, 30);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\n    describe(\n        'a 3D box is centered on a grid in a 3D sketch. an icon indicates the direction of each axis: a red line points +X, a green line +Y, and a blue line +Z.'\n    );\n}\n\nfunction draw() {\n    noStroke();\n    background(200);\n    orbitControl();\n    box(15, 30);\n\n    // set the stroke color and weight for the grid! \n\n    stroke(255, 0, 150);\n    strokeWeight(0.8);\n}"],
      "href": "#/p5/debugMode",
      "syntax": "debugMode()",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either GRID or AXES",
        "paramName": "mode"
      }, {
        "paramType": "Number",
        "paramDescription": "size of one side of the grid",
        "paramName": "gridSize"
      }, {
        "paramType": "Number",
        "paramDescription": "number of divisions in the grid",
        "paramName": "gridDivisions"
      }, {
        "paramType": "Number",
        "paramDescription": "X axis offset from origin (0,0,0)",
        "paramName": "xOff"
      }, {
        "paramType": "Number",
        "paramDescription": "Y axis offset from origin (0,0,0)",
        "paramName": "yOff"
      }, {
        "paramType": "Number",
        "paramDescription": "Z axis offset from origin (0,0,0)",
        "paramName": "zOff"
      }, {
        "paramType": "Number",
        "paramDescription": "size of axes icon",
        "paramName": "axesSize"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "gridXOff"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "gridYOff"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "gridZOff"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "axesXOff"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "axesYOff"
      }, {
        "paramType": "Number",
        "paramDescription": "",
        "paramName": "axesZOff"
      }]
    }, {
      "label": "noDebugMode()",
      "description": "Turns off debugMode() in a 3D sketch.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n    normalMaterial();\n    debugMode();\n    describe(\n        'a 3D box is centered on a grid in a 3D sketch. an icon indicates the direction of each axis: a red line points +X, a green line +Y, and a blue line +Z. the grid and icon disappear when the spacebar is pressed.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    box(15, 30);\n\n    // Press the spacebar to turn debugMode off! \n\n    if (keyIsDown(32)) {\n        noDebugMode();\n    }\n}"],
      "href": "#/p5/noDebugMode",
      "syntax": "noDebugMode()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Lights",
    "tokens": [{
      "label": "ambientLight()",
      "description": "Creates an ambient light with the given color.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    describe('sphere with coral color under black light');\n}\n\nfunction draw() {\n    background(100);\n    ambientLight(0);\n    // black light (no light) \n\n    ambientMaterial(255, 127, 80);\n    // coral material \n\n    sphere(40);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    describe('sphere with coral color under white light');\n}\n\nfunction draw() {\n    background(100);\n    ambientLight(255);\n    // white light \n\n    ambientMaterial(255, 127, 80);\n    // coral material \n\n    sphere(40);\n}", "function setup() {\n    createCanvas(100, 100, WEBGL);\n    camera(0, -100, 300);\n}\n\nfunction draw() {\n    background(230);\n    ambientMaterial(237, 34, 93);\n    //Pink Material \n\n    ambientLight(mouseY);\n\n    //As you move the mouse up to down it changes from no ambient light to full ambient light. \n\n    rotateY(millis() / 2000);\n    box(100);\n}"],
      "href": "#/p5/ambientLight",
      "syntax": "ambientLight(v1, v2, v3, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "alpha value relative to current color range (default is 0-255)",
        "paramName": "alpha"
      }, {
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black",
        "paramName": "gray"
      }, {
        "paramType": "String",
        "paramDescription": "a color string",
        "paramName": "value"
      }, {
        "paramType": "Number[]",
        "paramDescription": "an array containing the red,green,blue & and alpha components of the color",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "color as a p5.Color",
        "paramName": "color"
      }]
    }, {
      "label": "specularColor()",
      "description": "Sets the color of the specular highlight of a non-ambient light\n(i.e. all lights except <a href=\"#/p5/ambientLight\" class=\"code\">ambientLight()</a>).",
      "examples": ["let setRedSpecularColor = true;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    describe(\n        'Sphere with specular highlight. Clicking the mouse toggles the specular highlight color between red and the default white.'\n    );\n}\n\nfunction draw() {\n    background(0);\n\n    ambientLight(60);\n\n\n    // add a point light to showcase specular color \n\n\n    // -- use mouse location to position the light \n\n    let lightPosX = mouseX - width / 2;\n    let lightPosY = mouseY - height / 2;\n\n    // -- set the light's specular color \n\n    if (setRedSpecularColor) {\n        specularColor(255, 0, 0);\n        // red specular highlight \n\n    }\n\n    // -- create the light \n\n    pointLight(200, 200, 200, lightPosX, lightPosY, 50);\n    // white light \n\n\n\n    // use specular material with high shininess \n\n    specularMaterial(150);\n    shininess(50);\n\n    sphere(30, 64, 64);\n}\n\nfunction mouseClicked() {\n    setRedSpecularColor = !setRedSpecularColor;\n}"],
      "href": "#/p5/specularColor",
      "syntax": "specularColor(v1, v2, v3)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black",
        "paramName": "gray"
      }, {
        "paramType": "String",
        "paramDescription": "color as a CSS string",
        "paramName": "value"
      }, {
        "paramType": "Number[]",
        "paramDescription": "color as an array containing the red, green, and blue components",
        "paramName": "values"
      }, {
        "paramType": "p5.Color",
        "paramDescription": "color as a p5.Color",
        "paramName": "color"
      }]
    }, {
      "label": "directionalLight()",
      "description": "Creates a directional light with the given color and direction.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe(\n        'scene with sphere and directional light. The direction of the light is controlled with the mouse position.'\n    );\n}\n\nfunction draw() {\n    background(0);\n\n    //move your mouse to change light direction \n\n    let dirX = (mouseX / width - 0.5) * 2;\n    let dirY = (mouseY / height - 0.5) * 2;\n    directionalLight(250, 250, 250, -dirX, -dirY, -1);\n    noStroke();\n    sphere(40);\n}"],
      "href": "#/p5/directionalLight",
      "syntax": "directionalLight(v1, v2, v3, x, y, z)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "x component of direction (inclusive range of -1 to 1)",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of direction (inclusive range of -1 to 1)",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of direction (inclusive range of -1 to 1)",
        "paramName": "z"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "direction of light as a p5.Vector",
        "paramName": "direction"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }]
    }, {
      "label": "pointLight()",
      "description": "Creates a point light with the given color and position.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe(\n        'scene with sphere and point light. The position of the light is controlled with the mouse position.'\n    );\n}\n\nfunction draw() {\n    background(0);\n\n    // move your mouse to change light position \n\n    let locX = mouseX - width / 2;\n    let locY = mouseY - height / 2;\n\n    // to set the light position, \n\n\n    // think of the world's coordinate as: \n\n\n    // -width/2,-height/2 ----------- width/2,-height/2 \n\n\n    //                   |           | \n\n\n    //                   |    0,0    | \n\n\n    //                   |           | \n\n\n    //  -width/2,height/2 ----------- width/2,height/2 \n\n    pointLight(250, 250, 250, locX, locY, 50);\n    noStroke();\n    sphere(40);\n}"],
      "href": "#/p5/pointLight",
      "syntax": "pointLight(v1, v2, v3, x, y, z)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "x component of position",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of position",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of position",
        "paramName": "z"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "of light as a p5.Vector",
        "paramName": "position"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }]
    }, {
      "label": "lights()",
      "description": "Places an ambient and directional light in the scene.\nThe lights are set to ambientLight(128, 128, 128) and\ndirectionalLight(128, 128, 128, 0, 0, -1).",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('the light is partially ambient and partially directional');\n}\n\nfunction draw() {\n    background(0);\n    lights();\n    rotateX(millis() / 1000);\n    rotateY(millis() / 1000);\n    rotateZ(millis() / 1000);\n    box();\n}"],
      "href": "#/p5/lights",
      "syntax": "lights()",
      "parameters": []
    }, {
      "label": "lightFalloff()",
      "description": "Sets the falloff rate for <a href=\"#/p5/pointLight\" class=\"code\">pointLight()</a>\nand <a href=\"#/p5/spotLight\" class=\"code\">spotLight()</a>.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    describe(\n        'Two spheres with different falloff values show different intensity of light'\n    );\n}\n\nfunction draw() {\n    ortho();\n    background(0);\n\n    let locX = mouseX - width / 2;\n    let locY = mouseY - height / 2;\n    locX / = 2;\n    // half scale \n\n\n    lightFalloff(1, 0, 0);\n    push();\n    translate(-25, 0, 0);\n    pointLight(250, 250, 250, locX - 25, locY, 50);\n    sphere(20);\n    pop();\n\n    lightFalloff(0.97, 0.03, 0);\n    push();\n    translate(25, 0, 0);\n    pointLight(250, 250, 250, locX + 25, locY, 50);\n    sphere(20);\n    pop();\n}"],
      "href": "#/p5/lightFalloff",
      "syntax": "lightFalloff(constant, linear, quadratic)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "CONSTANT value for determining falloff",
        "paramName": "constant"
      }, {
        "paramType": "Number",
        "paramDescription": "LINEAR value for determining falloff",
        "paramName": "linear"
      }, {
        "paramType": "Number",
        "paramDescription": "QUADRATIC value for determining falloff",
        "paramName": "quadratic"
      }]
    }, {
      "label": "spotLight()",
      "description": "Creates a spot light with the given color, position,\nlight direction, angle, and concentration.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe(\n        'scene with sphere and spot light. The position of the light is controlled with the mouse position.'\n    );\n}\n\nfunction draw() {\n    background(0);\n\n    // move your mouse to change light position \n\n    let locX = mouseX - width / 2;\n    let locY = mouseY - height / 2;\n\n    // to set the light position, \n\n\n    // think of the world's coordinate as: \n\n\n    // -width/2,-height/2 ----------- width/2,-height/2 \n\n\n    //                   |           | \n\n\n    //                   |    0,0    | \n\n\n    //                   |           | \n\n\n    //  -width/2,height/2 ----------- width/2,height/2 \n\n    ambientLight(50);\n    spotLight(0, 250, 0, locX, locY, 100, 0, 0, -1, Math.PI / 16);\n    noStroke();\n    sphere(40);\n}"],
      "href": "#/p5/spotLight",
      "syntax": "spotLight(v1, v2, v3, x, y, z, rx, ry, rz, [angle], [concentration])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "x component of position",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of position",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of position",
        "paramName": "z"
      }, {
        "paramType": "Number",
        "paramDescription": "x component of light direction (inclusive range of -1 to 1)",
        "paramName": "rx"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of light direction (inclusive range of -1 to 1)",
        "paramName": "ry"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of light direction (inclusive range of -1 to 1)",
        "paramName": "rz"
      }, {
        "paramType": "Number",
        "paramDescription": "angle of cone. Defaults to PI/3",
        "paramName": "angle"
      }, {
        "paramType": "Number",
        "paramDescription": "concentration of cone. Defaults to 100",
        "paramName": "concentration"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "position of light as a p5.Vector",
        "paramName": "position"
      }, {
        "paramType": "p5.Vector",
        "paramDescription": "direction of light as a p5.Vector",
        "paramName": "direction"
      }]
    }, {
      "label": "noLights()",
      "description": "Removes all lights present in a sketch.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe(\n        'Three white spheres. Each appears as a different color due to lighting.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    noStroke();\n\n    ambientLight(255, 0, 0);\n    translate(-30, 0, 0);\n    ambientMaterial(255);\n    sphere(13);\n\n    noLights();\n    translate(30, 0, 0);\n    ambientMaterial(255);\n    sphere(13);\n\n    ambientLight(0, 255, 0);\n    translate(30, 0, 0);\n    ambientMaterial(255);\n    sphere(13);\n}"],
      "href": "#/p5/noLights",
      "syntax": "noLights()",
      "parameters": []
    }]
  }, {
    "subgroupName": "Material",
    "tokens": [{
      "label": "loadShader()",
      "description": "Creates a new <a href=\"#/p5.Shader\" class=\"code\">p5.Shader</a> object\nfrom the provided vertex and fragment shader files.",
      "examples": ["let mandel;\n\nfunction preload() {\n\n    // load the shader definitions from files \n\n    mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n\n    // use the shader \n\n    shader(mandel);\n    noStroke();\n    mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n    describe('zooming Mandelbrot set. a colorful, infinitely detailed fractal.');\n}\n\nfunction draw() {\n    mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n    quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}"],
      "href": "#/p5/loadShader",
      "syntax": "loadShader(vertFilename, fragFilename, [callback], [errorCallback])",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "path to file containing vertex shader source code",
        "paramName": "vertFilename"
      }, {
        "paramType": "String",
        "paramDescription": "path to file containing fragment shader source code",
        "paramName": "fragFilename"
      }, {
        "paramType": "Function",
        "paramDescription": "callback to be executed after loadShader completes. On success, the p5.Shader object is passed as the first argument.",
        "paramName": "callback"
      }, {
        "paramType": "Function",
        "paramDescription": "callback to be executed when an error occurs inside loadShader. On error, the error is passed as the first argument.",
        "paramName": "errorCallback"
      }]
    }, {
      "label": "createShader()",
      "description": "Creates a new <a href=\"#/p5.Shader\" class=\"code\">p5.Shader</a> object\nfrom the provided vertex and fragment shader code.",
      "examples": ["// the 'varying's are shared between both vertex & fragment shaders \n\nlet varying = 'precision highp float; varying vec2 vPos;';\n\n\n// the vertex shader is called for each vertex \n\nlet vs =\n    varying +\n    'attribute vec3 aPosition;' +\n    'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n\n\n// the fragment shader is called for each pixel \n\nlet fs =\n    varying +\n    'uniform vec2 p;' +\n    'uniform float r;' +\n    'const int I = 500;' +\n    'void main() {' +\n    '  vec2 c = p + vPos * r, z = c;' +\n    '  float n = 0.0;' +\n    '  for (int i = I; i > 0; i --) {' +\n    '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n    '      n = float(i)/float(I);' +\n    '      break;' +\n    '    }' +\n    '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n    '  }' +\n    '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n    '}';\n\nlet mandel;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n\n\n    // create and initialize the shader \n\n    mandel = createShader(vs, fs);\n    shader(mandel);\n    noStroke();\n\n\n    // 'p' is the center point of the Mandelbrot image \n\n    mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n    describe('zooming Mandelbrot set. a colorful, infinitely detailed fractal.');\n}\n\nfunction draw() {\n\n    // 'r' is the size of the image in Mandelbrot-space \n\n    mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n    quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}"],
      "href": "#/p5/createShader",
      "syntax": "createShader(vertSrc, fragSrc)",
      "parameters": [{
        "paramType": "String",
        "paramDescription": "source code for the vertex shader",
        "paramName": "vertSrc"
      }, {
        "paramType": "String",
        "paramDescription": "source code for the fragment shader",
        "paramName": "fragSrc"
      }]
    }, {
      "label": "shader()",
      "description": "Sets the <a href=\"#/p5.Shader\" class=\"code\">p5.Shader</a> object to\nbe used to render subsequent shapes.",
      "examples": ["// Click within the image to toggle \n\n\n// the shader used by the quad shape \n\n\n// Note: for an alternative approach to the same example, \n\n\n// involving changing uniforms please refer to: \n\n\n// https://p5js.org/reference/#/p5.Shader/setUniform \n\n\nlet redGreen;\nlet orangeBlue;\nlet showRedGreen = false;\n\nfunction preload() {\n\n    // note that we are using two instances \n\n\n    // of the same vertex and fragment shaders \n\n    redGreen = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n    orangeBlue = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n\n\n    // initialize the colors for redGreen shader \n\n    shader(redGreen);\n    redGreen.setUniform('colorCenter', [1.0, 0.0, 0.0]);\n    redGreen.setUniform('colorBackground', [0.0, 1.0, 0.0]);\n\n\n    // initialize the colors for orangeBlue shader \n\n    shader(orangeBlue);\n    orangeBlue.setUniform('colorCenter', [1.0, 0.5, 0.0]);\n    orangeBlue.setUniform('colorBackground', [0.226, 0.0, 0.615]);\n\n    noStroke();\n\n    describe(\n        'canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.'\n    );\n}\n\nfunction draw() {\n\n    // update the offset values for each shader, \n\n\n    // moving orangeBlue in vertical and redGreen \n\n\n    // in horizontal direction \n\n    orangeBlue.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n    redGreen.setUniform('offset', [sin(millis() / 2000), 1]);\n\n    if (showRedGreen === true) {\n        shader(redGreen);\n    } else {\n        shader(orangeBlue);\n    }\n    quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n\nfunction mouseClicked() {\n    showRedGreen = !showRedGreen;\n}"],
      "href": "#/p5/shader",
      "syntax": "shader(s)",
      "parameters": [{
        "paramType": "p5.Shader",
        "paramDescription": "the p5.Shader object to use for rendering shapes.",
        "paramName": "s"
      }]
    }, {
      "label": "resetShader()",
      "description": "Restores the default shaders. Code that runs after resetShader()\nwill not be affected by the shader previously set by\n<a href=\"#/p5/shader\" class=\"code\">shader()</a>",
      "examples": ["// This variable will hold our shader object \n\nlet shaderProgram;\n\n\n// This variable will hold our vertex shader source code \n\nlet vertSrc = `\n   attribute vec3 aPosition;\n   attribute vec2 aTexCoord;\n   uniform mat4 uProjectionMatrix;\n   uniform mat4 uModelViewMatrix;\n   varying vec2 vTexCoord;\n\n   void main() {\n     vTexCoord = aTexCoord;\n     vec4 position = vec4(aPosition, 1.0);\n     gl_Position = uProjectionMatrix * uModelViewMatrix * position;\n   }\n`;\n\n\n// This variable will hold our fragment shader source code \n\nlet fragSrc = `\n   precision mediump float;\n\n   varying vec2 vTexCoord;\n\n   void main() {\n     vec2 uv = vTexCoord;\n     vec3 color = vec3(uv.x, uv.y, min(uv.x + uv.y, 1.0));\n     gl_FragColor = vec4(color, 1.0);\n   }\n`;\n\nfunction setup() {\n\n    // Shaders require WEBGL mode to work \n\n    createCanvas(100, 100, WEBGL);\n\n\n    // Create our shader \n\n    shaderProgram = createShader(vertSrc, fragSrc);\n\n    describe(\n        'Two rotating cubes. The left one is painted using a custom (user-defined) shader, while the right one is painted using the default fill shader.'\n    );\n}\n\nfunction draw() {\n\n    // Clear the scene \n\n    background(200);\n\n\n    // Draw a box using our shader \n\n\n    // shader() sets the active shader with our shader \n\n    shader(shaderProgram);\n    push();\n    translate(-width / 4, 0, 0);\n    rotateX(millis() * 0.00025);\n    rotateY(millis() * 0.0005);\n    box(width / 4);\n    pop();\n\n\n    // Draw a box using the default fill shader \n\n\n    // resetShader() restores the default fill shader \n\n    resetShader();\n    fill(255, 0, 0);\n    push();\n    translate(width / 4, 0, 0);\n    rotateX(millis() * 0.00025);\n    rotateY(millis() * 0.0005);\n    box(width / 4);\n    pop();\n}"],
      "href": "#/p5/resetShader",
      "syntax": "resetShader()",
      "parameters": []
    }, {
      "label": "texture()",
      "description": "Sets the texture that will be used to render subsequent shapes.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('spinning cube with a texture from an image');\n}\n\nfunction draw() {\n    background(0);\n    rotateZ(frameCount * 0.01);\n    rotateX(frameCount * 0.01);\n    rotateY(frameCount * 0.01);\n\n    //pass image as texture \n\n    texture(img);\n    box(width / 2);\n}", "let pg;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    pg = createGraphics(200, 200);\n    pg.textSize(75);\n    describe('plane with a texture from an image created by createGraphics()');\n}\n\nfunction draw() {\n    background(0);\n    pg.background(255);\n    pg.text('hello!', 0, 100);\n\n    //pass image as texture \n\n    texture(pg);\n    rotateX(0.5);\n    noStroke();\n    plane(50);\n}", "let vid;\n\nfunction preload() {\n    vid = createVideo('assets/fingers.mov');\n    vid.hide();\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('rectangle with video as texture');\n}\n\nfunction draw() {\n    background(0);\n\n    //pass video frame as texture \n\n    texture(vid);\n    rect(-40, -40, 80, 80);\n}\n\nfunction mousePressed() {\n    vid.loop();\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('quad with a texture, mapped using normalized coordinates');\n}\n\nfunction draw() {\n    background(0);\n    texture(img);\n    textureMode(NORMAL);\n    beginShape();\n    vertex(-40, -40, 0, 0);\n    vertex(40, -40, 1, 0);\n    vertex(40, 40, 1, 1);\n    vertex(-40, 40, 0, 1);\n    endShape();\n}"],
      "href": "#/p5/texture",
      "syntax": "texture(tex)",
      "parameters": [{
        "paramType": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture|p5.Framebuffer|p5.FramebufferTexture",
        "paramDescription": "image to use as texture",
        "paramName": "tex"
      }]
    }, {
      "label": "textureMode()",
      "description": "Sets the coordinate space for texture mapping. The default mode is IMAGE\nwhich refers to the actual coordinates of the image.\nNORMAL refers to a normalized space of values ranging from 0 to 1.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('quad with a texture, mapped using normalized coordinates');\n}\n\nfunction draw() {\n    texture(img);\n    textureMode(NORMAL);\n    beginShape();\n    vertex(-50, -50, 0, 0);\n    vertex(50, -50, 1, 0);\n    vertex(50, 50, 1, 1);\n    vertex(-50, 50, 0, 1);\n    endShape();\n}", "let img;\n\nfunction preload() {\n    img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('quad with a texture, mapped using image coordinates');\n}\n\nfunction draw() {\n    texture(img);\n    textureMode(IMAGE);\n    beginShape();\n    vertex(-50, -50, 0, 0);\n    vertex(50, -50, img.width, 0);\n    vertex(50, 50, img.width, img.height);\n    vertex(-50, 50, 0, img.height);\n    endShape();\n}"],
      "href": "#/p5/textureMode",
      "syntax": "textureMode(mode)",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either IMAGE or NORMAL",
        "paramName": "mode"
      }]
    }, {
      "label": "textureWrap()",
      "description": "Sets the global texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 to 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR.",
      "examples": ["let img;\n\nfunction preload() {\n    img = loadImage('assets/rockies128.jpg');\n}\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    textureWrap(MIRROR);\n    describe('an image of the rocky mountains repeated in mirrored tiles');\n}\n\nfunction draw() {\n    background(0);\n\n    let dX = mouseX;\n    let dY = mouseY;\n\n    let u = lerp(1.0, 2.0, dX);\n    let v = lerp(1.0, 2.0, dY);\n\n    scale(width / 2);\n\n    texture(img);\n\n    beginShape(TRIANGLES);\n    vertex(-1, -1, 0, 0, 0);\n    vertex(1, -1, 0, u, 0);\n    vertex(1, 1, 0, u, v);\n\n    vertex(1, 1, 0, u, v);\n    vertex(-1, 1, 0, 0, v);\n    vertex(-1, -1, 0, 0, 0);\n    endShape();\n}"],
      "href": "#/p5/textureWrap",
      "syntax": "textureWrap(wrapX, [wrapY])",
      "parameters": [{
        "paramType": "Constant",
        "paramDescription": "either CLAMP, REPEAT, or MIRROR",
        "paramName": "wrapX"
      }, {
        "paramType": "Constant",
        "paramDescription": "either CLAMP, REPEAT, or MIRROR",
        "paramName": "wrapY"
      }]
    }, {
      "label": "normalMaterial()",
      "description": "Sets the current material as a normal material.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('Sphere with normal material');\n}\n\nfunction draw() {\n    background(200);\n    normalMaterial();\n    sphere(40);\n}"],
      "href": "#/p5/normalMaterial",
      "syntax": "normalMaterial()",
      "parameters": []
    }, {
      "label": "ambientMaterial()",
      "description": "Sets the ambient color of the material.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('sphere reflecting red, blue, and green light');\n}\n\nfunction draw() {\n    background(0);\n    noStroke();\n    ambientLight(255);\n    ambientMaterial(70, 130, 230);\n    sphere(40);\n}", "// ambientLight is both red and blue (magenta), \n\n\n// so object only reflects it's red and blue components \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('box reflecting only red and blue light');\n}\n\nfunction draw() {\n    background(70);\n    ambientLight(255, 0, 255);\n    // magenta light \n\n    ambientMaterial(255);\n    // white material \n\n    box(30);\n}", "// ambientLight is green. Since object does not contain \n\n\n// green, it does not reflect any light \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('box reflecting no light');\n}\n\nfunction draw() {\n    background(70);\n    ambientLight(0, 255, 0);\n    // green light \n\n    ambientMaterial(255, 0, 255);\n    // magenta material \n\n    box(30);\n}"],
      "href": "#/p5/ambientMaterial",
      "syntax": "ambientMaterial(v1, v2, v3)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black",
        "paramName": "gray"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }]
    }, {
      "label": "emissiveMaterial()",
      "description": "Sets the emissive color of the material.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('sphere with green emissive material');\n}\n\nfunction draw() {\n    background(0);\n    noStroke();\n    ambientLight(0);\n    emissiveMaterial(130, 230, 0);\n    sphere(40);\n}"],
      "href": "#/p5/emissiveMaterial",
      "syntax": "emissiveMaterial(v1, v2, v3, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "Number",
        "paramDescription": "alpha value relative to current color range (default is 0-255)",
        "paramName": "alpha"
      }, {
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black",
        "paramName": "gray"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }]
    }, {
      "label": "specularMaterial()",
      "description": "Sets the specular color of the material.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    noStroke();\n    describe('torus with specular material');\n}\n\nfunction draw() {\n    background(0);\n\n    ambientLight(60);\n\n\n    // add point light to showcase specular material \n\n    let locX = mouseX - width / 2;\n    let locY = mouseY - height / 2;\n    pointLight(255, 255, 255, locX, locY, 50);\n\n    specularMaterial(250);\n    shininess(50);\n    torus(30, 10, 64, 64);\n}"],
      "href": "#/p5/specularMaterial",
      "syntax": "specularMaterial(gray, [alpha])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "number specifying value between white and black.",
        "paramName": "gray"
      }, {
        "paramType": "Number",
        "paramDescription": "alpha value relative to current color range (default is 0-255)",
        "paramName": "alpha"
      }, {
        "paramType": "Number",
        "paramDescription": "red or hue value relative to the current color range",
        "paramName": "v1"
      }, {
        "paramType": "Number",
        "paramDescription": "green or saturation value relative to the current color range",
        "paramName": "v2"
      }, {
        "paramType": "Number",
        "paramDescription": "blue or brightness value relative to the current color range",
        "paramName": "v3"
      }, {
        "paramType": "p5.Color|Number[]|String",
        "paramDescription": "color as a p5.Color, as an array, or as a CSS string",
        "paramName": "color"
      }]
    }, {
      "label": "shininess()",
      "description": "Sets the amount of gloss (\"shininess\") of a\n<a href=\"#/p5/specularMaterial\" class=\"code\">specularMaterial()</a>.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('two spheres, one more shiny than the other');\n}\n\nfunction draw() {\n    background(0);\n    noStroke();\n    let locX = mouseX - width / 2;\n    let locY = mouseY - height / 2;\n    ambientLight(60, 60, 60);\n    pointLight(255, 255, 255, locX, locY, 50);\n    specularMaterial(250);\n    translate(-25, 0, 0);\n    shininess(1);\n    sphere(20);\n    translate(50, 0, 0);\n    shininess(20);\n    sphere(20);\n}"],
      "href": "#/p5/shininess",
      "syntax": "shininess(shine)",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "degree of shininess",
        "paramName": "shine"
      }]
    }, {
      "label": "p5.Shader",
      "description": "Shader class for WEBGL Mode",
      "examples": [],
      "href": "#/p5.Shader",
      "syntax": "new p5.Shader(renderer, vertSrc, fragSrc)",
      "parameters": [{
        "paramType": "p5.RendererGL",
        "paramDescription": "an instance of p5.RendererGL that will provide the GL context for this new p5.Shader",
        "paramName": "renderer"
      }, {
        "paramType": "String",
        "paramDescription": "source code for the vertex shader (as a string)",
        "paramName": "vertSrc"
      }, {
        "paramType": "String",
        "paramDescription": "source code for the fragment shader (as a string)",
        "paramName": "fragSrc"
      }]
    }]
  }, {
    "subgroupName": "Camera",
    "tokens": [{
      "label": "camera()",
      "description": "Sets the position of the current camera in a 3D sketch.\nParameters for this function define the camera's position,\nthe center of the sketch (where the camera is pointing),\nand an up direction (the orientation of the camera).",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    describe('a square moving closer and then away from the camera.');\n}\n\nfunction draw() {\n    background(204);\n\n    //move the camera away from the plane by a sin wave \n\n    camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\n    plane(10, 10);\n}", "//move slider to see changes! \n\n\n//sliders control the first 6 parameters of camera() \n\nlet sliderGroup = [];\nlet X;\nlet Y;\nlet Z;\nlet centerX;\nlet centerY;\nlet centerZ;\nlet h = 20;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n\n    //create sliders \n\n    for (var i = 0; i < 6; i++) {\n        if (i === 2) {\n            sliderGroup[i] = createSlider(10, 400, 200);\n        } else {\n            sliderGroup[i] = createSlider(-400, 400, 0);\n        }\n        h = map(i, 0, 6, 5, 85);\n        sliderGroup[i].position(10, height + h);\n        sliderGroup[i].style('width', '80px');\n    }\n    describe(\n        'White square repeatedly grows to fill canvas and then shrinks. An interactive example of a red cube with 3 sliders for moving it across x, y, z axis and 3 sliders for shifting its center.'\n    );\n}\n\nfunction draw() {\n    background(60);\n\n    // assigning sliders' value to each parameters \n\n    X = sliderGroup[0].value();\n    Y = sliderGroup[1].value();\n    Z = sliderGroup[2].value();\n    centerX = sliderGroup[3].value();\n    centerY = sliderGroup[4].value();\n    centerZ = sliderGroup[5].value();\n    camera(X, Y, Z, centerX, centerY, centerZ, 0, 1, 0);\n    stroke(255);\n    fill(255, 102, 94);\n    box(85);\n}"],
      "href": "#/p5/camera",
      "syntax": "new camera([x], [y], [z], [centerX], [centerY], [centerZ], [upX], [upY], [upZ])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "camera position value on x axis",
        "paramName": "x"
      }, {
        "paramType": "Number",
        "paramDescription": "camera position value on y axis",
        "paramName": "y"
      }, {
        "paramType": "Number",
        "paramDescription": "camera position value on z axis",
        "paramName": "z"
      }, {
        "paramType": "Number",
        "paramDescription": "x coordinate representing center of the sketch",
        "paramName": "centerX"
      }, {
        "paramType": "Number",
        "paramDescription": "y coordinate representing center of the sketch",
        "paramName": "centerY"
      }, {
        "paramType": "Number",
        "paramDescription": "z coordinate representing center of the sketch",
        "paramName": "centerZ"
      }, {
        "paramType": "Number",
        "paramDescription": "x component of direction 'up' from camera",
        "paramName": "upX"
      }, {
        "paramType": "Number",
        "paramDescription": "y component of direction 'up' from camera",
        "paramName": "upY"
      }, {
        "paramType": "Number",
        "paramDescription": "z component of direction 'up' from camera",
        "paramName": "upZ"
      }]
    }, {
      "label": "perspective()",
      "description": "Sets a perspective projection for the current camera in a 3D sketch.\nThis projection represents depth through foreshortening: objects\nthat are close to the camera appear their actual size while those\nthat are further away from the camera appear smaller.",
      "examples": ["//drag the mouse to look around! \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    perspective(PI / 3.0, width / height, 0.1, 500);\n    describe(\n        'two colored 3D boxes move back and forth, rotating as mouse is dragged.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    normalMaterial();\n\n    rotateX(-0.3);\n    rotateY(-0.2);\n    translate(0, 0, -50);\n\n    push();\n    translate(-15, 0, sin(frameCount / 30) * 95);\n    box(30);\n    pop();\n    push();\n    translate(15, 0, sin(frameCount / 30 + PI) * 95);\n    box(30);\n    pop();\n}"],
      "href": "#/p5/perspective",
      "syntax": "perspective([fovy], [aspect], [near], [far])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "camera frustum vertical field of view, from bottom to top of view, in angleMode units",
        "paramName": "fovy"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum aspect ratio",
        "paramName": "aspect"
      }, {
        "paramType": "Number",
        "paramDescription": "frustum near plane length",
        "paramName": "near"
      }, {
        "paramType": "Number",
        "paramDescription": "frustum far plane length",
        "paramName": "far"
      }]
    }, {
      "label": "ortho()",
      "description": "Sets an orthographic projection for the current camera in a 3D sketch\nand defines a box-shaped viewing frustum within which objects are seen.\nIn this projection, all objects with the same dimension appear the same\nsize, regardless of whether they are near or far from the camera.",
      "examples": ["//drag the mouse to look around! \n\n\n//there's no vanishing point \n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\n    describe(\n        'two 3D boxes move back and forth along same plane, rotating as mouse is dragged.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    normalMaterial();\n\n    rotateX(0.2);\n    rotateY(-0.2);\n    push();\n    translate(-15, 0, sin(frameCount / 30) * 65);\n    box(30);\n    pop();\n    push();\n    translate(15, 0, sin(frameCount / 30 + PI) * 65);\n    box(30);\n    pop();\n}"],
      "href": "#/p5/ortho",
      "syntax": "ortho([left], [right], [bottom], [top], [near], [far])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "camera frustum left plane",
        "paramName": "left"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum right plane",
        "paramName": "right"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum bottom plane",
        "paramName": "bottom"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum top plane",
        "paramName": "top"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum near plane",
        "paramName": "near"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum far plane",
        "paramName": "far"
      }]
    }, {
      "label": "frustum()",
      "description": "Sets the frustum of the current camera as defined by\nthe parameters.",
      "examples": ["function setup() {\n    createCanvas(100, 100, WEBGL);\n    setAttributes('antialias', true);\n    frustum(-0.1, 0.1, -0.1, 0.1, 0.1, 200);\n    describe(\n        'two 3D boxes move back and forth along same plane, rotating as mouse is dragged.'\n    );\n}\n\nfunction draw() {\n    background(200);\n    orbitControl();\n    normalMaterial();\n\n    rotateY(-0.2);\n    rotateX(-0.3);\n    push();\n    translate(-15, 0, sin(frameCount / 30) * 25);\n    box(30);\n    pop();\n    push();\n    translate(15, 0, sin(frameCount / 30 + PI) * 25);\n    box(30);\n    pop();\n}"],
      "href": "#/p5/frustum",
      "syntax": "frustum([left], [right], [bottom], [top], [near], [far])",
      "parameters": [{
        "paramType": "Number",
        "paramDescription": "camera frustum left plane",
        "paramName": "left"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum right plane",
        "paramName": "right"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum bottom plane",
        "paramName": "bottom"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum top plane",
        "paramName": "top"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum near plane",
        "paramName": "near"
      }, {
        "paramType": "Number",
        "paramDescription": "camera frustum far plane",
        "paramName": "far"
      }]
    }, {
      "label": "createCamera()",
      "description": "Creates a new <a href=\"#/p5.Camera\" class=\"code\">p5.Camera</a> object and sets it\nas the current (active) camera.",
      "examples": ["// Creates a camera object and animates it around a box. \n\nlet camera;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    background(0);\n    camera = createCamera();\n    describe('An example that creates a camera and moves it around the box.');\n}\n\nfunction draw() {\n    background(0);\n\n    // The camera will automatically \n\n\n    // rotate to look at [0, 0, 0]. \n\n    camera.lookAt(0, 0, 0);\n\n\n    // The camera will move on the \n\n\n    // x axis. \n\n    camera.setPosition(sin(frameCount / 60) * 200, 0, 100);\n    box(20);\n\n\n    // A 'ground' box to give the viewer \n\n\n    // a better idea of where the camera \n\n\n    // is looking. \n\n    translate(0, 50, 0);\n    rotateX(HALF_PI);\n    box(150, 150, 20);\n}"],
      "href": "#/p5/createCamera",
      "syntax": "createCamera()",
      "parameters": []
    }, {
      "label": "p5.Camera",
      "description": "This class describes a camera for use in p5's\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\nWebGL mode</a>. It contains camera position, orientation, and projection\ninformation necessary for rendering a 3D scene.",
      "examples": ["let cam;\nlet delta = 0.01;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    normalMaterial();\n    cam = createCamera();\n\n    // set initial pan angle \n\n    cam.pan(-0.8);\n    describe(\n        'camera view pans left and right across a series of rotating 3D boxes.'\n    );\n}\n\nfunction draw() {\n    background(200);\n\n\n    // pan camera according to angle 'delta' \n\n    cam.pan(delta);\n\n\n    // every 160 frames, switch direction \n\n    if (frameCount % 160 === 0) {\n        delta * = -1;\n    }\n\n    rotateX(frameCount * 0.01);\n    translate(-100, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n}"],
      "href": "#/p5.Camera",
      "syntax": "",
      "parameters": []
    }, {
      "label": "setCamera()",
      "description": "Sets the current (active) camera of a 3D sketch.\nAllows for switching between multiple cameras.",
      "examples": ["let cam1, cam2;\nlet currentCamera;\n\nfunction setup() {\n    createCanvas(100, 100, WEBGL);\n    normalMaterial();\n\n    cam1 = createCamera();\n    cam2 = createCamera();\n    cam2.setPosition(30, 0, 50);\n    cam2.lookAt(0, 0, 0);\n    cam2.ortho();\n\n\n    // set variable for previously active camera: \n\n    currentCamera = 1;\n\n    describe(\n        'Canvas switches between two camera views, each showing a series of spinning 3D boxes.'\n    );\n}\n\nfunction draw() {\n    background(200);\n\n\n    // camera 1: \n\n    cam1.lookAt(0, 0, 0);\n    cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\n\n\n    // every 100 frames, switch between the two cameras \n\n    if (frameCount % 100 === 0) {\n        if (currentCamera === 1) {\n            setCamera(cam1);\n            currentCamera = 0;\n        } else {\n            setCamera(cam2);\n            currentCamera = 1;\n        }\n    }\n\n    drawBoxes();\n}\n\nfunction drawBoxes() {\n    rotateX(frameCount * 0.01);\n    translate(-100, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n    translate(35, 0, 0);\n    box(20);\n}"],
      "href": "#/p5/setCamera",
      "syntax": "setCamera(cam)",
      "parameters": [{
        "paramType": "p5.Camera",
        "paramDescription": "p5.Camera object",
        "paramName": "cam"
      }]
    }]
  }]
}]