[{
    "groupName": "Structure",
    "examples": [{
        "name": "Comments and Statements",
        "description": "Statements are the elements that make up programs. The \";\" (semi-colon) symbol is used to end statements. It is called the \"statement terminator\". Comments are used for making notes to help people better understand programs. A comment begins with two forward slashes (\"//\").\n\nThis example is ported from the Statements and Comments example on the Processing website",
        "code": " \n// The createCanvas function is a statement that tells the computer \n, \n// how large to make the window.\n, \n// Each function statement has zero or more parameters. \n, \n// Parameters are data passed into the function\n, \n// and are used as values for telling the computer what to do.\n, function, setup, (, ), {,   , createCanvas, (, 710, ,, 400, ), ;, }, \n// The background function is a statement that tells the computer\n, \n// which color (or gray value) to make the background of the display window \n, function, draw, (, ), {,   , background, (, 204, ,, 153, ,, 0, ), ;, }"
    }, {
        "name": "Coordinates",
        "description": "All shapes drawn to the screen have a position that is specified as a coordinate. All coordinates are measured as the distance from the origin in units of pixels. The origin [0, 0] is the coordinate in the upper left of the window and the coordinate in the lower right is [width-1, height-1].",
        "code": " function, setup, (, ), {, \n// Sets the screen to be 720 pixels wide and 400 pixels high\n, createCanvas, (, 720, ,, 400, ), ;, }, function, draw, (, ), {, \n// Set the background to black and turn off the fill color\n, background, (, 0, ), ;, noFill, (, ), ;, \n// The two parameters of the point() method each specify\n, \n// coordinates.\n, \n// The first parameter is the x-coordinate and the second is the Y\n, stroke, (, 255, ), ;, point, (, width, *, 0.5, ,, height, *, 0.5, ), ;, point, (, width, *, 0.5, ,, height, *, 0.25, ), ;, \n// Coordinates are used for drawing all shapes, not just points.\n, \n// Parameters for different functions are used for different\n, \n// purposes. For example, the first two parameters to line()\n, \n// specify the coordinates of the first endpoint and the second\n, \n// two parameters specify the second endpoint\n, stroke, (, 0, ,, 153, ,, 255, ), ;, line, (, 0, ,, height, *, 0.33, ,, width, ,, height, *, 0.33, ), ;, \n// By default, the first two parameters to rect() are the\n, \n// coordinates of the upper-left corner and the second pair\n, \n// is the width and height\n, stroke, (, 255, ,, 153, ,, 0, ), ;, rect, (, width, *, 0.25, ,, height, *, 0.1, ,, width, *, 0.5, ,, height, *, 0.8, ), ;, }"
    }, {
        "name": "Width and Height",
        "description": "The 'width' and 'height' variables contain the width and height of the display window as defined in the createCanvas() function.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 127, ), ;, noStroke, (, ), ;, for, (, let, i, =, 0, ;, i, <, height, ;, i, +=, 20, ), {,   , fill, (, 129, ,, 206, ,, 15, ), ;,   , rect, (, 0, ,, i, ,, width, ,, 10, ), ;,   , fill, (, 255, ), ;,   , rect, (, i, ,, 0, ,, 10, ,, height, ), ;, }, }"
    }, {
        "name": "Setup and Draw",
        "description": "The code inside the draw() function runs continuously from top to bottom until the program is stopped. The code in setup() is run once when the program starts.",
        "code": " let, y, =, 100, ;, \n// The statements in the setup() function\n, \n// execute once when the program begins\n, function, setup, (, ), {, \n// createCanvas must be the first statement\n, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, \n// Set line drawing color to white\n, frameRate, (, 30, ), ;, }, \n// The statements in draw() are executed until the\n, \n// program is stopped. Each statement is executed in\n, \n// sequence and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 0, ), ;, \n// Set the background to black\n, y, =, y, -, 1, ;, if, (, y, <, 0, ), {,   , y, =, height, ;, }, line, (, 0, ,, y, ,, width, ,, y, ), ;, }"
    }, {
        "name": "No Loop",
        "description": "The noLoop() function causes draw() to only execute once. Without calling noLoop(), the code inside draw() is run continually.",
        "code": " let, y, ;, \n// The statements in the setup() function\n, \n// execute once when the program begins\n, function, setup, (, ), {, \n// createCanvas should be the first statement\n, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, \n// Set line drawing color to white\n, noLoop, (, ), ;, y, =, height, *, 0.5, ;, }, \n// The statements in draw() are executed until the\n, \n// program is stopped. Each statement is executed in\n, \n// sequence and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 0, ), ;, \n// Set the background to black\n, y, =, y, -, 1, ;, if, (, y, <, 0, ), {,   , y, =, height, ;, }, line, (, 0, ,, y, ,, width, ,, y, ), ;, }"
    }, {
        "name": "Loop",
        "description": "If noLoop() is run in setup(), the code in draw() is only run once. In this example, click the mouse to run the loop() function to cause the draw() the run continuously.",
        "code": " let, y, =, 0, ;, \n// The statements in the setup() function\n, \n// execute once when the program begins\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, \n// Size must be the first statement\n, stroke, (, 255, ), ;, \n// Set line drawing color to white\n, frameRate, (, 30, ), ;, noLoop, (, ), ;, }, \n// The statements in draw() are executed until the\n, \n// program is stopped. Each statement is executed in\n, \n// sequence and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 0, ), ;, \n// Set the background to black\n, y, =, y, -, 1, ;, if, (, y, <, 0, ), {,   , y, =, height, ;, }, line, (, 0, ,, y, ,, width, ,, y, ), ;, }, function, mousePressed, (, ), {, loop, (, ), ;, }"
    }, {
        "name": "Redraw",
        "description": "The redraw() function makes draw() execute once. In this example, draw() is executed once every time the mouse is clicked.",
        "code": " let, y, ;, \n// The statements in the setup() function\n, \n// execute once when the program begins\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, noLoop, (, ), ;, y, =, height, *, 0.5, ;, }, \n// The statements in draw() are executed until the\n, \n// program is stopped. Each statement is executed in\n, \n// sequence and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 0, ), ;, y, =, y, -, 4, ;, if, (, y, <, 0, ), {,   , y, =, height, ;, }, line, (, 0, ,, y, ,, width, ,, y, ), ;, }, function, mousePressed, (, ), {, redraw, (, ), ;, }"
    }, {
        "name": "Functions",
        "description": "The drawTarget() function makes it easy to draw many distinct *targets. Each call to drawTarget() specifies the position, size, and number of *rings for each target.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 51, ), ;, noStroke, (, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, drawTarget, (, width, *, 0.25, ,, height, *, 0.4, ,, 200, ,, 4, ), ;, drawTarget, (, width, *, 0.5, ,, height, *, 0.5, ,, 300, ,, 10, ), ;, drawTarget, (, width, *, 0.75, ,, height, *, 0.3, ,, 120, ,, 6, ), ;, }, function, drawTarget, (, xloc, , , yloc, , , size, , , num, ), {, const, grayvalues, =, 255, /, num, ;, const, steps, =, size, /, num, ;, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , fill, (, i, *, grayvalues, ), ;,   , ellipse, (, xloc, ,, yloc, ,, size, -, i, *, steps, ,, size, -, i, *, steps, ), ;, }, }"
    }, {
        "name": "Recursion",
        "description": "A demonstration of recursion, which means functions call themselves. A recursive function must have a terminating condition, without which it will go into an infinite loop. Notice how the drawCircle() function calls itself at the end of its block. It continues to do this until the variable \"level\" is equal to 1.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 560, ), ;, noStroke, (, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, drawCircle, (, width, /, 2, ,, 280, ,, 6, ), ;, }, function, drawCircle, (, x, , , radius, , , level, ), {, \n// 'level' is the variable that terminates the recursion once it reaches \n, \n// a certain value (here, 1). If a terminating condition is not \n, \n// specified, a recursive function keeps calling itself again and again\n, \n// until it runs out of stack space - not a favourable outcome! \n, const, tt, =, (, 126, *, level, ), /, 4.0, ;, fill, (, tt, ), ;, ellipse, (, x, ,, height, /, 2, ,, radius, *, 2, ,, radius, *, 2, ), ;, if, (, level, >, 1, ), {,   , \n// 'level' decreases by 1 at every step and thus makes the terminating condition\n,   , \n// attainable\n,   , level, =, level, -, 1, ;,   , drawCircle, (, x, -, radius, /, 2, ,, radius, /, 2, ,, level, ), ;,   , drawCircle, (, x, +, radius, /, 2, ,, radius, /, 2, ,, level, ), ;, }, }"
    }, {
        "name": "Create Graphics",
        "description": "Creates and returns a new p5.Renderer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels.",
        "code": " let, pg, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, pg, =, createGraphics, (, 400, ,, 250, ), ;, }, function, draw, (, ), {, fill, (, 0, ,, 12, ), ;, rect, (, 0, ,, 0, ,, width, ,, height, ), ;, fill, (, 255, ), ;, noStroke, (, ), ;, ellipse, (, mouseX, ,, mouseY, ,, 60, ,, 60, ), ;, pg, ., background, (, 51, ), ;, pg, ., noFill, (, ), ;, pg, ., stroke, (, 255, ), ;, pg, ., ellipse, (, mouseX, -, 150, ,, mouseY, -, 75, ,, 60, ,, 60, ), ;, \n//Draw the offscreen buffer to the screen with image()\n, image, (, pg, ,, 150, ,, 75, ), ;, }"
    }]
}, {
    "groupName": "Form",
    "examples": [{
        "name": "Points and Lines",
        "description": "Points and lines can be used to draw basic geometry. Change the value of the variable 'd' to scale the form. The four variables set the positions based on the value of 'd'.",
        "code": " function, setup, (, ), {, let, d, =, 70, ;, let, p1, =, d, ;, let, p2, =, p1, +, d, ;, let, p3, =, p2, +, d, ;, let, p4, =, p3, +, d, ;, \n// Sets the screen to be 720 pixels wide and 400 pixels high\n, createCanvas, (, 720, ,, 400, ), ;, background, (, 0, ), ;, noSmooth, (, ), ;, translate, (, 140, ,, 0, ), ;, \n// Draw gray box\n, stroke, (, 153, ), ;, line, (, p3, ,, p3, ,, p2, ,, p3, ), ;, line, (, p2, ,, p3, ,, p2, ,, p2, ), ;, line, (, p2, ,, p2, ,, p3, ,, p2, ), ;, line, (, p3, ,, p2, ,, p3, ,, p3, ), ;, \n// Draw white points\n, stroke, (, 255, ), ;, point, (, p1, ,, p1, ), ;, point, (, p1, ,, p3, ), ;, point, (, p2, ,, p4, ), ;, point, (, p3, ,, p1, ), ;, point, (, p4, ,, p2, ), ;, point, (, p4, ,, p4, ), ;, }"
    }, {
        "name": "Shape Primitives",
        "description": "The basic shape primitive functions are triangle(), rect(), quad(), ellipse(), and arc(). Squares are made with rect() and circles are made with ellipse(). Each of these functions requires a number of parameters to determine the shape's position and size.",
        "code": " function, setup, (, ), {, \n// Sets the screen to be 720 pixels wide and 400 pixels high\n, createCanvas, (, 720, ,, 400, ), ;, background, (, 0, ), ;, noStroke, (, ), ;, fill, (, 204, ), ;, triangle, (, 18, ,, 18, ,, 18, ,, 360, ,, 81, ,, 360, ), ;, fill, (, 102, ), ;, rect, (, 81, ,, 81, ,, 63, ,, 63, ), ;, fill, (, 204, ), ;, quad, (, 189, ,, 18, ,, 216, ,, 18, ,, 216, ,, 360, ,, 144, ,, 360, ), ;, fill, (, 255, ), ;, ellipse, (, 252, ,, 144, ,, 72, ,, 72, ), ;, fill, (, 204, ), ;, triangle, (, 288, ,, 18, ,, 351, ,, 360, ,, 288, ,, 360, ), ;, fill, (, 255, ), ;, arc, (, 479, ,, 300, ,, 280, ,, 280, ,, PI, ,, TWO_PI, ), ;, }"
    }, {
        "name": "Pie Chart",
        "description": "Uses the arc() function to generate a pie chart from the data stored in an array.",
        "code": " let, angles, =, [, 30, ,, 10, ,, 45, ,, 35, ,, 60, ,, 38, ,, 75, ,, 67, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, noLoop, (, ), ;, \n// Run once and stop\n, }, function, draw, (, ), {, background, (, 100, ), ;, pieChart, (, 300, ,, angles, ), ;, }, function, pieChart, (, diameter, , , data, ), {, let, lastAngle, =, 0, ;, for, (, let, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {,   , let, gray, =, map, (, i, ,, 0, ,, data, ., length, ,, 0, ,, 255, ), ;,   , fill, (, gray, ), ;,   , arc, (,   ,   , width, /, 2, ,,   ,   , height, /, 2, ,,   ,   , diameter, ,,   ,   , diameter, ,,   ,   , lastAngle, ,,   ,   , lastAngle, +, radians, (, angles, [, i, ]),   , ), ;,   , lastAngle, +=, radians, (, angles, [, i, ]), ;, }, }"
    }, {
        "name": "Regular Polygon",
        "description": "What is your favorite? Pentagon? Hexagon? Heptagon? No? What about the icosagon? The polygon() function created for this example is capable of drawing any regular polygon. Try placing different numbers into the polygon() function calls within draw() to explore.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 102, ), ;, push, (, ), ;, translate, (, width, *, 0.2, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, 200.0, ), ;, polygon, (, 0, ,, 0, ,, 82, ,, 3, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, *, 0.5, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, 50.0, ), ;, polygon, (, 0, ,, 0, ,, 80, ,, 20, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, *, 0.8, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, -100.0, ), ;, polygon, (, 0, ,, 0, ,, 70, ,, 7, ), ;, pop, (, ), ;, }, function, polygon, (, x, , , y, , , radius, , , npoints, ), {, let, angle, =, TWO_PI, /, npoints, ;, beginShape, (, ), ;, for, (, let, a, =, 0, ;, a, <, TWO_PI, ;, a, +=, angle, ), {,   , let, sx, =, x, +, cos, (, a, ), *, radius, ;,   , let, sy, =, y, +, sin, (, a, ), *, radius, ;,   , vertex, (, sx, ,, sy, ), ;, }, endShape, (, CLOSE, ), ;, }"
    }, {
        "name": "Star",
        "description": "The star() function created for this example is capable of drawing a wide range of different forms. Try placing different numbers into the star() function calls within draw() to explore.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 102, ), ;, push, (, ), ;, translate, (, width, *, 0.2, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, 200.0, ), ;, star, (, 0, ,, 0, ,, 5, ,, 70, ,, 3, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, *, 0.5, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, 50.0, ), ;, star, (, 0, ,, 0, ,, 80, ,, 100, ,, 40, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, *, 0.8, ,, height, *, 0.5, ), ;, rotate, (, frameCount, /, -100.0, ), ;, star, (, 0, ,, 0, ,, 30, ,, 70, ,, 5, ), ;, pop, (, ), ;, }, function, star, (, x, , , y, , , radius1, , , radius2, , , npoints, ), {, let, angle, =, TWO_PI, /, npoints, ;, let, halfAngle, =, angle, /, 2.0, ;, beginShape, (, ), ;, for, (, let, a, =, 0, ;, a, <, TWO_PI, ;, a, +=, angle, ), {,   , let, sx, =, x, +, cos, (, a, ), *, radius2, ;,   , let, sy, =, y, +, sin, (, a, ), *, radius2, ;,   , vertex, (, sx, ,, sy, ), ;,   , sx, =, x, +, cos, (, a, +, halfAngle, ), *, radius1, ;,   , sy, =, y, +, sin, (, a, +, halfAngle, ), *, radius1, ;,   , vertex, (, sx, ,, sy, ), ;, }, endShape, (, CLOSE, ), ;, }"
    }, {
        "name": "Triangle Strip",
        "description": "Example by Ira Greenberg. Generate a closed ring using the vertex() function and beginShape(TRIANGLE_STRIP) mode. The outsideRadius and insideRadius variables control ring's radii respectively.",
        "code": " let, x, ;, let, y, ;, let, outsideRadius, =, 150, ;, let, insideRadius, =, 100, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 204, ), ;, x, =, width, /, 2, ;, y, =, height, /, 2, ;, }, function, draw, (, ), {, background, (, 204, ), ;, let, numPoints, =, int, (, map, (, mouseX, ,, 0, ,, width, ,, 6, ,, 60, )), ;, let, angle, =, 0, ;, let, angleStep, =, 180.0, /, numPoints, ;, beginShape, (, TRIANGLE_STRIP, ), ;, for, (, let, i, =, 0, ;, i, <=, numPoints, ;, i, ++, ), {,   , let, px, =, x, +, cos, (, radians, (, angle, )), *, outsideRadius, ;,   , let, py, =, y, +, sin, (, radians, (, angle, )), *, outsideRadius, ;,   , angle, +=, angleStep, ;,   , vertex, (, px, ,, py, ), ;,   , px, =, x, +, cos, (, radians, (, angle, )), *, insideRadius, ;,   , py, =, y, +, sin, (, radians, (, angle, )), *, insideRadius, ;,   , vertex, (, px, ,, py, ), ;,   , angle, +=, angleStep, ;, }, endShape, (, ), ;, }"
    }, {
        "name": "Bezier",
        "description": "The first two parameters for the bezier() function specify the first point in the curve and the last two parameters specify the last point. The middle parameters set the control points that define the shape of the curve.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, noFill, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, for, (, let, i, =, 0, ;, i, <, 200, ;, i, +=, 20, ), {,   , bezier, (,   ,   , mouseX, -, i, /, 2.0, ,,   ,   , 40, +, i, ,,   ,   , 410, ,,   ,   , 20, ,,   ,   , 440, ,,   ,   , 300, ,,   ,   , 240, -, i, /, 16.0, ,,   ,   , 300, +, i, /, 8.0,   , ), ;, }, }"
    }, {
        "name": "3D Primitives",
        "description": "Placing mathematically 3D objects in synthetic space. The box() and sphere() functions take at least one parameter to specify their size. These shapes are positioned using the translate() function.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 100, ), ;, noStroke, (, ), ;, fill, (, 50, ), ;, push, (, ), ;, translate, (, -275, ,, 175, ), ;, rotateY, (, 1.25, ), ;, rotateX, (, -0.9, ), ;, box, (, 100, ), ;, pop, (, ), ;, noFill, (, ), ;, stroke, (, 255, ), ;, push, (, ), ;, translate, (, 500, ,, height, *, 0.35, ,, -200, ), ;, sphere, (, 300, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Trig Wheels and Pie Chart",
        "description": "contributed by Prof WM Harris, How to create a trig color wheel and a visualization of a population age data as a pie chart.\nFunctions are created for the canvas setup, trig color wheel, drawslice, and pie chart. The size of the slices are determined as well as their color range. The pie chart is separated by definitive color per value whereas the trig color wheel has a fixed slice amount with a range color fill.",
        "code": " function, setup, (, ), {, createCanvas, (, 400, ,, 400, ), ;, colorMode, (, HSB, ), ;, angleMode, (, DEGREES, ), ;, \n//vars for color wheel center point\n, let, x, =, width, /, 2, ;, let, y, =, height, /, 2, +, 100, ;, colorWheel, (, x, ,, y, ,, 100, ), ;, \n//slide 11\n, noStroke, (, ), ;, pieChartPop, (, 200, ,, 100, ), ;, \n//slide 12\n, }, \n//**** slide 12 pie chart trig demo \n, function, pieChartPop, (, x, , , y, ), {, let, [, total, ,, child, ,, young, ,, adult, ,, senior, ,, elder, ], =, [, 577, ,, 103, ,, 69, ,,   , 122, ,, 170, ,, 113, ], ;, let, startValue, =, 0, ;, let, range, =, 0, ;, \n//child slice\n, range, =, child, /, total, ;, drawSlice, (, \"blue\", ,, x, ,, y, ,, 200, ,, startValue, ,, startValue, +, range, ), ;, startValue, +=, range, ;, \n//young slice\n, range, =, young, /, total, ;, drawSlice, (, \"orange\", ,, x, ,, y, ,, 200, ,, startValue, ,, startValue, +, range, ), ;, startValue, +=, range, ;, \n//adult slice\n, range, =, adult, /, total, ;, drawSlice, (, \"green\", ,, x, ,, y, ,, 200, ,, startValue, ,, startValue, +, range, ), ;, startValue, +=, range, ;, \n//senior slice\n, range, =, senior, /, total, ;, drawSlice, (, \"tan\", ,, x, ,, y, ,, 200, ,, startValue, ,, startValue, +, range, ), ;, startValue, +=, range, ;, \n//elder slice\n, range, =, elder, /, total, ;, drawSlice, (, \"pink\", ,, x, ,, y, ,, 200, ,, startValue, ,, startValue, +, range, ), ;, startValue, +=, range, ;, }, \n/**\n, \n * drawSlice - draw colored arc based on angle percentages. slide 13\n, \n * Adjust angles so that 0% starts at top (actually -90).\n, \n * \n, \n@param\n, \n {color} fColor - fill color\n, \n * \n, \n@param\n, \n {number} x - center x\n, \n * \n, \n@param\n, \n {number} y - center y\n, \n * \n, \n@param\n, \n {number} d - diameter\n, \n * \n, \n@param\n, \n {float} percent1 - starting percentage\n, \n * \n, \n@param\n, \n {float} percent2 - ending percentage\n, \n */\n, function, drawSlice, (, fColor, , , x, , , y, , , d, , , percent1, , , percent2, ), {, fill, (, fColor, ), ;, arc, (, x, ,, y, ,, d, ,, d, ,, -90, +, percent1, *, 360, ,, -90, +, percent2, *, 360, ), ;, }, \n//**** slide 11 trig demo \n, function, colorWheel, (, x, , , y, , , rad, ), {, strokeWeight, (, 10, ), ;, strokeCap, (, SQUARE, ), ;, \n//Iterate 360 degrees of lines, +10deg per turn\n, for, (, let, a, =, 0, ;, a, <, 360, ;, a, +=, 10, ), {,   , stroke, (, a, ,, 150, ,, 200, ), ;, \n//hue based on a\n,   , \n//radius is 100, angle is a degrees\n,   , line, (, x, ,, y, ,, x, +, rad, *, cos, (, a, ), ,,   ,   , y, +, rad, *, sin, (, a, )), ;, }, }"
    }]
}, {
    "groupName": "Data",
    "examples": [{
        "name": "Variables",
        "description": "Variables are used for storing values. In this example, change the values of variables to affect the composition.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 0, ), ;, stroke, (, 153, ), ;, strokeWeight, (, 4, ), ;, strokeCap, (, SQUARE, ), ;, let, a, =, 50, ;, let, b, =, 120, ;, let, c, =, 180, ;, line, (, a, ,, b, ,, a, +, c, ,, b, ), ;, line, (, a, ,, b, +, 10, ,, a, +, c, ,, b, +, 10, ), ;, line, (, a, ,, b, +, 20, ,, a, +, c, ,, b, +, 20, ), ;, line, (, a, ,, b, +, 30, ,, a, +, c, ,, b, +, 30, ), ;, a, =, a, +, c, ;, b, =, height, -, b, ;, line, (, a, ,, b, ,, a, +, c, ,, b, ), ;, line, (, a, ,, b, +, 10, ,, a, +, c, ,, b, +, 10, ), ;, line, (, a, ,, b, +, 20, ,, a, +, c, ,, b, +, 20, ), ;, line, (, a, ,, b, +, 30, ,, a, +, c, ,, b, +, 30, ), ;, a, =, a, +, c, ;, b, =, height, -, b, ;, line, (, a, ,, b, ,, a, +, c, ,, b, ), ;, line, (, a, ,, b, +, 10, ,, a, +, c, ,, b, +, 10, ), ;, line, (, a, ,, b, +, 20, ,, a, +, c, ,, b, +, 20, ), ;, line, (, a, ,, b, +, 30, ,, a, +, c, ,, b, +, 30, ), ;, }"
    }, {
        "name": "True and False",
        "description": "A Boolean variable has only two possible values: true or false. It is common to use Booleans with control statements to determine the flow of a program. In this example, when the boolean value \"b\" is true, vertical lines are drawn and when the boolean value \"b\" is false, horizontal lines are drawn.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 0, ), ;, stroke, (, 255, ), ;, let, b, =, false, ;, let, d, =, 20, ;, let, middle, =, width, /, 2, ;, for, (, let, i, =, d, ;, i, <=, width, ;, i, +=, d, ), {,   , b, =, i, <, middle, ;,   , if, (, b, ===, true, ), {,   ,   , \n// Vertical line\n,   ,   , line, (, i, ,, d, ,, i, ,, height, -, d, ), ;,   , },   , if, (, b, ===, false, ), {,   ,   , \n// Horizontal line\n,   ,   , line, (, middle, ,, i, -, middle, +, d, ,, width, -, d, ,, i, -, middle, +, d, ), ;,   , }, }, }"
    }, {
        "name": "Variable Scope",
        "description": "Variables have a global or function \"scope\". For example, variables declared within either the setup() or draw() functions may be only used in these functions. Global variables, variables declared outside of setup() and draw(), may be used anywhere within the program. If a function variable is declared with the same name as a global variable, the program will use the function variable to make its calculations within the current scope.",
        "code": " let, a, =, 80, ;, \n// Create a global variable \"a\"\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 0, ), ;, stroke, (, 255, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, \n// Draw a line using the global variable \"a\"\n, line, (, a, ,, 0, ,, a, ,, height, ), ;, \n// Use a local variable a in for loop\n, for, (, let, a, =, 120, ;, a, <, 200, ;, a, +=, 3, ), {,   , line, (, a, ,, 0, ,, a, ,, height, ), ;, }, \n// Make a call to the custom function drawAnotherLine()\n, drawAnotherLine, (, ), ;, \n// Make a call to the custom function drawYetAnotherLine()\n, drawYetAnotherLine, (, ), ;, }, function, drawAnotherLine, (, ), {, \n// Create a new variable \"a\" local to this function\n, let, a, =, 320, ;, \n// Draw a line using the local variable \"a\"\n, line, (, a, ,, 0, ,, a, ,, height, ), ;, }, function, drawYetAnotherLine, (, ), {, \n// Because no new local variable \"a\" is set,\n, \n// this line draws using the original global\n, \n// variable \"a\" which is set to the value 20.\n, line, (, a, +, 3, ,, 0, ,, a, +, 3, ,, height, ), ;, }"
    }, {
        "name": "Numbers",
        "description": "Numbers can be written with or without decimals. An integer (more commonly called an int) is a number without a decimal point. A float is a floating-point number, which means it is a number that has a decimal place.",
        "code": " let, a, =, 0, ;, \n// Create a global variable \"a\" of type Number\n, let, b, =, 0, ;, \n// Create a global variable \"b\" of type Number\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, a, =, a, +, 1, ;, \n// Increment a with an integer\n, b, =, b, +, 0.2, ;, \n//Increment b with a float\n, line, (, a, ,, 0, ,, a, ,, height, /, 2, ), ;, line, (, b, ,, height, /, 2, ,, b, ,, height, ), ;, if, (, a, >, width, ), {,   , a, =, 0, ;, }, if, (, b, >, width, ), {,   , b, =, 0, ;, }, }"
    }]
}, {
    "groupName": "Arrays",
    "examples": [{
        "name": "Array",
        "description": "An array is a list of data. Each piece of data in an array is identified by an index number representing its position in the array. Arrays are zero based, which means that the first element in the array is [0], the second element is [1], and so on. In this example, an array named \"coswave\" is created and filled with the cosine values. This data is displayed three separate ways on the screen.",
        "code": " let, coswave, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, ++, ), {,   , let, amount, =, map, (, i, ,, 0, ,, width, ,, 0, ,, PI, ), ;,   , coswave, [, i, ], =, abs, (, cos, (, amount, )), ;, }, background, (, 255, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, let, y1, =, 0, ;, let, y2, =, height, /, 3, ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, +=, 3, ), {,   , stroke, (, coswave, [, i, ], *, 255, ), ;,   , line, (, i, ,, y1, ,, i, ,, y2, ), ;, }, y1, =, y2, ;, y2, =, y1, +, y1, ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, +=, 3, ), {,   , stroke, ((, coswave, [, i, ], *, 255, ), /, 4, ), ;,   , line, (, i, ,, y1, ,, i, ,, y2, ), ;, }, y1, =, y2, ;, y2, =, height, ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, +=, 3, ), {,   , stroke, (, 255, -, coswave, [, i, ], *, 255, ), ;,   , line, (, i, ,, y1, ,, i, ,, y2, ), ;, }, }"
    }, {
        "name": "Array 2D",
        "description": "Demonstrates the syntax for creating a two-dimensional (2D) array. Values in a 2D array are accessed through two index values. 2D arrays are useful for storing images. In this example, each dot is colored in relation to its distance from the center of the image.",
        "code": " let, distances, =, [, ], ;, let, maxDistance, ;, let, spacer, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, maxDistance, =, dist, (, width, /, 2, ,, height, /, 2, ,, width, ,, height, ), ;, for, (, let, x, =, 0, ;, x, <, width, ;, x, ++, ), {,   , distances, [, x, ], =, [, ], ;, \n// create nested array\n,   , for, (, let, y, =, 0, ;, y, <, height, ;, y, ++, ), {,   ,   , let, distance, =, dist, (, width, /, 2, ,, height, /, 2, ,, x, ,, y, ), ;,   ,   , distances, [, x, ], [, y, ], =, (, distance, /, maxDistance, ), *, 255, ;,   , }, }, spacer, =, 10, ;, noLoop, (, ), ;, \n// Run once and stop\n, }, function, draw, (, ), {, background, (, 0, ), ;, \n// This embedded loop skips over values in the arrays based on\n, \n// the spacer variable, so there are more values in the array\n, \n// than are drawn here. Change the value of the spacer variable\n, \n// to change the density of the points\n, for, (, let, x, =, 0, ;, x, <, width, ;, x, +=, spacer, ), {,   , for, (, let, y, =, 0, ;, y, <, height, ;, y, +=, spacer, ), {,   ,   , stroke, (, distances, [, x, ], [, y, ]), ;,   ,   , point, (, x, +, spacer, /, 2, ,, y, +, spacer, /, 2, ), ;,   , }, }, }"
    }, {
        "name": "Array Objects",
        "description": "Demonstrates the syntax for creating an array of custom objects.",
        "code": " class, Module, {, constructor, (, xOff, ,, yOff, ,, x, ,, y, ,, speed, ,, unit, ), {,   , this, ., xOff, =, xOff, ;,   , this, ., yOff, =, yOff, ;,   , this, ., x, =, x, ;,   , this, ., y, =, y, ;,   , this, ., speed, =, speed, ;,   , this, ., unit, =, unit, ;,   , this, ., xDir, =, 1, ;,   , this, ., yDir, =, 1, ;, }, \n// Custom method for updating the variables\n, update, (, ), {,   , this, ., x, =, this, ., x, +, this, ., speed, *, this, ., xDir, ;,   , if, (, this, ., x, >=, this, ., unit, ||, this, ., x, <=, 0, ), {,   ,   , this, ., xDir, *=, -1, ;,   ,   , this, ., x, =, this, ., x, +, 1, *, this, ., xDir, ;,   ,   , this, ., y, =, this, ., y, +, 1, *, this, ., yDir, ;,   , },   , if, (, this, ., y, >=, this, ., unit, ||, this, ., y, <=, 0, ), {,   ,   , this, ., yDir, *=, -1, ;,   ,   , this, ., y, =, this, ., y, +, 1, *, this, ., yDir, ;,   , }, }, \n// Custom method for drawing the object\n, draw, (, ), {,   , fill, (, 255, ), ;,   , ellipse, (, this, ., xOff, +, this, ., x, ,, this, ., yOff, +, this, ., y, ,, 6, ,, 6, ), ;, }, }, let, unit, =, 40, ;, let, count, ;, let, mods, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, noStroke, (, ), ;, let, wideCount, =, width, /, unit, ;, let, highCount, =, height, /, unit, ;, count, =, wideCount, *, highCount, ;, let, index, =, 0, ;, for, (, let, y, =, 0, ;, y, <, highCount, ;, y, ++, ), {,   , for, (, let, x, =, 0, ;, x, <, wideCount, ;, x, ++, ), {,   ,   , mods, [, index, ++, ], =, new, Module, (,   ,   ,   , x, *, unit, ,,   ,   ,   , y, *, unit, ,,   ,   ,   , unit, /, 2, ,,   ,   ,   , unit, /, 2, ,,   ,   ,   , random, (, 0.05, ,, 0.8, ), ,,   ,   ,   , unit,   ,   , ), ;,   , }, }, }, function, draw, (, ), {, background, (, 0, ), ;, for, (, let, i, =, 0, ;, i, <, count, ;, i, ++, ), {,   , mods, [, i, ], ., update, (, ), ;,   , mods, [, i, ], ., draw, (, ), ;, }, }"
    }, {
        "name": "Walk Over 2dArray",
        "description": "contributed by Prof WM Harris, How to display 2D array contents on the canvas using regular for and for-of loops in multiple different ways.\nA function is created for the canvas, the 2D array (Friend Array) is initialized and walked over using nested loops in different ways. Variables x and y are used to place the array item on the canvas in the form of 2D array. The final nested loop is used to initialize 2D array (Fish Array) with random Integers (fish ages).",
        "code": " \n//\"use strict\"; //catch some common coding errors\n, \n/**\n, \n * setup :\n, \n */\n, function, setup, (, ), {,   , createCanvas, (, 400, ,, 600, ), ;,   , \n//create 2D array, slide 4\n,   , let, friendArray, =, [,   ,   , [, \"Nona\", ,, \"mac & cheese\", ,, \"orange\", ,, \"Eid al-fitr\", ], ,,   ,   , [, \"Marylin\", ,, \"ice cream\", ,, \"blue\", ,, \"Halloween\", ], ,,   ,   , [, \"Rashaad\", ,, \"garbage plates\", ,, \"turquoise\", ,, \"Christmas\", ], ,,   ,   , [, \"Ava\", ,, \"sushi\", ,, \"pink\", ,, \"New Years\", ],   , ], ;,   , friendArray, ., push, ([, \"Xavier\", ,, \"Louisiana creole\", ,, \"red\", ,, \"their birthday\", ]), ;,   , \n//walking 2D array, slide 6\n,   , let, y, =, 20, ;, \n// Start row based on text size of 20\n,   , for, (, let, f, =, 0, ;, f, <, friendArray, ., length, ;, f, ++, ), {, \n// outer array\n,   ,   , let, x, =, 10, ;, \n// Start item in this row\n,   ,   , for, (, let, t, =, 0, ;, t, <, friendArray, [, f, ], ., length, ;, t, ++, ), {, \n//inner\n,   ,   ,   , text, (, friendArray, [, f, ], [, t, ], ,, x, ,, y, ), ;,   ,   ,   , x, +=, textWidth, (, friendArray, [, f, ], [, t, ]), +, 20, ;, \n//place next item\n,   ,   , },   ,   , y, +=, 28, ;, \n// place next row\n,   , },   , \n//walking 2D array, variation on slide 6\n,   , \n//with embedded arithmetic for y\n,   , \n//\n,   , for, (, let, f, =, 0, ;, f, <, friendArray, ., length, ;, f, ++, ), {, \n// outer array\n,   ,   , let, x, =, 10, ;, \n// Start item in this row\n,   ,   , for, (, let, t, =, 0, ;, t, <, friendArray, [, f, ], ., length, ;, t, ++, ), {, \n//inner\n,   ,   ,   , \n//y is v-padding + LCV * v-spacing\n,   ,   ,   , text, (, friendArray, [, f, ], [, t, ], ,, x, ,, 200, +, f, *, 28, ), ;,   ,   ,   , x, +=, textWidth, (, friendArray, [, f, ], [, t, ]), +, 20, ;, \n//place next item\n,   ,   , },   , },   , \n//walking 2D array, slide 7\n,   , \n//need to use x and y variables to manage canvas placement\n,   , y, =, 400, ;,   , for, (, let, friend, of, friendArray, ), {,   ,   , let, x, =, 10, ;, \n// Start item in this row\n,   ,   , console, ., log, (, \"x and y\", ,, x, ,, y, ), ;,   ,   , console, ., log, (, \"friend:\", ,, friend, ), ;,   ,   , for, (, let, item, of, friend, ), {,   ,   ,   , console, ., log, (, \"item & x:\", ,, item, ,, x, ), ;,   ,   ,   , text, (, item, ,, x, ,, y, ), ;,   ,   ,   , x, +=, textWidth, (, item, ), +, 20, ;, \n//place next item\n,   ,   , },   ,   , y, +=, 28, ;, \n// place next row \n,   , },   , \n//slide 9, creating 2D array: schools of fish ages\n,   , console, ., log, (, \", \\n,  *** Fish ages in 2D ***\", ), ;,   , const, schools, =, [, ], ;,   , \n//4 schools of fish\n,   , for, (, let, t, =, 0, ;, t, <, 4, ;, t, ++, ), {,   ,   , schools, [, t, ], =, [, ], ;, \n//initialize this school \n,   ,   , console, ., log, (, \"schools[t]?\", ,, t, ,, schools, [, t, ]), ;,   ,   , \n// Add 10 randomized ages to the array\n,   ,   , for, (, let, a, =, 0, ;, a, <, 10, ;, a, ++, ), {,   ,   ,   , schools, [, t, ], ., push, (, round, (, random, (, 1, ,, 5, ))), ;,   ,   , },   , },   , console, ., log, (, schools, ), ;, }"
    }]
}, {
    "groupName": "Control",
    "examples": [{
        "name": "Iteration",
        "description": "Iteration with a \"for\" structure to construct repetitive forms.",
        "code": " let, y, ;, let, num, =, 14, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, background, (, 102, ), ;, noStroke, (, ), ;, \n// Draw white bars\n, fill, (, 255, ), ;, y, =, 60, ;, for, (, let, i, =, 0, ;, i, <, num, /, 3, ;, i, ++, ), {,   , rect, (, 50, ,, y, ,, 475, ,, 10, ), ;,   , y, +=, 20, ;, }, \n// Gray bars\n, fill, (, 51, ), ;, y, =, 40, ;, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , rect, (, 405, ,, y, ,, 30, ,, 10, ), ;,   , y, +=, 20, ;, }, y, =, 50, ;, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , rect, (, 425, ,, y, ,, 30, ,, 10, ), ;,   , y, +=, 20, ;, }, \n// Thin lines\n, y, =, 45, ;, fill, (, 0, ), ;, for, (, let, i, =, 0, ;, i, <, num, -, 1, ;, i, ++, ), {,   , rect, (, 120, ,, y, ,, 40, ,, 1, ), ;,   , y, +=, 20, ;, }, }"
    }, {
        "name": "Embedded Iteration",
        "description": "Embedding \"for\" structures allows repetition in two dimensions.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, background, (, 0, ), ;, noStroke, (, ), ;, let, gridSize, =, 35, ;, for, (, let, x, =, gridSize, ;, x, <=, width, -, gridSize, ;, x, +=, gridSize, ), {,   , for, (, let, y, =, gridSize, ;, y, <=, height, -, gridSize, ;, y, +=, gridSize, ), {,   ,   , noStroke, (, ), ;,   ,   , fill, (, 255, ), ;,   ,   , rect, (, x, -, 1, ,, y, -, 1, ,, 3, ,, 3, ), ;,   ,   , stroke, (, 255, ,, 50, ), ;,   ,   , line, (, x, ,, y, ,, width, /, 2, ,, height, /, 2, ), ;,   , }, }, }"
    }, {
        "name": "Conditionals 1",
        "description": "Conditions are like questions. They allow a program to decide to take one action if the answer to a question is true or to do another action if the answer to the question is false. The questions asked within a program are always logical or relational statements. For example, if the variable 'i' is equal to zero then draw a line.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, background, (, 0, ), ;, for, (, let, i, =, 10, ;, i, <, width, ;, i, +=, 10, ), {,   , \n// If 'i' divides by 20 with no remainder draw the first line\n,   , \n// else draw the second line\n,   , if, (, i, %, 20, ===, 0, ), {,   ,   , stroke, (, 255, ), ;,   ,   , line, (, i, ,, 80, ,, i, ,, height, /, 2, ), ;,   , }, else, {,   ,   , stroke, (, 153, ), ;,   ,   , line, (, i, ,, 20, ,, i, ,, 180, ), ;,   , }, }, }"
    }, {
        "name": "Conditionals 2",
        "description": "We extend the language of conditionals from the previous example by adding the keyword \"else\". This allows conditionals to ask two or more sequential questions, each with a different action.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, background, (, 0, ), ;, for, (, let, i, =, 2, ;, i, <, width, -, 2, ;, i, +=, 4, ), {,   , \n// If 'i' divides by 20 with no remainder\n,   , if, (, i, %, 20, ===, 0, ), {,   ,   , stroke, (, 255, ), ;,   ,   , line, (, i, ,, 80, ,, i, ,, height, /, 2, ), ;,   ,   , \n// If 'i' divides by 10 with no remainder\n,   , }, else, if, (, i, %, 10, ===, 0, ), {,   ,   , stroke, (, 153, ), ;,   ,   , line, (, i, ,, 20, ,, i, ,, 180, ), ;,   ,   , \n// If neither of the above two conditions are met\n,   ,   , \n// then draw this line\n,   , }, else, {,   ,   , stroke, (, 102, ), ;,   ,   , line, (, i, ,, height, /, 2, ,, i, ,, height, -, 20, ), ;,   , }, }, }"
    }, {
        "name": "Logical Operators",
        "description": "The logical operators for AND (&&) and OR (||) are used to combine simple relational statements into more complex expressions. The NOT (!) operator is used to negate a boolean statement.",
        "code": " let, test, =, false, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 360, ), ;, background, (, 126, ), ;, for, (, let, i, =, 5, ;, i, <=, height, ;, i, +=, 5, ), {,   , \n// Logical AND\n,   , stroke, (, 0, ), ;,   , if, (, i, >, 35, &&, i, <, 100, ), {,   ,   , line, (, width, /, 4, ,, i, ,, width, /, 2, ,, i, ), ;,   ,   , test, =, false, ;,   , },   , \n// Logical OR\n,   , stroke, (, 76, ), ;,   , if, (, i, <=, 35, ||, i, >=, 100, ), {,   ,   , line, (, width, /, 2, ,, i, ,, width, ,, i, ), ;,   ,   , test, =, true, ;,   , },   , \n// Testing if a boolean value is \"true\"\n,   , \n// The expression \"if(test)\" is equivalent to \"if(test == true)\"\n,   , if, (, test, ), {,   ,   , stroke, (, 0, ), ;,   ,   , point, (, width, /, 3, ,, i, ), ;,   , },   , \n// Testing if a boolean value is \"false\"\n,   , \n// The expression \"if(!test)\" is equivalent to \"if(test == false)\"\n,   , if, (, !, test, ), {,   ,   , stroke, (, 255, ), ;,   ,   , point, (, width, /, 4, ,, i, ), ;,   , }, }, }"
    }, {
        "name": "Logical Operators 2",
        "description": "contributed by Prof WM Harris, How to create Xboxes with one global variable and create conditions with boolean variables and boolean expressions by utilizing Boolean operators ||, &&, and ! to do boundary checking.\nFunctions are created for both the canvas set up as well as the creation of the boxes. Background color is dependent on the location of the boxes in the canvas space. When mouse button and key are pressed simultaneously, the “where” text and box color changes to cyan, but if the mouse button is clicked alone then the animation will start. When q or Q are pressed the text “Did you type q or Q?” will change to blue, else it will be purple. If the mouse is placed within the orange box containing the text, “withinRect” then the shape will turn pink.",
        "code": " \n//1 coordinate for everything :)\n, let, where, =, 0, ;, \n//control boxes' positions\n, function, setup, (, ), {, createCanvas, (, 400, ,, 400, ), ;, }, function, draw, (, ), {, \n//similar to slide 4 use of OR, ||\n, \n//to set bg color of canvas\n, if, ((, where, <, 0, ), ||, (, where, >, height, )), {,   , background, (, \"beige\", ), ;, }, else, {,   , background, (, \"chocolate\", ), ;, }, \n//similar to slide 4 use of AND, &&\n, \n//to set fill color of box & text\n, if, (, mouseIsPressed, &&, keyIsPressed, ), {,   , fill, (, \"cyan\", ), ;, }, else, {,   , fill, (, 255, ), ;, }, \n//boxL\n, rect, (, where, ,, where, ,, 40, ), ;, \n//boxR, pad x coordinate for size of box\n, rect, (, width, -, where, -, 40, ,, where, ,, 40, ), ;, \n//Move the boxes\n, where, =, where, +, 1, ;, \n//Show the value of where the boxes are\n, text, (, \"where is \", +, where, ,, 150, ,, 30, ), ;, \n//testing not, ! and or, || operators\n, if, (, !, (, key, ===, \"q\", ||, key, ===, \"Q\", )), {,   , fill, (, \"purple\", ), ;, }, else, {,   , fill, (, \"dodgerBlue\", ), ;, }, \n//Show the current key value\n, text, (, \"Did you type a q or Q? \", +, key, ,, 150, ,, 70, ), ;, \n//*** Boundary checking ***\n, \n//Is the mouse within rect boundary?\n, \n//left, right, top, bottom\n, let, withinRect, =, (, mouseX, >=, 150, ), &&,   , (, mouseX, <=, 150, +, 100, ), &&,   , (, mouseY, >=, 300, ), &&,   , (, mouseY, <=, 300, +, 40, ), ;, \n//fill color based on value of withinRect\n, if, (, withinRect, ), {,   , fill, (, \"pink\", ), ;, }, else, {,   , fill, (, \"orange\", ), ;, }, \n//draw the rect\n, rect, (, 150, ,, 300, ,, 100, ,, 40, ), ;, \n//show withinRect value as label on rect\n, fill, (, 0, ), ;, text, (, \"withinRect \", +, withinRect, ,, 160, ,, 320, ), ;, }, \n//boxes restart\n, function, mousePressed, (, ), {, \n//Reset boxes back up and above the canvas\n, where, =, -50, ;, }"
    }, {
        "name": "Conditional Shapes",
        "description": "contributed by Prof WM Harris, How to draw different shapes mid canvas depending on the mouse position.\nFunctions are created for the main canvas set up with the markers on the left and right hand sides. One is also created for the location of the mouse regarding the canvas and the markers. If the mouse is within the outer left hand beige rectangle, then the shape of circle is drawn down the center of the canvas. If the mouse is within the outer right hand beige rectangle, then the shape of square is drawn down the center of the canvas.",
        "code": " function, setup, (, ), {,   , createCanvas, (, 400, ,, 400, ), ;,   , strokeWeight, (, 3, ), ;,   , \n//center squares to match circles\n,   , rectMode, (, CENTER, ), ;,   ,   , \n//draw rects to mark far sides\n,   , noStroke, (, ), ;,   , fill, (, \"beige\", ), ;,   , rect, (, 5, ,, height, /, 2, ,, 10, ,, height, ), ;,   , rect, (, width, -, 5, ,, height, /, 2, ,, 10, ,, height, ), ;,   , fill, (, \"orange\", ), ;,   , stroke, (, \"brown\", ), ;, }, function, draw, (, ), {,   , point, (, mouseX, ,, mouseY, ), ;,   , \n//if (test) {doThis; }\n,   , \n//test: mouseX on far left of canvas\n,   , \n//doThis: draw a circle at mouseY\n,   , if, (, mouseX, <, 10, ), {,   ,   , circle, (, width, /, 2, ,, mouseY, ,, 20, ), ;,   , },   , \n//test: mouseX on far right of canvas\n,   , \n//doThis: draw a square at mouseY\n,   , if, (, mouseX, >, width, -, 10, ), {,   ,   , square, (, width, /, 2, ,, mouseY, ,, 20, ), ;,   , }, }"
    }]
}, {
    "groupName": "Image",
    "examples": [{
        "name": "Load and Display Image",
        "description": "Images can be loaded and displayed to the screen at their actual size or any other size.\n\nTo run this example locally, you will need an image file, and a running local server.",
        "code": " let, img, ;, \n// Declare variable 'img'.\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, \n// Load the image\n, }, function, draw, (, ), {, \n// Displays the image at its actual size at point (0,0)\n, image, (, img, ,, 0, ,, 0, ), ;, \n// Displays the image at point (0, height/2) at half size\n, image, (, img, ,, 0, ,, height, /, 2, ,, img, ., width, /, 2, ,, img, ., height, /, 2, ), ;, }"
    }, {
        "name": "Background Image",
        "description": "This example presents the fastest way to load a background image. To load an image as the background, it must be the same width and height as the program.\n\nTo run this example locally, you will need an image file, and a running local server.",
        "code": " let, bg, ;, let, y, =, 0, ;, function, setup, (, ), {, \n// The background image must be the same size as the parameters\n, \n// into the createCanvas() method. In this program, the size of\n, \n// the image is 720x400 pixels.\n, bg, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, createCanvas, (, 720, ,, 400, ), ;, }, function, draw, (, ), {, background, (, bg, ), ;, stroke, (, 226, ,, 204, ,, 0, ), ;, line, (, 0, ,, y, ,, width, ,, y, ), ;, y, ++, ;, if, (, y, >, height, ), {,   , y, =, 0, ;, }, }"
    }, {
        "name": "Transparency",
        "description": "Move the pointer left and right across the image to change its position. This program overlays one image over another by modifying the alpha value of the image with the tint() function.\n\nTo run this example locally, you will need an image file, and a running local server.",
        "code": " let, img, ;, let, offset, =, 0, ;, let, easing, =, 0.05, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, \n// Load an image into the program\n, }, function, draw, (, ), {, image, (, img, ,, 0, ,, 0, ), ;, \n// Display at full opacity\n, let, dx, =, mouseX, -, img, ., width, /, 2, -, offset, ;, offset, +=, dx, *, easing, ;, tint, (, 255, ,, 127, ), ;, \n// Display at half opacity\n, image, (, img, ,, offset, ,, 0, ), ;, }"
    }, {
        "name": "Alpha Mask",
        "description": "Loads a \"mask\" for an image to specify the transparency in different parts of the image. The two images are blended together using the mask() method of p5.Image.\n\nTo run this example locally, you will need two image files, and a running local server.",
        "code": " let, img, ;, let, imgMask, ;, function, preload, (, ), {, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, imgMask, =, loadImage, (, 'assets/mask.png', ), ;, }, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, img, ., mask, (, imgMask, ), ;, imageMode, (, CENTER, ), ;, }, function, draw, (, ), {, background, (, 0, ,, 102, ,, 153, ), ;, image, (, img, ,, width, /, 2, ,, height, /, 2, ), ;, image, (, img, ,, mouseX, ,, mouseY, ), ;, }"
    }, {
        "name": "Create Image",
        "description": "The createImage() function provides a fresh buffer of pixels to play with. This example creates an image gradient.",
        "code": " let, img, ;, \n// Declare variable 'img'.\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, img, =, createImage, (, 230, ,, 230, ), ;, img, ., loadPixels, (, ), ;, for, (, let, x, =, 0, ;, x, <, img, ., width, ;, x, ++, ), {,   , for, (, let, y, =, 0, ;, y, <, img, ., height, ;, y, ++, ), {,   ,   , let, a, =, map, (, y, ,, 0, ,, img, ., height, ,, 255, ,, 0, ), ;,   ,   , img, ., set, (, x, ,, y, ,, [, 0, ,, 153, ,, 204, ,, a, ]), ;,   , }, }, img, ., updatePixels, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, image, (, img, ,, 90, ,, 80, ), ;, image, (, img, ,, mouseX, -, img, ., width, /, 2, ,, mouseY, -, img, ., height, /, 2, ), ;, }"
    }, {
        "name": "Pointillism",
        "description": "By Dan Shiffman. Mouse horizontal location controls size of dots. Creates a simple pointillist effect using ellipses colored according to pixels in an image.\n\nTo run this example locally, you will need an image file, and a running local server.",
        "code": " let, img, ;, let, smallPoint, ,, largePoint, ;, function, preload, (, ), {, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, }, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, smallPoint, =, 4, ;, largePoint, =, 40, ;, imageMode, (, CENTER, ), ;, noStroke, (, ), ;, background, (, 255, ), ;, img, ., loadPixels, (, ), ;, }, function, draw, (, ), {, let, pointillize, =, map, (, mouseX, ,, 0, ,, width, ,, smallPoint, ,, largePoint, ), ;, let, x, =, floor, (, random, (, img, ., width, )), ;, let, y, =, floor, (, random, (, img, ., height, )), ;, let, pix, =, img, ., get, (, x, ,, y, ), ;, fill, (, pix, ,, 128, ), ;, ellipse, (, x, ,, y, ,, pointillize, ,, pointillize, ), ;, }"
    }, {
        "name": "Blur",
        "description": "A low-pass filter that blurs an image. This program analyzes every pixel in an image and blends it with all the neighboring pixels to blur the image.\n\nThis example is ported from the Blur example on the Processing website",
        "code": " \n// to consider all neighboring pixels we use a 3x3 array\n, \n// and normalize these values\n, \n// v is the normalized value\n, let, v, =, 1.0, /, 9.0, ;, \n// kernel is the 3x3 matrix of normalized values\n, let, kernel, =, [, [, v, ,, v, ,, v, ], ,, [, v, ,, v, ,, v, ], ,, [, v, ,, v, ,, v, ], ], ;, \n// preload() runs once, before setup()\n, \n// loadImage() needs to occur here instead of setup()\n, \n// if loadImage() is called in setup(), the image won't appear\n, \n// since noLoop() restricts draw() to execute only once\n, \n// (one execution of draw() is not enough time for the image to load),\n, \n// preload() makes sure image is loaded before anything else occurs\n, function, preload, (, ), {, \n// load the original image\n, img, =, loadImage, (, 'assets/rover.png', ), ;, }, \n// setup() runs once after preload\n, function, setup, (, ), {, \n// create canvas\n, createCanvas, (, 710, ,, 400, ), ;, \n// noLoop() makes draw() run only once, not in a loop\n, noLoop, (, ), ;, }, \n// draw() runs after setup(), normally on a loop\n, \n// in this case it runs only once, because of noDraw()\n, function, draw, (, ), {, \n// place the original image on the upper left corner\n, image, (, img, ,, 0, ,, 0, ), ;, \n// create a new image, same dimensions as img\n, edgeImg, =, createImage, (, img, ., width, ,, img, ., height, ), ;, \n// load its pixels\n, edgeImg, ., loadPixels, (, ), ;, \n// two for() loops, to iterate in x axis and y axis\n, \n// since the kernel assumes that the pixel\n, \n// has pixels above, under, left, and right\n, \n// we need to skip the first and last column and row\n, \n// x then goes from 1 to width - 1\n, \n// y then goes from 1 to height - 1\n, for, (, let, x, =, 1, ;, x, <, img, ., width, ;, x, ++, ), {,   , for, (, let, y, =, 1, ;, y, <, img, ., height, ;, y, ++, ), {,   ,   , \n// kernel sum for the current pixel starts as 0\n,   ,   , let, sum, =, 0, ;,   ,   , \n// kx, ky variables for iterating over the kernel\n,   ,   , \n// kx, ky have three different values: -1, 0, 1\n,   ,   , for, (, kx, =, -1, ;, kx, <=, 1, ;, kx, ++, ), {,   ,   ,   , for, (, ky, =, -1, ;, ky, <=, 1, ;, ky, ++, ), {,   ,   ,   ,   , let, xpos, =, x, +, kx, ;,   ,   ,   ,   , let, ypos, =, y, +, ky, ;,   ,   ,   ,   , \n// since our image is grayscale,\n,   ,   ,   ,   , \n// RGB values are identical\n,   ,   ,   ,   , \n// we retrieve the red value for this example\n,   ,   ,   ,   , \n// (green and blue work as well)\n,   ,   ,   ,   , let, val, =, red, (, img, ., get, (, xpos, ,, ypos, )), ;,   ,   ,   ,   , \n// accumulate the  kernel sum\n,   ,   ,   ,   , \n// kernel is a 3x3 matrix\n,   ,   ,   ,   , \n// kx and ky have values -1, 0, 1\n,   ,   ,   ,   , \n// if we add 1 to kx and ky, we get 0, 1, 2\n,   ,   ,   ,   , \n// with that we can use it to iterate over kernel\n,   ,   ,   ,   , \n// and calculate the accumulated sum\n,   ,   ,   ,   , sum, +=, kernel, [, kx, +, 1, ], [, ky, +, 1, ], *, val, ;,   ,   ,   , },   ,   , },   ,   , \n// set the value of the edgeImg pixel to the kernel sum\n,   ,   , edgeImg, ., set, (, x, ,, y, ,, color, (, sum, )), ;,   , }, }, \n// updatePixels() to write the changes on edgeImg\n, edgeImg, ., updatePixels, (, ), ;, \n// draw edgeImg at the right of the original image\n, image, (, edgeImg, ,, img, ., width, ,, 0, ), ;, }"
    }, {
        "name": "Edge Detection",
        "description": "A high-pass filter sharpens an image. This program analyzes every pixel in an image in relation to the neighboring pixels to sharpen the image.\n\nThis example is ported from the Edge Detection example on the Processing website",
        "code": " \n// this program analyzes every pixel in an image\n, \n// in relation to the neighbouring pixels\n, \n// to sharpen the image\n, \n// to consider all neighboring pixels we use a 3x3 array\n, \n// and normalize these values\n, \n// kernel is the 3x3 matrix of normalized values\n, let, kernel, =, [, [, -1, ,, -1, ,, -1, ], ,, [, -1, ,, 9, ,, -1, ], ,, [, -1, ,, -1, ,, -1, ], ], ;, \n// preload() runs once, before setup()\n, \n// loadImage() needs to occur here instead of setup()\n, \n// if loadImage() is called in setup(), the image won't appear\n, \n// since noLoop() restricts draw() to execute only once\n, \n// (one execution of draw() is not enough time for the image to load),\n, \n// preload() makes sure image is loaded before anything else occurs\n, function, preload, (, ), {, \n// load the original image\n, img, =, loadImage, (, 'assets/rover.png', ), ;, }, \n// setup() runs after preload, once()\n, function, setup, (, ), {, \n// create canvas\n, createCanvas, (, 710, ,, 400, ), ;, \n// noLoop() makes draw() run only once, not in a loop\n, noLoop, (, ), ;, }, \n// draw() runs after setup(), normally on a loop\n, \n// in this case it runs only once, because of noDraw()\n, function, draw, (, ), {, \n// place the original image on the upper left corner\n, image, (, img, ,, 0, ,, 0, ), ;, \n// create a new image, same dimensions as img\n, edgeImg, =, createImage, (, img, ., width, ,, img, ., height, ), ;, \n// load its pixels\n, edgeImg, ., loadPixels, (, ), ;, \n// two for() loops, to iterate in x axis and y axis\n, \n// since the kernel assumes that the pixel\n, \n// has pixels above, under, left, and right\n, \n// we need to skip the first and last column and row\n, \n// x then goes from 1 to width - 1\n, \n// y then goes from 1 to height - 1\n, for, (, let, x, =, 1, ;, x, <, img, ., width, -, 1, ;, x, ++, ), {,   , for, (, let, y, =, 1, ;, y, <, img, ., height, -, 1, ;, y, ++, ), {,   ,   , \n// kernel sum for the current pixel starts as 0\n,   ,   , let, sum, =, 0, ;,   ,   , \n// kx, ky variables for iterating over the kernel\n,   ,   , \n// kx, ky have three different values: -1, 0, 1\n,   ,   , for, (, kx, =, -1, ;, kx, <=, 1, ;, kx, ++, ), {,   ,   ,   , for, (, ky, =, -1, ;, ky, <=, 1, ;, ky, ++, ), {,   ,   ,   ,   , let, xpos, =, x, +, kx, ;,   ,   ,   ,   , let, ypos, =, y, +, ky, ;,   ,   ,   ,   , let, pos, =, (, y, +, ky, ), *, img, ., width, +, (, x, +, kx, ), ;,   ,   ,   ,   , \n// since our image is grayscale,\n,   ,   ,   ,   , \n// RGB values are identical\n,   ,   ,   ,   , \n// we retrieve the red value for this example\n,   ,   ,   ,   , let, val, =, red, (, img, ., get, (, xpos, ,, ypos, )), ;,   ,   ,   ,   , \n// accumulate the  kernel sum\n,   ,   ,   ,   , \n// kernel is a 3x3 matrix\n,   ,   ,   ,   , \n// kx and ky have values -1, 0, 1\n,   ,   ,   ,   , \n// if we add 1 to kx and ky, we get 0, 1, 2\n,   ,   ,   ,   , \n// with that we can use it to iterate over kernel\n,   ,   ,   ,   , \n// and calculate the accumulated sum\n,   ,   ,   ,   , sum, +=, kernel, [, ky, +, 1, ], [, kx, +, 1, ], *, val, ;,   ,   ,   , },   ,   , },   ,   , \n// set the pixel value of the edgeImg\n,   ,   , edgeImg, ., set, (, x, ,, y, ,, color, (, sum, ,, sum, ,, sum, )), ;,   , }, }, \n// updatePixels() to write the changes on edgeImg\n, edgeImg, ., updatePixels, (, ), ;, \n// draw edgeImg at the right of the original image\n, image, (, edgeImg, ,, img, ., width, ,, 0, ), ;, }"
    }, {
        "name": "Brightness",
        "description": "This program adjusts the brightness of a part of the image by calculating the distance of each pixel to the mouse.\n\nThis example is ported from the Brightness example on the Processing website",
        "code": " \n// This program adjusts the brightness\n, \n// of a part of the image by\n, \n// calculating the distance of\n, \n// each pixel to the mouse.\n, let, img, ;, \n// preload() runs once, before setup()\n, \n// loadImage() needs to occur here instead of setup()\n, \n// preload() makes sure image is loaded before anything else occurs\n, function, preload, (, ), {, \n// load the original image\n, img, =, loadImage, (, 'assets/rover_wide.jpg', ), ;, }, \n// setup() runs after preload, once()\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, pixelDensity, (, 1, ), ;, frameRate, (, 30, ), ;, }, function, draw, (, ), {, image, (, img, ,, 0, ,, 0, ), ;, \n// Only need to load the pixels[] array once, because we're only\n, \n// manipulating pixels[] inside draw(), not drawing shapes.\n, loadPixels, (, ), ;, \n// We must also call loadPixels() on the PImage since we are going to read its pixels.\n, img, ., loadPixels, (, ), ;, for, (, let, x, =, 0, ;, x, <, img, ., width, ;, x, ++, ), {,   , for, (, let, y, =, 0, ;, y, <, img, ., height, ;, y, ++, ), {,   ,   , \n// Calculate the 1D location from a 2D grid\n,   ,   , let, loc, =, (, x, +, y, *, img, ., width, ), *, 4, ;,   ,   , \n// Get the R,G,B values from image\n,   ,   , let, r, ,, g, ,, b, ;,   ,   , r, =, img, ., pixels, [, loc, ], ;,   ,   , \n// g = img.pixels[loc+1];\n,   ,   , \n// b = img.pixels[loc+2];\n,   ,   , \n// Calculate an amount to change brightness based on proximity to the mouse\n,   ,   , \n// The closer the pixel is to the mouse, the lower the value of \"distance\"\n,   ,   , let, maxdist, =, 50, ;, \n//dist(0,0,width,height);\n,   ,   , let, d, =, dist, (, x, ,, y, ,, mouseX, ,, mouseY, ), ;,   ,   , let, adjustbrightness, =, (, 255, *, (, maxdist, -, d, )), /, maxdist, ;,   ,   , r, +=, adjustbrightness, ;,   ,   , \n// g += adjustbrightness;\n,   ,   , \n// b += adjustbrightness;\n,   ,   , \n// Constrain RGB to make sure they are within 0-255 color range\n,   ,   , r, =, constrain, (, r, ,, 0, ,, 255, ), ;,   ,   , \n// g = constrain(g, 0, 255);\n,   ,   , \n// b = constrain(b, 0, 255);\n,   ,   , \n// Make a new color and set pixel in the window\n,   ,   , let, pixloc, =, (, y, *, width, +, x, ), *, 4, ;,   ,   , pixels, [, pixloc, ], =, r, ;,   ,   , pixels, [, pixloc, +, 1, ], =, r, ;,   ,   , pixels, [, pixloc, +, 2, ], =, r, ;,   ,   , pixels, [, pixloc, +, 3, ], =, 255, ;, \n// Always have to set alpha\n,   , }, }, updatePixels, (, ), ;, }"
    }, {
        "name": "Convolution",
        "description": "Applies a convolution matrix to a portion of an image. Move mouse to apply filter to different parts of the image. This example is a port of Dan Shiffman's example for Processing. Original comments written by Dan unless otherwise specified.\n\nTo run this example locally, you will need an image file, and a running local server.",
        "code": " let, img, ;, let, w, =, 80, ;, \n// It's possible to convolve the image with many different\n, \n// matrices to produce different effects. This is a high-pass\n, \n// filter; it accentuates the edges.\n, const, matrix, =, [, [, -1, ,, -1, ,, -1, ], ,, [, -1, ,, 9, ,, -1, ], ,, [, -1, ,, -1, ,, -1, ], ], ;, function, preload, (, ), {, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, }, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, img, ., loadPixels, (, ), ;, \n// pixelDensity(1) for not scaling pixel density to display density\n, \n// for more information, check the reference of pixelDensity()\n, pixelDensity, (, 1, ), ;, }, function, draw, (, ), {, \n// We're only going to process a portion of the image\n, \n// so let's set the whole image as the background first\n, background, (, img, ), ;, \n// Calculate the small rectangle we will process\n, const, xstart, =, constrain, (, mouseX, -, w, /, 2, ,, 0, ,, img, ., width, ), ;, const, ystart, =, constrain, (, mouseY, -, w, /, 2, ,, 0, ,, img, ., height, ), ;, const, xend, =, constrain, (, mouseX, +, w, /, 2, ,, 0, ,, img, ., width, ), ;, const, yend, =, constrain, (, mouseY, +, w, /, 2, ,, 0, ,, img, ., height, ), ;, const, matrixsize, =, 3, ;, loadPixels, (, ), ;, \n// Begin our loop for every pixel in the smaller image\n, for, (, let, x, =, xstart, ;, x, <, xend, ;, x, ++, ), {,   , for, (, let, y, =, ystart, ;, y, <, yend, ;, y, ++, ), {,   ,   , let, c, =, convolution, (, x, ,, y, ,, matrix, ,, matrixsize, ,, img, ), ;,   ,   , \n// retrieve the RGBA values from c and update pixels()\n,   ,   , let, loc, =, (, x, +, y, *, img, ., width, ), *, 4, ;,   ,   , pixels, [, loc, ], =, red, (, c, ), ;,   ,   , pixels, [, loc, +, 1, ], =, green, (, c, ), ;,   ,   , pixels, [, loc, +, 2, ], =, blue, (, c, ), ;,   ,   , pixels, [, loc, +, 3, ], =, alpha, (, c, ), ;,   , }, }, updatePixels, (, ), ;, }, function, convolution, (, x, , , y, , , matrix, , , matrixsize, , , img, ), {, let, rtotal, =, 0.0, ;, let, gtotal, =, 0.0, ;, let, btotal, =, 0.0, ;, const, offset, =, Math, ., floor, (, matrixsize, /, 2, ), ;, for, (, let, i, =, 0, ;, i, <, matrixsize, ;, i, ++, ), {,   , for, (, let, j, =, 0, ;, j, <, matrixsize, ;, j, ++, ), {,   ,   , \n// What pixel are we testing\n,   ,   , const, xloc, =, x, +, i, -, offset, ;,   ,   , const, yloc, =, y, +, j, -, offset, ;,   ,   , let, loc, =, (, xloc, +, img, ., width, *, yloc, ), *, 4, ;,   ,   , \n// Make sure we haven't walked off our image, we could do better here\n,   ,   , loc, =, constrain, (, loc, ,, 0, ,, img, ., pixels, ., length, -, 1, ), ;,   ,   , \n// Calculate the convolution\n,   ,   , \n// retrieve RGB values\n,   ,   , rtotal, +=, img, ., pixels, [, loc, ], *, matrix, [, i, ], [, j, ], ;,   ,   , gtotal, +=, img, ., pixels, [, loc, +, 1, ], *, matrix, [, i, ], [, j, ], ;,   ,   , btotal, +=, img, ., pixels, [, loc, +, 2, ], *, matrix, [, i, ], [, j, ], ;,   , }, }, \n// Make sure RGB is within range\n, rtotal, =, constrain, (, rtotal, ,, 0, ,, 255, ), ;, gtotal, =, constrain, (, gtotal, ,, 0, ,, 255, ), ;, btotal, =, constrain, (, btotal, ,, 0, ,, 255, ), ;, \n// Return the resulting color\n, return, color, (, rtotal, ,, gtotal, ,, btotal, ), ;, }"
    }, {
        "name": "Copy() method",
        "description": "An example of how to simulate coloring image with the copy() method.",
        "code": " let, draft, ,, ready, ;, function, preload, (, ), {, ready, =, loadImage, (, 'assets/parrot-color.png', ), ;, draft, =, loadImage, (, 'assets/parrot-bw.png', ), ;, }, function, setup, (, ), {, createCanvas, (, 600, ,, 400, ), ;, noCursor, (, ), ;, cursor, (, 'assets/brush.png', ,, 20, ,, -10, ), ;, image, (, ready, ,, 0, ,, 0, ), ;, image, (, draft, ,, 0, ,, 0, ), ;, }, function, mouseDragged, (, ), {, copy, (, ready, ,, mouseX, ,, mouseY, ,, 20, ,, 20, ,, mouseX, ,, mouseY, ,, 20, ,, 20, ), ;, }"
    }]
}, {
    "groupName": "Color",
    "examples": [{
        "name": "Hue",
        "description": "Hue is the color reflected from or transmitted through an object and is typically referred to as the name of the color (red, blue, yellow, etc.) Move the cursor vertically over each bar to alter its hue.",
        "code": " const, barWidth, =, 20, ;, let, lastBar, =, -1, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, colorMode, (, HSB, ,, height, ,, height, ,, height, ), ;, noStroke, (, ), ;, background, (, 0, ), ;, }, function, draw, (, ), {, let, whichBar, =, mouseX, /, barWidth, ;, if, (, whichBar, !==, lastBar, ), {,   , let, barX, =, whichBar, *, barWidth, ;,   , fill, (, mouseY, ,, height, ,, height, ), ;,   , rect, (, barX, ,, 0, ,, barWidth, ,, height, ), ;,   , lastBar, =, whichBar, ;, }, }"
    }, {
        "name": "Saturation",
        "description": "Saturation is the strength or purity of the color and represents the amount of gray in proportion to the hue. A \"saturated\" color is pure and an \"unsaturated\" color has a large percentage of gray. Move the cursor vertically over each bar to alter its saturation.",
        "code": " const, barWidth, =, 20, ;, let, lastBar, =, -1, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, colorMode, (, HSB, ,, width, ,, height, ,, 100, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, let, whichBar, =, mouseX, /, barWidth, ;, if, (, whichBar, !==, lastBar, ), {,   , let, barX, =, whichBar, *, barWidth, ;,   , fill, (, barX, ,, mouseY, ,, 66, ), ;,   , rect, (, barX, ,, 0, ,, barWidth, ,, height, ), ;,   , lastBar, =, whichBar, ;, }, }"
    }, {
        "name": "Brightness",
        "description": "By Dan Shiffman. This program adjusts the brightness of a part of the image by calculating the distance of each pixel to the mouse.\n\nTo run this example locally, you will need at least an image file and a running local server.",
        "code": " let, img, ;, function, preload, (, ), {, img, =, loadImage, (, 'assets/moonwalk.jpg', ), ;, }, function, setup, (, ), {, createCanvas, (, 720, ,, 200, ), ;, pixelDensity, (, 1, ), ;, img, ., loadPixels, (, ), ;, loadPixels, (, ), ;, }, function, draw, (, ), {, for, (, let, x, =, 0, ;, x, <, img, ., width, ;, x, ++, ), {,   , for, (, let, y, =, 0, ;, y, <, img, ., height, ;, y, ++, ), {,   ,   , \n// Calculate the 1D location from a 2D grid\n,   ,   , let, loc, =, (, x, +, y, *, img, ., width, ), *, 4, ;,   ,   , \n// Get the R,G,B values from image\n,   ,   , let, r, ,, g, ,, b, ;,   ,   , r, =, img, ., pixels, [, loc, ], ;,   ,   , \n// Calculate an amount to change brightness based on proximity to the mouse\n,   ,   , let, maxdist, =, 50, ;,   ,   , let, d, =, dist, (, x, ,, y, ,, mouseX, ,, mouseY, ), ;,   ,   , let, adjustbrightness, =, (, 255, *, (, maxdist, -, d, )), /, maxdist, ;,   ,   , r, +=, adjustbrightness, ;,   ,   , \n// Constrain RGB to make sure they are within 0-255 color range\n,   ,   , r, =, constrain, (, r, ,, 0, ,, 255, ), ;,   ,   , \n// Make a new color and set pixel in the window\n,   ,   , \n//color c = color(r, g, b);\n,   ,   , let, pixloc, =, (, y, *, width, +, x, ), *, 4, ;,   ,   , pixels, [, pixloc, ], =, r, ;,   ,   , pixels, [, pixloc, +, 1, ], =, r, ;,   ,   , pixels, [, pixloc, +, 2, ], =, r, ;,   ,   , pixels, [, pixloc, +, 3, ], =, 255, ;,   , }, }, updatePixels, (, ), ;, }"
    }, {
        "name": "Color Variables",
        "description": "(Homage to Albers.) This example creates variables for colors that may be referred to in the program by a name, rather than a number.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, background, (, 51, ,, 0, ,, 0, ), ;, let, inside, =, color, (, 204, ,, 102, ,, 0, ), ;, let, middle, =, color, (, 204, ,, 153, ,, 0, ), ;, let, outside, =, color, (, 153, ,, 51, ,, 0, ), ;, \n// These statements are equivalent to the statements above.\n, \n// Programmers may use the format they prefer.\n, \n//let inside = color('#CC6600');\n, \n//let middle = color('#CC9900');\n, \n//let outside = color('#993300');\n, push, (, ), ;, translate, (, 80, ,, 80, ), ;, fill, (, outside, ), ;, rect, (, 0, ,, 0, ,, 200, ,, 200, ), ;, fill, (, middle, ), ;, rect, (, 40, ,, 60, ,, 120, ,, 120, ), ;, fill, (, inside, ), ;, rect, (, 60, ,, 90, ,, 80, ,, 80, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, 360, ,, 80, ), ;, fill, (, inside, ), ;, rect, (, 0, ,, 0, ,, 200, ,, 200, ), ;, fill, (, outside, ), ;, rect, (, 40, ,, 60, ,, 120, ,, 120, ), ;, fill, (, middle, ), ;, rect, (, 60, ,, 90, ,, 80, ,, 80, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Relativity",
        "description": "Each color is perceived in relation to other colors. The top and bottom bars each contain the same component colors, but a different display order causes individual colors to appear differently.",
        "code": " let, a, ,, b, ,, c, ,, d, ,, e, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, a, =, color, (, 165, ,, 167, ,, 20, ), ;, b, =, color, (, 77, ,, 86, ,, 59, ), ;, c, =, color, (, 42, ,, 106, ,, 105, ), ;, d, =, color, (, 165, ,, 89, ,, 20, ), ;, e, =, color, (, 146, ,, 150, ,, 127, ), ;, noLoop, (, ), ;, \n// Draw only one time\n, }, function, draw, (, ), {, drawBand, (, a, ,, b, ,, c, ,, d, ,, e, ,, 0, ,, width, /, 128, ), ;, drawBand, (, c, ,, a, ,, d, ,, b, ,, e, ,, height, /, 2, ,, width, /, 128, ), ;, }, function, drawBand, (, v, , , w, , , x, , , y, , , z, , , ypos, , , barWidth, ), {, let, num, =, 5, ;, let, colorOrder, =, [, v, ,, w, ,, x, ,, y, ,, z, ], ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, +=, barWidth, *, num, ), {,   , for, (, let, j, =, 0, ;, j, <, num, ;, j, ++, ), {,   ,   , fill, (, colorOrder, [, j, ]), ;,   ,   , rect, (, i, +, j, *, barWidth, ,, ypos, ,, barWidth, ,, height, /, 2, ), ;,   , }, }, }"
    }, {
        "name": "Linear Gradient",
        "description": "The lerpColor() function is useful for interpolating between two colors.",
        "code": " \n// Constants\n, const, Y_AXIS, =, 1, ;, const, X_AXIS, =, 2, ;, let, b1, ,, b2, ,, c1, ,, c2, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// Define colors\n, b1, =, color, (, 255, ), ;, b2, =, color, (, 0, ), ;, c1, =, color, (, 204, ,, 102, ,, 0, ), ;, c2, =, color, (, 0, ,, 102, ,, 153, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, \n// Background\n, setGradient, (, 0, ,, 0, ,, width, /, 2, ,, height, ,, b1, ,, b2, ,, X_AXIS, ), ;, setGradient, (, width, /, 2, ,, 0, ,, width, /, 2, ,, height, ,, b2, ,, b1, ,, X_AXIS, ), ;, \n// Foreground\n, setGradient, (, 50, ,, 90, ,, 540, ,, 80, ,, c1, ,, c2, ,, Y_AXIS, ), ;, setGradient, (, 50, ,, 190, ,, 540, ,, 80, ,, c2, ,, c1, ,, X_AXIS, ), ;, }, function, setGradient, (, x, , , y, , , w, , , h, , , c1, , , c2, , , axis, ), {, noFill, (, ), ;, if, (, axis, ===, Y_AXIS, ), {,   , \n// Top to bottom gradient\n,   , for, (, let, i, =, y, ;, i, <=, y, +, h, ;, i, ++, ), {,   ,   , let, inter, =, map, (, i, ,, y, ,, y, +, h, ,, 0, ,, 1, ), ;,   ,   , let, c, =, lerpColor, (, c1, ,, c2, ,, inter, ), ;,   ,   , stroke, (, c, ), ;,   ,   , line, (, x, ,, i, ,, x, +, w, ,, i, ), ;,   , }, }, else, if, (, axis, ===, X_AXIS, ), {,   , \n// Left to right gradient\n,   , for, (, let, i, =, x, ;, i, <=, x, +, w, ;, i, ++, ), {,   ,   , let, inter, =, map, (, i, ,, x, ,, x, +, w, ,, 0, ,, 1, ), ;,   ,   , let, c, =, lerpColor, (, c1, ,, c2, ,, inter, ), ;,   ,   , stroke, (, c, ), ;,   ,   , line, (, i, ,, y, ,, i, ,, y, +, h, ), ;,   , }, }, }"
    }, {
        "name": "Radial Gradient",
        "description": "Draws a series of concentric circles to create a gradient from one color to another.",
        "code": " let, dim, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, dim, =, width, /, 2, ;, background, (, 0, ), ;, colorMode, (, HSB, ,, 360, ,, 100, ,, 100, ), ;, noStroke, (, ), ;, ellipseMode, (, RADIUS, ), ;, frameRate, (, 1, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, for, (, let, x, =, 0, ;, x, <=, width, ;, x, +=, dim, ), {,   , drawGradient, (, x, ,, height, /, 2, ), ;, }, }, function, drawGradient, (, x, , , y, ), {, let, radius, =, dim, /, 2, ;, let, h, =, random, (, 0, ,, 360, ), ;, for, (, let, r, =, radius, ;, r, >, 0, ;, --, r, ), {,   , fill, (, h, ,, 90, ,, 90, ), ;,   , ellipse, (, x, ,, y, ,, r, ,, r, ), ;,   , h, =, (, h, +, 1, ), %, 360, ;, }, }"
    }, {
        "name": "Lerp Color",
        "description": "Loop random shapes, lerp color from red to blue.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, background, (, 255, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, from, =, color, (, 255, ,, 0, ,, 0, ,, 0.2, *, 255, ), ;, to, =, color, (, 0, ,, 0, ,, 255, ,, 0.2, *, 255, ), ;, c1, =, lerpColor, (, from, ,, to, ,, 0.33, ), ;, c2, =, lerpColor, (, from, ,, to, ,, 0.66, ), ;, for, (, let, i, =, 0, ;, i, <, 15, ;, i, ++, ), {,   , fill, (, from, ), ;,   , quad, (,   ,   , random, (, -40, ,, 220, ), ,, random, (, height, ), ,,   ,   , random, (, -40, ,, 220, ), ,, random, (, height, ), ,,   ,   , random, (, -40, ,, 220, ), ,, random, (, height, ), ,,   ,   , random, (, -40, ,, 220, ), ,, random, (, height, ),   , ), ;,   , fill, (, c1, ), ;,   , quad, (,   ,   , random, (, 140, ,, 380, ), ,, random, (, height, ), ,,   ,   , random, (, 140, ,, 380, ), ,, random, (, height, ), ,,   ,   , random, (, 140, ,, 380, ), ,, random, (, height, ), ,,   ,   , random, (, 140, ,, 380, ), ,, random, (, height, ),   , ), ;,   , fill, (, c2, ), ;,   , quad, (,   ,   , random, (, 320, ,, 580, ), ,, random, (, height, ), ,,   ,   , random, (, 320, ,, 580, ), ,, random, (, height, ), ,,   ,   , random, (, 320, ,, 580, ), ,, random, (, height, ), ,,   ,   , random, (, 320, ,, 580, ), ,, random, (, height, ),   , ), ;,   , fill, (, to, ), ;,   , quad, (,   ,   , random, (, 500, ,, 760, ), ,, random, (, height, ), ,,   ,   , random, (, 500, ,, 760, ), ,, random, (, height, ), ,,   ,   , random, (, 500, ,, 760, ), ,, random, (, height, ), ,,   ,   , random, (, 500, ,, 760, ), ,, random, (, height, ),   , ), ;, }, frameRate, (, 5, ), ;, }"
    }]
}, {
    "groupName": "Math",
    "examples": [{
        "name": "Increment Decrement",
        "description": "Writing \"a++\" is equivalent to \"a = a + 1\". Writing \"a--\" is equivalent to \"a = a - 1\".",
        "code": " let, a, ;, let, b, ;, let, direction, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, colorMode, (, RGB, ,, width, ), ;, a, =, 0, ;, b, =, width, ;, direction, =, true, ;, frameRate, (, 30, ), ;, }, function, draw, (, ), {, a, ++, ;, if, (, a, >, width, ), {,   , a, =, 0, ;,   , direction, =, !, direction, ;, }, if, (, direction, ===, true, ), {,   , stroke, (, a, ), ;, }, else, {,   , stroke, (, width, -, a, ), ;, }, line, (, a, ,, 0, ,, a, ,, height, /, 2, ), ;, b, --, ;, if, (, b, <, 0, ), {,   , b, =, width, ;, }, if, (, direction, ==, true, ), {,   , stroke, (, width, -, b, ), ;, }, else, {,   , stroke, (, b, ), ;, }, line, (, b, ,, height, /, 2, +, 1, ,, b, ,, height, ), ;, }"
    }, {
        "name": "Operator Precedence",
        "description": "If you don't explicitly state the order in which an expression is evaluated, they are evaluated based on the operator precedence. For example, in the statement \"4+2*8\", the 2 will first be multiplied by 8 and then the result will be added to 4. This is because the \"*\" has a higher precedence than the \"+\". To avoid ambiguity in reading the program, it is recommended that is statement is written as \"4+(2*8)\". The order of evaluation can be controlled through placement of parenthesis in the code. A table of operator precedence follows below.",
        "code": " \n// The highest precedence is at the top of the list and\n, \n// the lowest is at the bottom.\n, \n// Multiplicative: * / %\n, \n// Additive: + -\n, \n// Relational: < > <= >=\n, \n// Equality: == !=\n, \n// Logical AND: &&\n, \n// Logical OR: ||\n, \n// Assignment: = += -= *= /= %=\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 51, ), ;, noFill, (, ), ;, stroke, (, 51, ), ;, stroke, (, 204, ), ;, for, (, let, i, =, 0, ;, i, <, width, -, 20, ;, i, +=, 4, ), {,   , \n// The 30 is added to 70 and then evaluated\n,   , \n// if it is greater than the current value of \"i\"\n,   , \n// For clarity, write as \"if (i > (30 + 70)) {\"\n,   , if, (, i, >, 30, +, 70, ), {,   ,   , line, (, i, ,, 0, ,, i, ,, 50, ), ;,   , }, }, stroke, (, 255, ), ;, \n// The 2 is multiplied by the 8 and the result is added to the 4\n, \n// For clarity, write as \"rect(5 + (2 * 8), 0, 90, 20);\"\n, rect, (, 4, +, 2, *, 8, ,, 52, ,, 290, ,, 48, ), ;, rect, ((, 4, +, 2, ), *, 8, ,, 100, ,, 290, ,, 49, ), ;, stroke, (, 153, ), ;, for, (, let, i, =, 0, ;, i, <, width, ;, i, +=, 2, ), {,   , \n// The relational statements are evaluated\n,   , \n// first, and then the logical AND statements and\n,   , \n// finally the logical OR. For clarity, write as:\n,   , \n// \"if(((i > 20) && (i < 50)) || ((i > 100) && (i < width-20))) {\"\n,   , if, ((, i, >, 20, &&, i, <, 50, ), ||, (, i, >, 100, &&, i, <, width, -, 20, )), {,   ,   , line, (, i, ,, 151, ,, i, ,, height, -, 1, ), ;,   , }, }, }"
    }, {
        "name": "Distance 1D",
        "description": "Move the mouse left and right to control the speed and direction of the moving shapes.",
        "code": " let, xpos1, ;, let, xpos2, ;, let, xpos3, ;, let, xpos4, ;, let, thin, =, 8, ;, let, thick, =, 36, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, xpos1, =, width, /, 2, ;, xpos2, =, width, /, 2, ;, xpos3, =, width, /, 2, ;, xpos4, =, width, /, 2, ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, mx, =, mouseX, *, 0.4, -, width, /, 5.0, ;, fill, (, 102, ), ;, rect, (, xpos2, ,, 0, ,, thick, ,, height, /, 2, ), ;, fill, (, 204, ), ;, rect, (, xpos1, ,, 0, ,, thin, ,, height, /, 2, ), ;, fill, (, 102, ), ;, rect, (, xpos4, ,, height, /, 2, ,, thick, ,, height, /, 2, ), ;, fill, (, 204, ), ;, rect, (, xpos3, ,, height, /, 2, ,, thin, ,, height, /, 2, ), ;, xpos1, +=, mx, /, 16, ;, xpos2, +=, mx, /, 64, ;, xpos3, -=, mx, /, 16, ;, xpos4, -=, mx, /, 64, ;, if, (, xpos1, <, -, thin, ), {,   , xpos1, =, width, ;, }, if, (, xpos1, >, width, ), {,   , xpos1, =, -, thin, ;, }, if, (, xpos2, <, -, thick, ), {,   , xpos2, =, width, ;, }, if, (, xpos2, >, width, ), {,   , xpos2, =, -, thick, ;, }, if, (, xpos3, <, -, thin, ), {,   , xpos3, =, width, ;, }, if, (, xpos3, >, width, ), {,   , xpos3, =, -, thin, ;, }, if, (, xpos4, <, -, thick, ), {,   , xpos4, =, width, ;, }, if, (, xpos4, >, width, ), {,   , xpos4, =, -, thick, ;, }, }"
    }, {
        "name": "Distance 2D",
        "description": "Move the mouse across the image to obscure and reveal the matrix. Measures the distance from the mouse to each circle and sets the size proportionally.",
        "code": " let, max_distance, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, max_distance, =, dist, (, 0, ,, 0, ,, width, ,, height, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, for, (, let, i, =, 0, ;, i, <=, width, ;, i, +=, 20, ), {,   , for, (, let, j, =, 0, ;, j, <=, height, ;, j, +=, 20, ), {,   ,   , let, size, =, dist, (, mouseX, ,, mouseY, ,, i, ,, j, ), ;,   ,   , size, =, (, size, /, max_distance, ), *, 66, ;,   ,   , ellipse, (, i, ,, j, ,, size, ,, size, ), ;,   , }, }, }"
    }, {
        "name": "Sine",
        "description": "Smoothly scaling size with the sin() function.",
        "code": " let, diameter, ;, let, angle, =, 0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, diameter, =, height, -, 10, ;, noStroke, (, ), ;, fill, (, 255, ,, 204, ,, 0, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, d1, =, 10, +, (, sin, (, angle, ), *, diameter, ), /, 2, +, diameter, /, 2, ;, let, d2, =, 10, +, (, sin, (, angle, +, PI, /, 2, ), *, diameter, ), /, 2, +, diameter, /, 2, ;, let, d3, =, 10, +, (, sin, (, angle, +, PI, ), *, diameter, ), /, 2, +, diameter, /, 2, ;, ellipse, (, 0, ,, height, /, 2, ,, d1, ,, d1, ), ;, ellipse, (, width, /, 2, ,, height, /, 2, ,, d2, ,, d2, ), ;, ellipse, (, width, ,, height, /, 2, ,, d3, ,, d3, ), ;, angle, +=, 0.02, ;, }"
    }, {
        "name": "Sine Cosine",
        "description": "Linear movement with sin() and cos(). Numbers between 0 and 2π (2π which angles roughly 6.28) are put into these functions and numbers between -1 and 1 are returned. These values are then scaled to produce larger movements.",
        "code": " let, angle1, =, 0, ;, let, angle2, =, 0, ;, let, scalar, =, 70, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, rectMode, (, CENTER, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, ang1, =, radians, (, angle1, ), ;, let, ang2, =, radians, (, angle2, ), ;, let, x1, =, width, /, 2, +, scalar, *, cos, (, ang1, ), ;, let, x2, =, width, /, 2, +, scalar, *, cos, (, ang2, ), ;, let, y1, =, height, /, 2, +, scalar, *, sin, (, ang1, ), ;, let, y2, =, height, /, 2, +, scalar, *, sin, (, ang2, ), ;, fill, (, 255, ), ;, rect, (, width, *, 0.5, ,, height, *, 0.5, ,, 140, ,, 140, ), ;, fill, (, 0, ,, 102, ,, 153, ), ;, ellipse, (, x1, ,, height, *, 0.5, -, 120, ,, scalar, ,, scalar, ), ;, ellipse, (, x2, ,, height, *, 0.5, +, 120, ,, scalar, ,, scalar, ), ;, fill, (, 255, ,, 204, ,, 0, ), ;, ellipse, (, width, *, 0.5, -, 120, ,, y1, ,, scalar, ,, scalar, ), ;, ellipse, (, width, *, 0.5, +, 120, ,, y2, ,, scalar, ,, scalar, ), ;, angle1, +=, 2, ;, angle2, +=, 3, ;, }"
    }, {
        "name": "Sine Wave",
        "description": "Render a simple sine wave. Original by Daniel Shiffman.",
        "code": " let, xspacing, =, 16, ;, \n// Distance between each horizontal location\n, let, w, ;, \n// Width of entire wave\n, let, theta, =, 0.0, ;, \n// Start angle at 0\n, let, amplitude, =, 75.0, ;, \n// Height of wave\n, let, period, =, 500.0, ;, \n// How many pixels before the wave repeats\n, let, dx, ;, \n// Value for incrementing x\n, let, yvalues, ;, \n// Using an array to store height values for the wave\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, w, =, width, +, 16, ;, dx, =, (, TWO_PI, /, period, ), *, xspacing, ;, yvalues, =, new, Array, (, floor, (, w, /, xspacing, )), ;, }, function, draw, (, ), {, background, (, 0, ), ;, calcWave, (, ), ;, renderWave, (, ), ;, }, function, calcWave, (, ), {, \n// Increment theta (try different values for\n, \n// 'angular velocity' here)\n, theta, +=, 0.02, ;, \n// For every x value, calculate a y value with sine function\n, let, x, =, theta, ;, for, (, let, i, =, 0, ;, i, <, yvalues, ., length, ;, i, ++, ), {,   , yvalues, [, i, ], =, sin, (, x, ), *, amplitude, ;,   , x, +=, dx, ;, }, }, function, renderWave, (, ), {, noStroke, (, ), ;, fill, (, 255, ), ;, \n// A simple way to draw the wave with an ellipse at each location\n, for, (, let, x, =, 0, ;, x, <, yvalues, ., length, ;, x, ++, ), {,   , ellipse, (, x, *, xspacing, ,, height, /, 2, +, yvalues, [, x, ], ,, 16, ,, 16, ), ;, }, }"
    }, {
        "name": "Additive Wave",
        "description": "Create a more complex wave by adding two waves together. Original by Daniel Shiffman",
        "code": " let, xspacing, =, 8, ;, \n// Distance between each horizontal location\n, let, w, ;, \n// Width of entire wave\n, let, maxwaves, =, 4, ;, \n// total # of waves to add together\n, let, theta, =, 0.0, ;, let, amplitude, =, new, Array, (, maxwaves, ), ;, \n// Height of wave\n, \n// Value for incrementing X, to be calculated\n, \n// as a function of period and xspacing\n, let, dx, =, new, Array, (, maxwaves, ), ;, \n// Using an array to store height values\n, \n// for the wave (not entirely necessary)\n, let, yvalues, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, frameRate, (, 30, ), ;, colorMode, (, RGB, ,, 255, ,, 255, ,, 255, ,, 100, ), ;, w, =, width, +, 16, ;, for, (, let, i, =, 0, ;, i, <, maxwaves, ;, i, ++, ), {,   , amplitude, [, i, ], =, random, (, 10, ,, 30, ), ;,   , let, period, =, random, (, 100, ,, 300, ), ;, \n// Num pixels before wave repeats\n,   , dx, [, i, ], =, (, TWO_PI, /, period, ), *, xspacing, ;, }, yvalues, =, new, Array, (, floor, (, w, /, xspacing, )), ;, }, function, draw, (, ), {, background, (, 0, ), ;, calcWave, (, ), ;, renderWave, (, ), ;, }, function, calcWave, (, ), {, \n// Increment theta (try different values\n, \n// for 'angular velocity' here\n, theta, +=, 0.02, ;, \n// Set all height values to zero\n, for, (, let, i, =, 0, ;, i, <, yvalues, ., length, ;, i, ++, ), {,   , yvalues, [, i, ], =, 0, ;, }, \n// Accumulate wave height values\n, for, (, let, j, =, 0, ;, j, <, maxwaves, ;, j, ++, ), {,   , let, x, =, theta, ;,   , for, (, let, i, =, 0, ;, i, <, yvalues, ., length, ;, i, ++, ), {,   ,   , \n// Every other wave is cosine instead of sine\n,   ,   , if, (, j, %, 2, ==, 0, ), yvalues, [, i, ], +=, sin, (, x, ), *, amplitude, [, j, ], ;,   ,   , else, yvalues, [, i, ], +=, cos, (, x, ), *, amplitude, [, j, ], ;,   ,   , x, +=, dx, [, j, ], ;,   , }, }, }, function, renderWave, (, ), {, \n// A simple way to draw the wave with an ellipse at each location\n, noStroke, (, ), ;, fill, (, 255, ,, 50, ), ;, ellipseMode, (, CENTER, ), ;, for, (, let, x, =, 0, ;, x, <, yvalues, ., length, ;, x, ++, ), {,   , ellipse, (, x, *, xspacing, ,, width, /, 2, +, yvalues, [, x, ], ,, 16, ,, 16, ), ;, }, }"
    }, {
        "name": "PolarToCartesian",
        "description": "Convert a polar coordinate (r,θ) to cartesian (x,y): x = r cos(θ), y = r sin(θ) Original by Daniel Shiffman.",
        "code": " let, r, ;, \n// Angle and angular velocity, accleration\n, let, theta, ;, let, theta_vel, ;, let, theta_acc, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// Initialize all values\n, r, =, height, *, 0.45, ;, theta, =, 0, ;, theta_vel, =, 0, ;, theta_acc, =, 0.0001, ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Translate the origin point to the center of the screen\n, translate, (, width, /, 2, ,, height, /, 2, ), ;, \n// Convert polar to cartesian\n, let, x, =, r, *, cos, (, theta, ), ;, let, y, =, r, *, sin, (, theta, ), ;, \n// Draw the ellipse at the cartesian coordinate\n, ellipseMode, (, CENTER, ), ;, noStroke, (, ), ;, fill, (, 200, ), ;, ellipse, (, x, ,, y, ,, 32, ,, 32, ), ;, \n// Apply acceleration and velocity to angle\n, \n// (r remains static in this example)\n, theta_vel, +=, theta_acc, ;, theta, +=, theta_vel, ;, }"
    }, {
        "name": "Arctangent",
        "description": "Move the mouse to change the direction of the eyes.\nThe atan2() function computes the angle from each eye to the cursor.",
        "code": " let, e1, ,, e2, ,, e3, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, e1, =, new, Eye, (, 250, ,, 16, ,, 120, ), ;, e2, =, new, Eye, (, 164, ,, 185, ,, 80, ), ;, e3, =, new, Eye, (, 420, ,, 230, ,, 220, ), ;, }, function, draw, (, ), {, background, (, 102, ), ;, e1, ., update, (, mouseX, ,, mouseY, ), ;, e2, ., update, (, mouseX, ,, mouseY, ), ;, e3, ., update, (, mouseX, ,, mouseY, ), ;, e1, ., display, (, ), ;, e2, ., display, (, ), ;, e3, ., display, (, ), ;, }, function, Eye, (, tx, , , ty, , , ts, ), {, this, ., x, =, tx, ;, this, ., y, =, ty, ;, this, ., size, =, ts, ;, this, ., angle, =, 0, ;, this, ., update, =, function, (, mx, , , my, ), {,   , this, ., angle, =, atan2, (, my, -, this, ., y, ,, mx, -, this, ., x, ), ;, }, ;, this, ., display, =, function, (, ), {,   , push, (, ), ;,   , translate, (, this, ., x, ,, this, ., y, ), ;,   , fill, (, 255, ), ;,   , ellipse, (, 0, ,, 0, ,, this, ., size, ,, this, ., size, ), ;,   , rotate, (, this, ., angle, ), ;,   , fill, (, 153, ,, 204, ,, 0, ), ;,   , ellipse, (, this, ., size, /, 4, ,, 0, ,, this, ., size, /, 2, ,, this, ., size, /, 2, ), ;,   , pop, (, ), ;, }, ;, }"
    }, {
        "name": "Linear Interpolation",
        "description": "Move the mouse across the screen and the symbol will follow. Between drawing each frame of the animation, the ellipse moves part of the distance (0.05) from its current position toward the cursor using the lerp() function. This is the same as the Easing under input only with lerp() instead..",
        "code": " let, x, =, 0, ;, let, y, =, 0, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, \n// lerp() calculates a number between two numbers at a specific increment.\n, \n// The amt parameter is the amount to interpolate between the two values\n, \n// where 0.0 equal to the first point, 0.1 is very near the first point, 0.5\n, \n// is half-way in between, etc.\n, \n// Here we are moving 5% of the way to the mouse location each frame\n, x, =, lerp, (, x, ,, mouseX, ,, 0.05, ), ;, y, =, lerp, (, y, ,, mouseY, ,, 0.05, ), ;, fill, (, 255, ), ;, stroke, (, 255, ), ;, ellipse, (, x, ,, y, ,, 66, ,, 66, ), ;, }"
    }, {
        "name": "Double Random",
        "description": "Using two random() calls and the point() function to create an irregular sawtooth line. Original by by Ira Greenberg.",
        "code": " let, totalPts, =, 300, ;, let, steps, =, totalPts, +, 1, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, stroke, (, 255, ), ;, frameRate, (, 1, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, rand, =, 0, ;, for, (, let, i, =, 1, ;, i, <, steps, ;, i, ++, ), {,   , point, ((, width, /, steps, ), *, i, ,, height, /, 2, +, random, (, -, rand, ,, rand, )), ;,   , rand, +=, random, (, -5, ,, 5, ), ;, }, }"
    }, {
        "name": "Random",
        "description": "Random numbers create the basis of this image. Each time the program is loaded the result is different.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 0, ), ;, strokeWeight, (, 20, ), ;, frameRate, (, 2, ), ;, }, function, draw, (, ), {, for, (, let, i, =, 0, ;, i, <, width, ;, i, ++, ), {,   , let, r, =, random, (, 255, ), ;,   , stroke, (, r, ), ;,   , line, (, i, ,, 0, ,, i, ,, height, ), ;, }, }"
    }, {
        "name": "Noise1D",
        "description": "Using 1D Perlin Noise to assign location.",
        "code": " let, xoff, =, 0.0, ;, let, xincrement, =, 0.01, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 0, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, \n// Create an alpha blended background\n, fill, (, 0, ,, 10, ), ;, rect, (, 0, ,, 0, ,, width, ,, height, ), ;, \n//let n = random(0,width);  // Try this line instead of noise\n, \n// Get a noise value based on xoff and scale\n, \n// it according to the window's width\n, let, n, =, noise, (, xoff, ), *, width, ;, \n// With each cycle, increment xoff\n, xoff, +=, xincrement, ;, \n// Draw the ellipse at the value produced by perlin noise\n, fill, (, 200, ), ;, ellipse, (, n, ,, height, /, 2, ,, 64, ,, 64, ), ;, }"
    }, {
        "name": "Noise Wave",
        "description": "Using Perlin Noise to generate a wave-like pattern. Original by Daniel Shiffman.",
        "code": " let, yoff, =, 0.0, ;, \n// 2nd dimension of perlin noise\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, fill, (, 255, ), ;, \n// We are going to draw a polygon out of the wave points\n, beginShape, (, ), ;, let, xoff, =, 0, ;, \n// Option #1: 2D Noise\n, \n// let xoff = yoff; // Option #2: 1D Noise\n, \n// Iterate over horizontal pixels\n, for, (, let, x, =, 0, ;, x, <=, width, ;, x, +=, 10, ), {,   , \n// Calculate a y value according to noise, map to\n,   , \n// Option #1: 2D Noise\n,   , let, y, =, map, (, noise, (, xoff, ,, yoff, ), ,, 0, ,, 1, ,, 200, ,, 300, ), ;,   , \n// Option #2: 1D Noise\n,   , \n// let y = map(noise(xoff), 0, 1, 200,300);\n,   , \n// Set the vertex\n,   , vertex, (, x, ,, y, ), ;,   , \n// Increment x dimension for noise\n,   , xoff, +=, 0.05, ;, }, \n// increment y dimension for noise\n, yoff, +=, 0.01, ;, vertex, (, width, ,, height, ), ;, vertex, (, 0, ,, height, ), ;, endShape, (, CLOSE, ), ;, }"
    }, {
        "name": "Noise2D",
        "description": "Create a 2D noise with different parameters. *",
        "code": " let, noiseVal, ;, let, noiseScale, =, 0.02, ;, function, setup, (, ), {, createCanvas, (, 640, ,, 360, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Draw the left half of image\n, for, (, let, y, =, 0, ;, y, <, height, -, 30, ;, y, ++, ), {,   , for, (, let, x, =, 0, ;, x, <, width, /, 2, ;, x, ++, ), {,   ,   , \n// noiseDetail of the pixels octave count and falloff value\n,   ,   , noiseDetail, (, 2, ,, 0.2, ), ;,   ,   , noiseVal, =, noise, ((, mouseX, +, x, ), *, noiseScale, ,, (, mouseY, +, y, ), *, noiseScale, ), ;,   ,   , stroke, (, noiseVal, *, 255, ), ;,   ,   , point, (, x, ,, y, ), ;,   , }, }, \n// Draw the right half of image\n, for, (, let, y, =, 0, ;, y, <, height, -, 30, ;, y, ++, ), {,   , for, (, let, x, =, width, /, 2, ;, x, <, width, ;, x, ++, ), {,   ,   , \n// noiseDetail of the pixels octave count and falloff value\n,   ,   , noiseDetail, (, 5, ,, 0.5, ), ;,   ,   , noiseVal, =, noise, ((, mouseX, +, x, ), *, noiseScale, ,, (, mouseY, +, y, ), *, noiseScale, ), ;,   ,   , stroke, (, noiseVal, *, 255, ), ;,   ,   , point, (, x, ,, y, ), ;,   , }, }, \n//Show the details of two partitions\n, textSize, (, 18, ), ;, fill, (, 255, ,, 255, ,, 255, ), ;, text, (, 'Noise2D with 2 octaves and 0.2 falloff', ,, 10, ,, 350, ), ;, text, (, 'Noise2D with 1 octaves and 0.7 falloff', ,, 330, ,, 350, ), ;, }"
    }, {
        "name": "Noise3D",
        "description": "Using 3D noise to create simple animated texture.",
        "code": " let, noiseVal, ;, \n//Increment x by 0.01\n, let, x_increment, =, 0.01, ;, \n//Increment z by 0.02 every draw() cycle\n, let, z_increment, =, 0.02, ;, \n//Offset values\n, let, z_off, ,, y_off, ,, x_off, ;, function, setup, (, ), {, \n//Create the Canvas\n, createCanvas, (, 640, ,, 360, ), ;, \n//Define frame rate\n, frameRate, (, 20, ), ;, \n//Initial value of z_off\n, z_off, =, 0, ;, }, function, draw, (, ), {, x_off, =, 0, ;, y_off, =, 0, ;, \n//Make the background black\n, background, (, 0, ), ;, \n//Adjust the noice detail\n, noiseDetail, (, 8, ,, 0.65, ), ;, \n//For each x,y calculate noice value\n, for, (, let, y, =, 0, ;, y, <, height, ;, y, ++, ), {,   , x_off, +=, x_increment, ;,   , y_off, =, 0, ;,   , for, (, let, x, =, 0, ;, x, <, width, ;, x, ++, ), {,   ,   , \n//Calculate and Draw each pixel\n,   ,   , noiseVal, =, noise, (, x_off, ,, y_off, ,, z_off, ), ;,   ,   , stroke, (, noiseVal, *, 255, ), ;,   ,   , y_off, +=, x_increment, ;,   ,   , point, (, x, ,, y, ), ;,   , }, }, z_off, +=, z_increment, ;, }"
    }, {
        "name": "Random Chords",
        "description": "Accumulates random chords of a circle. Each chord in translucent so they accumulate to give the illusion of a shaded sphere. Contributed by Aatish Bhatia, inspired by Anders Hoff",
        "code": " function, setup, (, ), {, createCanvas, (, 400, ,, 400, ), ;, background, (, 255, ,, 255, ,, 255, ), ;, \n// translucent stroke using alpha value\n, stroke, (, 0, ,, 0, ,, 0, ,, 15, ), ;, }, function, draw, (, ), {, \n// draw two random chords each frame\n, randomChord, (, ), ;, randomChord, (, ), ;, }, function, randomChord, (, ), {, \n// find a random point on a circle\n, let, angle1, =, random, (, 0, ,, 2, *, PI, ), ;, let, xpos1, =, 200, +, 200, *, cos, (, angle1, ), ;, let, ypos1, =, 200, +, 200, *, sin, (, angle1, ), ;, \n// find another random point on the circle\n, let, angle2, =, random, (, 0, ,, 2, *, PI, ), ;, let, xpos2, =, 200, +, 200, *, cos, (, angle2, ), ;, let, ypos2, =, 200, +, 200, *, sin, (, angle2, ), ;, \n// draw a line between them\n, line, (, xpos1, ,, ypos1, ,, xpos2, ,, ypos2, ), ;, }"
    }, {
        "name": "Random Gaussian",
        "description": "This sketch draws ellipses with x and y locations tied to a gaussian distribution of random numbers.\n\nThis example is ported from the Random Gaussian example on the Processing website",
        "code": " function, setup, (, ), {,   , createCanvas, (, 720, ,, 400, ), ;,   , background, (, 0, ), ;, }, function, draw, (, ), {,   , \n// Get a gaussian random number w/ mean of 0 and standard deviation of 1.0\n,   , let, val, =, randomGaussian, (, ), ;,   , let, sd, =, 60, ;, \n// Define a standard deviation\n,   , let, mean, =, width, /, 2, ;, \n// Define a mean value (middle of the screen along the x-axis)\n,   , let, x, =, (, val, *, sd, ), +, mean, ;, \n// Scale the gaussian random number by standard deviation and mean\n,   , noStroke, (, ), ;,   , fill, (, 255, ,, 10, ), ;,   , ellipse, (, x, ,, height, /, 2, ,, 32, ,, 32, ), ;, \n// Draw an ellipse at our \"normal\" random location\n, }"
    }, {
        "name": "Map",
        "description": "Use the map() function to take any number and scale it to a new number that is more useful for the project that you are working on. For example, use the numbers from the mouse position to control the size or color of a shape. In this example, the mouse’s x-coordinate (numbers between 0 and 360) are scaled to new numbers to define the color and size of a circle.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Scale the mouseX value from 0 to 720 to a range between 0 and 175\n, let, c, =, map, (, mouseX, ,, 0, ,, width, ,, 0, ,, 175, ), ;, \n// Scale the mouseX value from 0 to 720 to a range between 40 and 300\n, let, d, =, map, (, mouseX, ,, 0, ,, width, ,, 40, ,, 300, ), ;, fill, (, 255, ,, c, ,, 0, ), ;, ellipse, (, width, /, 2, ,, height, /, 2, ,, d, ,, d, ), ;, }"
    }, {
        "name": "Graphing 2D Equations",
        "description": "Graphics the following equation: sin(n cos(r) + 5θ) where n is a function of horizontal mouse location. Original by Daniel Shiffman",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, pixelDensity, (, 1, ), ;, }, function, draw, (, ), {, loadPixels, (, ), ;, let, n, =, (, mouseX, *, 10.0, ), /, width, ;, const, w, =, 16.0, ;, \n// 2D space width\n, const, h, =, 16.0, ;, \n// 2D space height\n, const, dx, =, w, /, width, ;, \n// Increment x this amount per pixel\n, const, dy, =, h, /, height, ;, \n// Increment y this amount per pixel\n, let, x, =, -, w, /, 2, ;, \n// Start x at -1 * width / 2\n, let, y, ;, let, r, ;, let, theta, ;, let, val, ;, let, bw, ;, \n//variable to store grayscale\n, let, i, ;, let, j, ;, let, cols, =, width, ;, let, rows, =, height, ;, for, (, i, =, 0, ;, i, <, cols, ;, i, +=, 1, ), {,   , y, =, -, h, /, 2, ;,   , for, (, j, =, 0, ;, j, <, rows, ;, j, +=, 1, ), {,   ,   , r, =, sqrt, (, x, *, x, +, y, *, y, ), ;, \n// Convert cartesian to polar\n,   ,   , theta, =, atan2, (, y, ,, x, ), ;, \n// Convert cartesian to polar\n,   ,   , \n// Compute 2D polar coordinate function\n,   ,   , val, =, sin, (, n, *, cos, (, r, ), +, 5, *, theta, ), ;, \n// Results in a value between -1 and 1\n,   ,   , \n//var val = cos(r);                            // Another simple function\n,   ,   , \n//var val = sin(theta);                        // Another simple function\n,   ,   , bw, =, color, (((, val, +, 1, ), *, 255, ), /, 2, ), ;,   ,   , index, =, 4, *, (, i, +, j, *, width, ), ;,   ,   , pixels, [, index, ], =, red, (, bw, ), ;,   ,   , pixels, [, index, +, 1, ], =, green, (, bw, ), ;,   ,   , pixels, [, index, +, 2, ], =, blue, (, bw, ), ;,   ,   , pixels, [, index, +, 3, ], =, alpha, (, bw, ), ;,   ,   , y, +=, dy, ;,   , },   , x, +=, dx, ;, }, updatePixels, (, ), ;, }"
    }, {
        "name": "Parametric Equations",
        "description": "A parametric equation is where x and y coordinates are both written in terms of another letter. This is called a parameter and is usually given in the letter t or θ. The inspiration was taken from the YouTube channel of Alexander Miller.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, }, \n// the parameter at which x and y depends is usually taken as either t or symbol of theta\n, let, t, =, 0, ;, function, draw, (, ), {, background, (, '#fff', ), ;, translate, (, width, /, 2, ,, height, /, 2, ), ;, stroke, (, '#0f0f0f', ), ;, strokeWeight, (, 1.5, ), ;, \n//loop for adding 100 lines\n, for, (, let, i, =, 0, ;, i, <, 100, ;, i, ++, ), {,   , line, (, x1, (, t, +, i, ), ,, y1, (, t, +, i, ), ,, x2, (, t, +, i, ), +20, ,, y2, (, t, +, i, ), +20, ), ;, }, t, +=, 0.15, ;, }, \n// function to change initial x co-ordinate of the line\n, function, x1, (, t, ), {, return, sin, (, t, /, 10, ), *, 125, +, sin, (, t, /, 20, ), *, 125, +, sin, (, t, /, 30, ), *, 125, ;, }, \n// function to change initial y co-ordinate of the line\n, function, y1, (, t, ), {, return, cos, (, t, /, 10, ), *, 125, +, cos, (, t, /, 20, ), *, 125, +, cos, (, t, /, 30, ), *, 125, ;, }, \n// function to change final x co-ordinate of the line\n, function, x2, (, t, ), {, return, sin, (, t, /, 15, ), *, 125, +, sin, (, t, /, 25, ), *, 125, +, sin, (, t, /, 35, ), *, 125, ;, }, \n// function to change final y co-ordinate of the line\n, function, y2, (, t, ), {, return, cos, (, t, /, 15, ), *, 125, +, cos, (, t, /, 25, ), *, 125, +, cos, (, t, /, 35, ), *, 125, ;, }"
    }]
}, {
    "groupName": "Simulate",
    "examples": [{
        "name": "Forces",
        "description": "Demonstration of multiple force acting on bodies (natureofcode.com)",
        "code": " \n// Demonstration of multiple force acting on\n, \n// bodies (Mover class)\n, \n// Bodies experience gravity continuously\n, \n// Bodies experience fluid resistance when in \"water\"\n, \n// Nine moving bodies\n, let, movers, =, [, ], ;, \n// Liquid\n, let, liquid, ;, function, setup, (, ), {, createCanvas, (, 640, ,, 360, ), ;, reset, (, ), ;, \n// Create liquid object\n, liquid, =, new, Liquid, (, 0, ,, height, /, 2, ,, width, ,, height, /, 2, ,, 0.1, ), ;, }, function, draw, (, ), {, background, (, 127, ), ;, \n// Draw water\n, liquid, ., display, (, ), ;, for, (, let, i, =, 0, ;, i, <, movers, ., length, ;, i, ++, ), {,   , \n// Is the Mover in the liquid?\n,   , if, (, liquid, ., contains, (, movers, [, i, ])), {,   ,   , \n// Calculate drag force\n,   ,   , let, dragForce, =, liquid, ., calculateDrag, (, movers, [, i, ]), ;,   ,   , \n// Apply drag force to Mover\n,   ,   , movers, [, i, ], ., applyForce, (, dragForce, ), ;,   , },   , \n// Gravity is scaled by mass here!\n,   , let, gravity, =, createVector, (, 0, ,, 0.1, *, movers, [, i, ], ., mass, ), ;,   , \n// Apply gravity\n,   , movers, [, i, ], ., applyForce, (, gravity, ), ;,   , \n// Update and display\n,   , movers, [, i, ], ., update, (, ), ;,   , movers, [, i, ], ., display, (, ), ;,   , movers, [, i, ], ., checkEdges, (, ), ;, }, }, function, mousePressed, (, ), {, reset, (, ), ;, }, \n// Restart all the Mover objects randomly\n, function, reset, (, ), {, for, (, let, i, =, 0, ;, i, <, 9, ;, i, ++, ), {,   , movers, [, i, ], =, new, Mover, (, random, (, 0.5, ,, 3, ), ,, 40, +, i, *, 70, ,, 0, ), ;, }, }, let, Liquid, =, function, (, x, , , y, , , w, , , h, , , c, ), {, this, ., x, =, x, ;, this, ., y, =, y, ;, this, ., w, =, w, ;, this, ., h, =, h, ;, this, ., c, =, c, ;, }, ;, \n// Is the Mover in the Liquid?\n, Liquid, ., prototype, ., contains, =,  , function, (, m, ), {, let, l, =, m, ., position, ;, return, (,   , l, ., x, >, this, ., x, &&,   , l, ., x, <, this, ., x, +, this, ., w, &&,   , l, ., y, >, this, ., y, &&,   , l, ., y, <, this, ., y, +, this, ., h, ), ;, }, ;, \n// Calculate drag force\n, Liquid, ., prototype, ., calculateDrag, =,  , function, (, m, ), {, \n// Magnitude is coefficient * speed squared\n, let, speed, =, m, ., velocity, ., mag, (, ), ;, let, dragMagnitude, =, this, ., c, *, speed, *, speed, ;, \n// Direction is inverse of velocity\n, let, dragForce, =, m, ., velocity, ., copy, (, ), ;, dragForce, ., mult, (, -1, ), ;, \n// Scale according to magnitude\n, \n// dragForce.setMag(dragMagnitude);\n, dragForce, ., normalize, (, ), ;, dragForce, ., mult, (, dragMagnitude, ), ;, return, dragForce, ;, }, ;, Liquid, ., prototype, ., display, =,  , function, (, ), {, noStroke, (, ), ;, fill, (, 50, ), ;, rect, (, this, ., x, ,, this, ., y, ,, this, ., w, ,, this, ., h, ), ;, }, ;, function, Mover, (, m, , , x, , , y, ), {, this, ., mass, =, m, ;, this, ., position, =, createVector, (, x, ,, y, ), ;, this, ., velocity, =, createVector, (, 0, ,, 0, ), ;, this, ., acceleration, =, createVector, (, 0, ,, 0, ), ;, }, \n// Newton's 2nd law: F = M * A\n, \n// or A = F / M\n, Mover, ., prototype, ., applyForce, =,  , function, (, force, ), {, let, f, =, p5, ., Vector, ., div, (, force, ,, this, ., mass, ), ;, this, ., acceleration, ., add, (, f, ), ;, }, ;, Mover, ., prototype, ., update, =,  , function, (, ), {, \n// Velocity changes according to acceleration\n, this, ., velocity, ., add, (, this, ., acceleration, ), ;, \n// position changes by velocity\n, this, ., position, ., add, (, this, ., velocity, ), ;, \n// We must clear acceleration each frame\n, this, ., acceleration, ., mult, (, 0, ), ;, }, ;, Mover, ., prototype, ., display, =,  , function, (, ), {, stroke, (, 0, ), ;, strokeWeight, (, 2, ), ;, fill, (, 255, ,, 127, ), ;, ellipse, (, this, ., position, ., x, ,, this, ., position, ., y, ,, this, ., mass, *, 16, ,, this, ., mass, *, 16, ), ;, }, ;, \n// Bounce off bottom of window\n, Mover, ., prototype, ., checkEdges, =,  , function, (, ), {, if, (, this, ., position, ., y, >, height, -, this, ., mass, *, 8, ), {,   , \n// A little dampening when hitting the bottom\n,   , this, ., velocity, ., y, *=, -0.9, ;,   , this, ., position, ., y, =, height, -, this, ., mass, *, 8, ;, }, }, ;"
    }, {
        "name": "Particle System",
        "description": "This is a basic Particle System (natureofcode.com)",
        "code": " let, system, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, system, =, new, ParticleSystem, (, createVector, (, width, /, 2, ,, 50, )), ;, }, function, draw, (, ), {, background, (, 51, ), ;, system, ., addParticle, (, ), ;, system, ., run, (, ), ;, }, \n// A simple Particle class\n, let, Particle, =, function, (, position, ), {, this, ., acceleration, =, createVector, (, 0, ,, 0.05, ), ;, this, ., velocity, =, createVector, (, random, (, -1, ,, 1, ), ,, random, (, -1, ,, 0, )), ;, this, ., position, =, position, ., copy, (, ), ;, this, ., lifespan, =, 255, ;, }, ;, Particle, ., prototype, ., run, =,  , function, (, ), {, this, ., update, (, ), ;, this, ., display, (, ), ;, }, ;, \n// Method to update position\n, Particle, ., prototype, ., update, =,  , function, (, ), {, this, ., velocity, ., add, (, this, ., acceleration, ), ;, this, ., position, ., add, (, this, ., velocity, ), ;, this, ., lifespan, -=, 2, ;, }, ;, \n// Method to display\n, Particle, ., prototype, ., display, =,  , function, (, ), {, stroke, (, 200, ,, this, ., lifespan, ), ;, strokeWeight, (, 2, ), ;, fill, (, 127, ,, this, ., lifespan, ), ;, ellipse, (, this, ., position, ., x, ,, this, ., position, ., y, ,, 12, ,, 12, ), ;, }, ;, \n// Is the particle still useful?\n, Particle, ., prototype, ., isDead, =,  , function, (, ), {, return, this, ., lifespan, <, 0, ;, }, ;, let, ParticleSystem, =, function, (, position, ), {, this, ., origin, =, position, ., copy, (, ), ;, this, ., particles, =, [, ], ;, }, ;, ParticleSystem, ., prototype, ., addParticle, =,  , function, (, ), {, this, ., particles, ., push, (, new, Particle, (, this, ., origin, )), ;, }, ;, ParticleSystem, ., prototype, ., run, =,  , function, (, ), {, for, (, let, i, =, this, ., particles, ., length, -1, ;, i, >=, 0, ;, i, --, ), {,   , let, p, =, this, ., particles, [, i, ], ;,   , p, ., run, (, ), ;,   , if, (, p, ., isDead, (, )), {,   ,   , this, ., particles, ., splice, (, i, ,, 1, ), ;,   , }, }, }, ;"
    }, {
        "name": "Flocking",
        "description": "Demonstration of Craig Reynolds' \"Flocking\" behavior. See: http://www.red3d.com/cwr/ Rules: Cohesion, Separation, Alignment (from natureofcode.com). Drag mouse to add boids into the system.",
        "code": " let, flock, ;, function, setup, (, ), {, createCanvas, (, 640, ,, 360, ), ;, createP, (, \"Drag the mouse to generate new boids.\", ), ;, flock, =, new, Flock, (, ), ;, \n// Add an initial set of boids into the system\n, for, (, let, i, =, 0, ;, i, <, 100, ;, i, ++, ), {,   , let, b, =, new, Boid, (, width, /, 2, ,, height, /, 2, ), ;,   , flock, ., addBoid, (, b, ), ;, }, }, function, draw, (, ), {, background, (, 51, ), ;, flock, ., run, (, ), ;, }, \n// Add a new boid into the System\n, function, mouseDragged, (, ), {, flock, ., addBoid, (, new, Boid, (, mouseX, ,, mouseY, )), ;, }, \n// The Nature of Code\n, \n// Daniel Shiffman\n, \n// http://natureofcode.com\n, \n// Flock object\n, \n// Does very little, simply manages the array of all the boids\n, function, Flock, (, ), {, \n// An array for all the boids\n, this, ., boids, =, [, ], ;, \n// Initialize the array\n, }, Flock, ., prototype, ., run, =,  , function, (, ), {, for, (, let, i, =, 0, ;, i, <, this, ., boids, ., length, ;, i, ++, ), {,   , this, ., boids, [, i, ], ., run, (, this, ., boids, ), ;, \n// Passing the entire list of boids to each boid individually\n, }, }, Flock, ., prototype, ., addBoid, =,  , function, (, b, ), {, this, ., boids, ., push, (, b, ), ;, }, \n// The Nature of Code\n, \n// Daniel Shiffman\n, \n// http://natureofcode.com\n, \n// Boid class\n, \n// Methods for Separation, Cohesion, Alignment added\n, function, Boid, (, x, , , y, ), {, this, ., acceleration, =, createVector, (, 0, ,, 0, ), ;, this, ., velocity, =, createVector, (, random, (, -1, ,, 1, ), ,, random, (, -1, ,, 1, )), ;, this, ., position, =, createVector, (, x, ,, y, ), ;, this, ., r, =, 3.0, ;, this, ., maxspeed, =, 3, ;, \n// Maximum speed\n, this, ., maxforce, =, 0.05, ;, \n// Maximum steering force\n, }, Boid, ., prototype, ., run, =,  , function, (, boids, ), {, this, ., flock, (, boids, ), ;, this, ., update, (, ), ;, this, ., borders, (, ), ;, this, ., render, (, ), ;, }, Boid, ., prototype, ., applyForce, =,  , function, (, force, ), {, \n// We could add mass here if we want A = F / M\n, this, ., acceleration, ., add, (, force, ), ;, }, \n// We accumulate a new acceleration each time based on three rules\n, Boid, ., prototype, ., flock, =,  , function, (, boids, ), {, let, sep, =, this, ., separate, (, boids, ), ;, \n// Separation\n, let, ali, =, this, ., align, (, boids, ), ;, \n// Alignment\n, let, coh, =, this, ., cohesion, (, boids, ), ;, \n// Cohesion\n, \n// Arbitrarily weight these forces\n, sep, ., mult, (, 1.5, ), ;, ali, ., mult, (, 1.0, ), ;, coh, ., mult, (, 1.0, ), ;, \n// Add the force vectors to acceleration\n, this, ., applyForce, (, sep, ), ;, this, ., applyForce, (, ali, ), ;, this, ., applyForce, (, coh, ), ;, }, \n// Method to update location\n, Boid, ., prototype, ., update, =,  , function, (, ), {, \n// Update velocity\n, this, ., velocity, ., add, (, this, ., acceleration, ), ;, \n// Limit speed\n, this, ., velocity, ., limit, (, this, ., maxspeed, ), ;, this, ., position, ., add, (, this, ., velocity, ), ;, \n// Reset accelertion to 0 each cycle\n, this, ., acceleration, ., mult, (, 0, ), ;, }, \n// A method that calculates and applies a steering force towards a target\n, \n// STEER = DESIRED MINUS VELOCITY\n, Boid, ., prototype, ., seek, =,  , function, (, target, ), {, let, desired, =, p5, ., Vector, ., sub, (, target, ,, this, ., position, ), ;, \n// A vector pointing from the location to the target\n, \n// Normalize desired and scale to maximum speed\n, desired, ., normalize, (, ), ;, desired, ., mult, (, this, ., maxspeed, ), ;, \n// Steering = Desired minus Velocity\n, let, steer, =, p5, ., Vector, ., sub, (, desired, ,, this, ., velocity, ), ;, steer, ., limit, (, this, ., maxforce, ), ;, \n// Limit to maximum steering force\n, return, steer, ;, }, Boid, ., prototype, ., render, =,  , function, (, ), {, \n// Draw a triangle rotated in the direction of velocity\n, let, theta, =, this, ., velocity, ., heading, (, ), +, radians, (, 90, ), ;, fill, (, 127, ), ;, stroke, (, 200, ), ;, push, (, ), ;, translate, (, this, ., position, ., x, ,, this, ., position, ., y, ), ;, rotate, (, theta, ), ;, beginShape, (, ), ;, vertex, (, 0, ,, -, this, ., r, *, 2, ), ;, vertex, (, -, this, ., r, ,, this, ., r, *, 2, ), ;, vertex, (, this, ., r, ,, this, ., r, *, 2, ), ;, endShape, (, CLOSE, ), ;, pop, (, ), ;, }, \n// Wraparound\n, Boid, ., prototype, ., borders, =,  , function, (, ), {, if, (, this, ., position, ., x, <, -, this, ., r, ), this, ., position, ., x, =, width, +, this, ., r, ;, if, (, this, ., position, ., y, <, -, this, ., r, ), this, ., position, ., y, =, height, +, this, ., r, ;, if, (, this, ., position, ., x, >, width, +, this, ., r, ), this, ., position, ., x, =, -, this, ., r, ;, if, (, this, ., position, ., y, >, height, +, this, ., r, ), this, ., position, ., y, =, -, this, ., r, ;, }, \n// Separation\n, \n// Method checks for nearby boids and steers away\n, Boid, ., prototype, ., separate, =,  , function, (, boids, ), {, let, desiredseparation, =, 25.0, ;, let, steer, =, createVector, (, 0, ,, 0, ), ;, let, count, =, 0, ;, \n// For every boid in the system, check if it's too close\n, for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   , \n// If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)\n,   , if, ((, d, >, 0, ), &&, (, d, <, desiredseparation, )), {,   ,   , \n// Calculate vector pointing away from neighbor\n,   ,   , let, diff, =, p5, ., Vector, ., sub, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   ,   , diff, ., normalize, (, ), ;,   ,   , diff, ., div, (, d, ), ;, \n// Weight by distance\n,   ,   , steer, ., add, (, diff, ), ;,   ,   , count, ++, ;, \n// Keep track of how many\n,   , }, }, \n// Average -- divide by how many\n, if, (, count, >, 0, ), {,   , steer, ., div, (, count, ), ;, }, \n// As long as the vector is greater than 0\n, if, (, steer, ., mag, (, ), >, 0, ), {,   , \n// Implement Reynolds: Steering = Desired - Velocity\n,   , steer, ., normalize, (, ), ;,   , steer, ., mult, (, this, ., maxspeed, ), ;,   , steer, ., sub, (, this, ., velocity, ), ;,   , steer, ., limit, (, this, ., maxforce, ), ;, }, return, steer, ;, }, \n// Alignment\n, \n// For every nearby boid in the system, calculate the average velocity\n, Boid, ., prototype, ., align, =,  , function, (, boids, ), {, let, neighbordist, =, 50, ;, let, sum, =, createVector, (, 0, ,, 0, ), ;, let, count, =, 0, ;, for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   , if, ((, d, >, 0, ), &&, (, d, <, neighbordist, )), {,   ,   , sum, ., add, (, boids, [, i, ], ., velocity, ), ;,   ,   , count, ++, ;,   , }, }, if, (, count, >, 0, ), {,   , sum, ., div, (, count, ), ;,   , sum, ., normalize, (, ), ;,   , sum, ., mult, (, this, ., maxspeed, ), ;,   , let, steer, =, p5, ., Vector, ., sub, (, sum, ,, this, ., velocity, ), ;,   , steer, ., limit, (, this, ., maxforce, ), ;,   , return, steer, ;, }, else, {,   , return, createVector, (, 0, ,, 0, ), ;, }, }, \n// Cohesion\n, \n// For the average location (i.e. center) of all nearby boids, calculate steering vector towards that location\n, Boid, ., prototype, ., cohesion, =,  , function, (, boids, ), {, let, neighbordist, =, 50, ;, let, sum, =, createVector, (, 0, ,, 0, ), ;, \n// Start with empty vector to accumulate all locations\n, let, count, =, 0, ;, for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   , if, ((, d, >, 0, ), &&, (, d, <, neighbordist, )), {,   ,   , sum, ., add, (, boids, [, i, ], ., position, ), ;, \n// Add location\n,   ,   , count, ++, ;,   , }, }, if, (, count, >, 0, ), {,   , sum, ., div, (, count, ), ;,   , return, this, ., seek, (, sum, ), ;, \n// Steer towards the location\n, }, else, {,   , return, createVector, (, 0, ,, 0, ), ;, }, }"
    }, {
        "name": "Wolfram CA",
        "description": "Simple demonstration of a Wolfram 1-dimensional cellular automata (natureofcode.com)",
        "code": " let, w, =, 10, ;, \n// An array of 0s and 1s\n, let, cells, ;, \n// We arbitrarily start with just the middle cell having a state of \"1\"\n, let, generation, =, 0, ;, \n// An array to store the ruleset, for example {0,1,1,0,1,1,0,1}\n, let, ruleset, =, [, 0, ,, 1, ,, 0, ,, 1, ,, 1, ,, 0, ,, 1, ,, 0, ], ;, function, setup, (, ), {, createCanvas, (, 640, ,, 400, ), ;, cells, =, Array, (, floor, (, width, /, w, )), ;, for, (, let, i, =, 0, ;, i, <, cells, ., length, ;, i, ++, ), {,   , cells, [, i, ], =, 0, ;, }, cells, [, cells, ., length, /, 2, ], =, 1, ;, }, function, draw, (, ), {, for, (, let, i, =, 0, ;, i, <, cells, ., length, ;, i, ++, ), {,   , if, (, cells, [, i, ], ===, 1, ), {,   ,   , fill, (, 200, ), ;,   , }, else, {,   ,   , fill, (, 51, ), ;,   ,   , noStroke, (, ), ;,   ,   , rect, (, i, *, w, ,, generation, *, w, ,, w, ,, w, ), ;,   , }, }, if, (, generation, <, height, /, w, ), {,   , generate, (, ), ;, }, }, \n// The process of creating the new generation\n, function, generate, (, ), {, \n// First we create an empty array for the new values\n, let, nextgen, =, Array, (, cells, ., length, ), ;, \n// For every spot, determine new state by examing current state, and neighbor states\n, \n// Ignore edges that only have one neighor\n, for, (, let, i, =, 1, ;, i, <, cells, ., length, -1, ;, i, ++, ), {,   , let, left, =, cells, [, i, -1, ], ;, \n// Left neighbor state\n,   , let, me, =, cells, [, i, ], ;, \n// Current state\n,   , let, right, =, cells, [, i, +1, ], ;, \n// Right neighbor state\n,   , nextgen, [, i, ], =, rules, (, left, ,, me, ,, right, ), ;, \n// Compute next generation state based on ruleset\n, }, \n// The current generation is the new generation\n, cells, =, nextgen, ;, generation, ++, ;, }, \n// Implementing the Wolfram rules\n, \n// Could be improved and made more concise, but here we can explicitly see what is going on for each case\n, function, rules, (, a, , , b, , , c, ), {, if, (, a, ==, 1, &&, b, ==, 1, &&, c, ==, 1, ), return, ruleset, [, 0, ], ;, if, (, a, ==, 1, &&, b, ==, 1, &&, c, ==, 0, ), return, ruleset, [, 1, ], ;, if, (, a, ==, 1, &&, b, ==, 0, &&, c, ==, 1, ), return, ruleset, [, 2, ], ;, if, (, a, ==, 1, &&, b, ==, 0, &&, c, ==, 0, ), return, ruleset, [, 3, ], ;, if, (, a, ==, 0, &&, b, ==, 1, &&, c, ==, 1, ), return, ruleset, [, 4, ], ;, if, (, a, ==, 0, &&, b, ==, 1, &&, c, ==, 0, ), return, ruleset, [, 5, ], ;, if, (, a, ==, 0, &&, b, ==, 0, &&, c, ==, 1, ), return, ruleset, [, 6, ], ;, if, (, a, ==, 0, &&, b, ==, 0, &&, c, ==, 0, ), return, ruleset, [, 7, ], ;, return, 0, ;, }"
    }, {
        "name": "Game of Life",
        "description": "A basic implementation of John Conway's Game of Life CA (natureofcode.com)",
        "code": " let, w, ;, let, columns, ;, let, rows, ;, let, board, ;, let, next, ;, function, setup, (, ), {, \n// Set simulation framerate to 10 to avoid flickering\n, frameRate, (, 10, ), ;, createCanvas, (, 720, ,, 400, ), ;, w, =, 20, ;, \n// Calculate columns and rows\n, columns, =, floor, (, width, /, w, ), ;, rows, =, floor, (, height, /, w, ), ;, \n// Wacky way to make a 2D array is JS\n, board, =, new, Array, (, columns, ), ;, for, (, let, i, =, 0, ;, i, <, columns, ;, i, ++, ), {,   , board, [, i, ], =, new, Array, (, rows, ), ;, }, \n// Going to use multiple 2D arrays and swap them\n, next, =, new, Array, (, columns, ), ;, for, (, i, =, 0, ;, i, <, columns, ;, i, ++, ), {,   , next, [, i, ], =, new, Array, (, rows, ), ;, }, init, (, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, generate, (, ), ;, for, (, let, i, =, 0, ;, i, <, columns, ;, i, ++, ), {,   , for, (, let, j, =, 0, ;, j, <, rows, ;, j, ++, ), {,   ,   , if, ((, board, [, i, ], [, j, ], ==, 1, )), fill, (, 0, ), ;,   ,   , else, fill, (, 255, ), ;,   ,   , stroke, (, 0, ), ;,   ,   , rect, (, i, *, w, ,, j, *, w, ,, w, -1, ,, w, -1, ), ;,   , }, }, }, \n// reset board when mouse is pressed\n, function, mousePressed, (, ), {, init, (, ), ;, }, \n// Fill board randomly\n, function, init, (, ), {, for, (, let, i, =, 0, ;, i, <, columns, ;, i, ++, ), {,   , for, (, let, j, =, 0, ;, j, <, rows, ;, j, ++, ), {,   ,   , \n// Lining the edges with 0s\n,   ,   , if, (, i, ==, 0, ||, j, ==, 0, ||, i, ==, columns, -1, ||, j, ==, rows, -1, ), board, [, i, ], [, j, ], =, 0, ;,   ,   , \n// Filling the rest randomly\n,   ,   , else, board, [, i, ], [, j, ], =, floor, (, random, (, 2, )), ;,   ,   , next, [, i, ], [, j, ], =, 0, ;,   , }, }, }, \n// The process of creating the new generation\n, function, generate, (, ), {, \n// Loop through every spot in our 2D array and check spots neighbors\n, for, (, let, x, =, 1, ;, x, <, columns, -, 1, ;, x, ++, ), {,   , for, (, let, y, =, 1, ;, y, <, rows, -, 1, ;, y, ++, ), {,   ,   , \n// Add up all the states in a 3x3 surrounding grid\n,   ,   , let, neighbors, =, 0, ;,   ,   , for, (, let, i, =, -1, ;, i, <=, 1, ;, i, ++, ), {,   ,   ,   , for, (, let, j, =, -1, ;, j, <=, 1, ;, j, ++, ), {,   ,   ,   ,   , neighbors, +=, board, [, x, +, i, ], [, y, +, j, ], ;,   ,   ,   , },   ,   , },   ,   , \n// A little trick to subtract the current cell's state since\n,   ,   , \n// we added it in the above loop\n,   ,   , neighbors, -=, board, [, x, ], [, y, ], ;,   ,   , \n// Rules of Life\n,   ,   , if, ((, board, [, x, ], [, y, ], ==, 1, ), &&, (, neighbors, <, 2, )), next, [, x, ], [, y, ], =, 0, ;, \n// Loneliness\n,   ,   , else, if, ((, board, [, x, ], [, y, ], ==, 1, ), &&, (, neighbors, >, 3, )), next, [, x, ], [, y, ], =, 0, ;, \n// Overpopulation\n,   ,   , else, if, ((, board, [, x, ], [, y, ], ==, 0, ), &&, (, neighbors, ==, 3, )), next, [, x, ], [, y, ], =, 1, ;, \n// Reproduction\n,   ,   , else, next, [, x, ], [, y, ], =, board, [, x, ], [, y, ], ;, \n// Stasis\n,   , }, }, \n// Swap!\n, let, temp, =, board, ;, board, =, next, ;, next, =, temp, ;, }"
    }, {
        "name": "Multiple Particle Systems",
        "description": "Click the mouse to generate a burst of particles at mouse location.\nEach burst is one instance of a particle system with Particles and CrazyParticles (a subclass of Particle).\nNote use of Inheritance and Polymorphism here.\nOriginal by Daniel Shiffman.",
        "code": ""
    }, {
        "name": "Spirograph",
        "description": "This sketch uses simple transformations to create a Spirograph-like effect with interlocking circles (called sines). Press the spacebar to switch between tracing and showing the underlying geometry.\nExample created by R. Luke DuBois.\nhttp://en.wikipedia.org/wiki/Spirograph",
        "code": " let, NUMSINES, =, 20, ;, \n// how many of these things can we do at once?\n, let, sines, =, new, Array, (, NUMSINES, ), ;, \n// an array to hold all the current angles\n, let, rad, ;, \n// an initial radius value for the central sine\n, let, i, ;, \n// a counter variable\n, \n// play with these to get a sense of what's going on:\n, let, fund, =, 0.005, ;, \n// the speed of the central sine\n, let, ratio, =, 1, ;, \n// what multiplier for speed is each additional sine?\n, let, alpha, =, 50, ;, \n// how opaque is the tracing system\n, let, trace, =, false, ;, \n// are we tracing?\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, rad, =, height, /, 4, ;, \n// compute radius for central circle\n, background, (, 204, ), ;, \n// clear the screen\n, for, (, let, i, =, 0, ;, i, <, sines, ., length, ;, i, ++, ), {,   , sines, [, i, ], =, PI, ;, \n// start EVERYBODY facing NORTH\n, }, }, function, draw, (, ), {, if, (, !, trace, ), {,   , background, (, 204, ), ;, \n// clear screen if showing geometry\n,   , stroke, (, 0, ,, 255, ), ;, \n// black pen\n,   , noFill, (, ), ;, \n// don't fill\n, }, \n// MAIN ACTION\n, push, (, ), ;, \n// start a transformation matrix\n, translate, (, width, /, 2, ,, height, /, 2, ), ;, \n// move to middle of screen\n, for, (, let, i, =, 0, ;, i, <, sines, ., length, ;, i, ++, ), {,   , let, erad, =, 0, ;, \n// radius for small \"point\" within circle... this is the 'pen' when tracing\n,   , \n// setup for tracing\n,   , if, (, trace, ), {,   ,   , stroke, (, 0, ,, 0, ,, 255, *, (, float, (, i, ), /, sines, ., length, ), ,, alpha, ), ;, \n// blue\n,   ,   , fill, (, 0, ,, 0, ,, 255, ,, alpha, /, 2, ), ;, \n// also, um, blue\n,   ,   , erad, =, 5.0, *, (, 1.0, -, float, (, i, ), /, sines, ., length, ), ;, \n// pen width will be related to which sine\n,   , },   , let, radius, =, rad, /, (, i, +, 1, ), ;, \n// radius for circle itself\n,   , rotate, (, sines, [, i, ]), ;, \n// rotate circle\n,   , if, (, !, trace, ), ellipse, (, 0, ,, 0, ,, radius, *, 2, ,, radius, *, 2, ), ;, \n// if we're simulating, draw the sine\n,   , push, (, ), ;, \n// go up one level\n,   , translate, (, 0, ,, radius, ), ;, \n// move to sine edge\n,   , if, (, !, trace, ), ellipse, (, 0, ,, 0, ,, 5, ,, 5, ), ;, \n// draw a little circle\n,   , if, (, trace, ), ellipse, (, 0, ,, 0, ,, erad, ,, erad, ), ;, \n// draw with erad if tracing\n,   , pop, (, ), ;, \n// go down one level\n,   , translate, (, 0, ,, radius, ), ;, \n// move into position for next sine\n,   , sines, [, i, ], =, (, sines, [, i, ], +, (, fund, +, (, fund, *, i, *, ratio, ))), %, TWO_PI, ;, \n// update angle based on fundamental\n, }, pop, (, ), ;, \n// pop down final transformation\n, }, function, keyReleased, (, ), {, if, (, key, ==, ' ', ), {,   , trace, =, !, trace, ;,   , background, (, 255, ), ;, }, }"
    }, {
        "name": "L-Systems",
        "description": "This sketch creates an automated drawing based on a Lindenmayer or (L-) system. L-systems are often used in procedural graphics to make natural, geometric, or interesting \"fractal-style\" patterns.\nExample created by R. Luke DuBois.\nhttps://en.wikipedia.org/wiki/L-system",
        "code": " \n// TURTLE STUFF:\n, let, x, ,, y, ;, \n// the current position of the turtle\n, let, currentangle, =, 0, ;, \n// which way the turtle is pointing\n, let, step, =, 20, ;, \n// how much the turtle moves with each 'F'\n, let, angle, =, 90, ;, \n// how much the turtle turns with a '-' or '+'\n, \n// LINDENMAYER STUFF (L-SYSTEMS)\n, let, thestring, =, 'A', ;, \n// \"axiom\" or start of the string\n, let, numloops, =, 5, ;, \n// how many iterations to pre-compute\n, let, therules, =, [, ], ;, \n// array for rules\n, therules, [, 0, ], =, [, 'A', ,, '-BF+AFA+FB-', ], ;, \n// first rule\n, therules, [, 1, ], =, [, 'B', ,, '+AF-BFB-FA+', ], ;, \n// second rule\n, let, whereinstring, =, 0, ;, \n// where in the L-system are we?\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 255, ), ;, stroke, (, 0, ,, 0, ,, 0, ,, 255, ), ;, \n// start the x and y position at lower-left corner\n, x, =, 0, ;, y, =, height, -1, ;, \n// COMPUTE THE L-SYSTEM\n, for, (, let, i, =, 0, ;, i, <, numloops, ;, i, ++, ), {,   , thestring, =, lindenmayer, (, thestring, ), ;, }, }, function, draw, (, ), {, \n// draw the current character in the string:\n, drawIt, (, thestring, [, whereinstring, ]), ;, \n// increment the point for where we're reading the string.\n, \n// wrap around at the end.\n, whereinstring, ++, ;, if, (, whereinstring, >, thestring, ., length, -1, ), whereinstring, =, 0, ;, }, \n// interpret an L-system\n, function, lindenmayer, (, s, ), {, let, outputstring, =, '', ;, \n// start a blank output string\n, \n// iterate through 'therules' looking for symbol matches:\n, for, (, let, i, =, 0, ;, i, <, s, ., length, ;, i, ++, ), {,   , let, ismatch, =, 0, ;, \n// by default, no match\n,   , for, (, let, j, =, 0, ;, j, <, therules, ., length, ;, j, ++, ), {,   ,   , if, (, s, [, i, ], ==, therules, [, j, ], [, 0, ]), {,   ,   ,   , outputstring, +=, therules, [, j, ], [, 1, ], ;, \n// write substitution\n,   ,   ,   , ismatch, =, 1, ;, \n// we have a match, so don't copy over symbol\n,   ,   ,   , break, ;, \n// get outta this for() loop\n,   ,   , },   , },   , \n// if nothing matches, just copy the symbol over.\n,   , if, (, ismatch, ==, 0, ), outputstring, +=, s, [, i, ], ;, }, return, outputstring, ;, \n// send out the modified string\n, }, \n// this is a custom function that draws turtle commands\n, function, drawIt, (, k, ), {, if, (, k, ==, 'F', ), {, \n// draw forward\n,   , \n// polar to cartesian based on step and currentangle:\n,   , let, x1, =, x, +, step, *, cos, (, radians, (, currentangle, )), ;,   , let, y1, =, y, +, step, *, sin, (, radians, (, currentangle, )), ;,   , line, (, x, ,, y, ,, x1, ,, y1, ), ;, \n// connect the old and the new\n,   , \n// update the turtle's position:\n,   , x, =, x1, ;,   , y, =, y1, ;, }, else, if, (, k, ==, '+', ), {,   , currentangle, +=, angle, ;, \n// turn left\n, }, else, if, (, k, ==, '-', ), {,   , currentangle, -=, angle, ;, \n// turn right\n, }, \n// give me some random color values:\n, let, r, =, random, (, 128, ,, 255, ), ;, let, g, =, random, (, 0, ,, 192, ), ;, let, b, =, random, (, 0, ,, 50, ), ;, let, a, =, random, (, 50, ,, 100, ), ;, \n// pick a gaussian (D&D) distribution for the radius:\n, let, radius, =, 0, ;, radius, +=, random, (, 0, ,, 15, ), ;, radius, +=, random, (, 0, ,, 15, ), ;, radius, +=, random, (, 0, ,, 15, ), ;, radius, =, radius, /, 3, ;, \n// draw the stuff:\n, fill, (, r, ,, g, ,, b, ,, a, ), ;, ellipse, (, x, ,, y, ,, radius, ,, radius, ), ;, }"
    }, {
        "name": "Spring",
        "description": "Click, drag, and release the horizontal bar to start the spring.",
        "code": " \n// Spring drawing constants for top bar\n, let, springHeight, =, 32, ,,   , left, ,,   , right, ,,   , maxHeight, =, 200, ,,   , minHeight, =, 100, ,,   , over, =, false, ,,   , move, =, false, ;, \n// Spring simulation constants\n, let, M, =, 0.8, ,, \n// Mass\n,   , K, =, 0.2, ,, \n// Spring constant\n,   , D, =, 0.92, ,, \n// Damping\n,   , R, =, 150, ;, \n// Rest position\n, \n// Spring simulation variables\n, let, ps, =, R, ,, \n// Position\n,   , vs, =, 0.0, ,, \n// Velocity\n,   , as, =, 0, ,, \n// Acceleration\n,   , f, =, 0, ;, \n// Force\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, rectMode, (, CORNERS, ), ;, noStroke, (, ), ;, left, =, width, /, 2, -, 100, ;, right, =, width, /, 2, +, 100, ;, }, function, draw, (, ), {, background, (, 102, ), ;, updateSpring, (, ), ;, drawSpring, (, ), ;, }, function, drawSpring, (, ), {, \n// Draw base\n, fill, (, 0.2, ), ;, let, baseWidth, =, 0.5, *, ps, +, -8, ;, rect, (, width, /, 2, -, baseWidth, ,, ps, +, springHeight, ,, width, /, 2, +, baseWidth, ,, height, ), ;, \n// Set color and draw top bar\n, if, (, over, ||, move, ), {,   , fill, (, 255, ), ;, }, else, {,   , fill, (, 204, ), ;, }, rect, (, left, ,, ps, ,, right, ,, ps, +, springHeight, ), ;, }, function, updateSpring, (, ), {, \n// Update the spring position\n, if, (, !, move, ), {,   , f, =, -, K, *, (, ps, -, R, ), ;, \n// f=-ky\n,   , as, =, f, /, M, ;, \n// Set the acceleration, f=ma == a=f/m\n,   , vs, =, D, *, (, vs, +, as, ), ;, \n// Set the velocity\n,   , ps, =, ps, +, vs, ;, \n// Updated position\n, }, if, (, abs, (, vs, ), <, 0.1, ), {,   , vs, =, 0.0, ;, }, \n// Test if mouse if over the top bar\n, if, (, mouseX, >, left, &&, mouseX, <, right, &&, mouseY, >, ps, &&, mouseY, <, ps, +, springHeight, ), {,   , over, =, true, ;, }, else, {,   , over, =, false, ;, }, \n// Set and constrain the position of top bar\n, if, (, move, ), {,   , ps, =, mouseY, -, springHeight, /, 2, ;,   , ps, =, constrain, (, ps, ,, minHeight, ,, maxHeight, ), ;, }, }, function, mousePressed, (, ), {, if, (, over, ), {,   , move, =, true, ;, }, }, function, mouseReleased, (, ), {, move, =, false, ;, }"
    }, {
        "name": "Springs",
        "description": "Move the mouse over one of the circles and click to re-position. When you release the mouse, it will snap back into position. Each circle has a slightly different behavior.\n\nThis example is ported from the Processing website",
        "code": " let, num, =, 3, ;, let, springs, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noStroke, (, ), ;, springs, [, 0, ], =, new, Spring, (, 240, ,, 260, ,, 40, ,, 0.98, ,, 8.0, ,, 0.1, ,, springs, ,, 0, ), ;, springs, [, 1, ], =, new, Spring, (, 320, ,, 210, ,, 120, ,, 0.95, ,, 9.0, ,, 0.1, ,, springs, ,, 1, ), ;, springs, [, 2, ], =, new, Spring, (, 180, ,, 170, ,, 200, ,, 0.90, ,, 9.9, ,, 0.1, ,, springs, ,, 2, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , springs, [, i, ], ., update, (, ), ;,   , springs, [, i, ], ., display, (, ), ;, }, }, function, mousePressed, (, ), {, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , springs, [, i, ], ., pressed, (, ), ;, }, }, function, mouseReleased, (, ), {, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , springs, [, i, ], ., released, (, ), ;, }, }, \n// Spring class\n, function, Spring, (, _x, , , _y, , , _s, , , _d, , , _m, , , _k_in, , , _others, , , _id, ), {, \n// Screen values\n, \n// this.xpos = _x;\n, \n// this.ypos = _y;\n, this, ., x_pos, =, _x, ;, this, ., y_pos, =, _y, ;, this, ., size, =, 20, ;, this, ., size, =, _s, ;, this, ., over, =, false, ;, this, ., move, =, false, ;, \n// Spring simulation constants\n, this, ., mass, =, _m, ;, \n// Mass\n, this, ., k, =, 0.2, ;, \n// Spring constant\n, this, ., k, =, _k_in, ;, this, ., damp, =, _d, ;, \n// Damping\n, this, ., rest_posx, =, _x, ;, \n// Rest position X\n, this, ., rest_posy, =, _y, ;, \n// Rest position Y\n, \n// Spring simulation variables\n, \n//float pos = 20.0;   // Position\n, this, ., velx, =, 0.0, ;, \n// X Velocity\n, this, ., vely, =, 0.0, ;, \n// Y Velocity\n, this, ., accel, =, 0, ;, \n// Acceleration\n, this, ., force, =, 0, ;, \n// Force\n, this, ., friends, =, _others, ;, this, ., id, =, _id, ;, this, ., update, =, function, (, ), {,   , if, (, this, ., move, ), {,   ,   , this, ., rest_posy, =, mouseY, ;,   ,   , this, ., rest_posx, =, mouseX, ;,   , },   , this, ., force, =, -, this, ., k, *, (, this, ., y_pos, -, this, ., rest_posy, ), ;, \n// f=-ky\n,   , this, ., accel, =, this, ., force, /, this, ., mass, ;, \n// Set the acceleration, f=ma == a=f/m\n,   , this, ., vely, =, this, ., damp, *, (, this, ., vely, +, this, ., accel, ), ;, \n// Set the velocity\n,   , this, ., y_pos, =, this, ., y_pos, +, this, ., vely, ;, \n// Updated position\n,   , this, ., force, =, -, this, ., k, *, (, this, ., x_pos, -, this, ., rest_posx, ), ;, \n// f=-ky\n,   , this, ., accel, =, this, ., force, /, this, ., mass, ;, \n// Set the acceleration, f=ma == a=f/m\n,   , this, ., velx, =, this, ., damp, *, (, this, ., velx, +, this, ., accel, ), ;, \n// Set the velocity\n,   , this, ., x_pos, =, this, ., x_pos, +, this, ., velx, ;, \n// Updated position\n,   , if, ((, this, ., overEvent, (, ), ||, this, ., move, ), &&, !, (, this, ., otherOver, (, )), ), {,   ,   , this, ., over, =, true, ;,   , }, else, {,   ,   , this, ., over, =, false, ;,   , }, }, \n// Test to see if mouse is over this spring\n, this, ., overEvent, =, function, (, ), {,   , let, disX, =, this, ., x_pos, -, mouseX, ;,   , let, disY, =, this, ., y_pos, -, mouseY, ;,   , let, dis, =, createVector, (, disX, ,, disY, ), ;,   , if, (, dis, ., mag, (, ), <, this, ., size, /, 2, ), {,   ,   , return, true, ;,   , }, else, {,   ,   , return, false, ;,   , }, }, \n// Make sure no other springs are active\n, this, ., otherOver, =, function, (, ), {,   , for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   ,   , if, (, i, !=, this, ., id, ), {,   ,   ,   , if, (, this, ., friends, [, i, ], ., over, ==, true, ), {,   ,   ,   ,   , return, true, ;,   ,   ,   , },   ,   , },   , },   , return, false, ;, }, this, ., display, =, function, (, ), {,   , if, (, this, ., over, ), {,   ,   , fill, (, 153, ), ;,   , }, else, {,   ,   , fill, (, 255, ), ;,   , },   , ellipse, (, this, ., x_pos, ,, this, ., y_pos, ,, this, ., size, ,, this, ., size, ), ;, }, this, ., pressed, =, function, (, ), {,   , if, (, this, ., over, ), {,   ,   , this, ., move, =, true, ;,   , }, else, {,   ,   , this, ., move, =, false, ;,   , }, }, this, ., released, =, function, (, ), {,   , this, ., move, =, false, ;,   , this, ., rest_posx, =, this, ., y_pos, ;,   , this, ., rest_posy, =, this, ., y_pos, ;, }, }, ;"
    }, {
        "name": "Soft Body",
        "description": "Original example by Ira Greenberg.\n\nSoftbody dynamics simulation using curveVertex() and curveTightness().",
        "code": " \n// center point\n, let, centerX, =, 0.0, ,, centerY, =, 0.0, ;, let, radius, =, 45, ,, rotAngle, =, -90, ;, let, accelX, =, 0.0, ,, accelY, =, 0.0, ;, let, deltaX, =, 0.0, ,, deltaY, =, 0.0, ;, let, springing, =, 0.0009, ,, damping, =, 0.98, ;, \n//corner nodes\n, let, nodes, =, 5, ;, \n//zero fill arrays\n, let, nodeStartX, =, [, ], ;, let, nodeStartY, =, [, ], ;, let, nodeX, =, [, ], ;, let, nodeY, =, [, ], ;, let, angle, =, [, ], ;, let, frequency, =, [, ], ;, \n// soft-body dynamics\n, let, organicConstant, =, 1.0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n//center shape in window\n, centerX, =, width, /, 2, ;, centerY, =, height, /, 2, ;, \n//initialize arrays to 0\n, for, (, let, i, =, 0, ;, i, <, nodes, ;, i, ++, ), {,   , nodeStartX, [, i, ], =, 0, ;,   , nodeStartY, [, i, ], =, 0, ;,   , nodeY, [, i, ], =, 0, ;,   , nodeY, [, i, ], =, 0, ;,   , angle, [, i, ], =, 0, ;, }, \n// iniitalize frequencies for corner nodes\n, for, (, let, i, =, 0, ;, i, <, nodes, ;, i, ++, ), {,   , frequency, [, i, ], =, random, (, 5, ,, 12, ), ;, }, noStroke, (, ), ;, frameRate, (, 30, ), ;, }, function, draw, (, ), {, \n//fade background\n, fill, (, 0, ,, 100, ), ;, rect, (, 0, ,, 0, ,, width, ,, height, ), ;, drawShape, (, ), ;, moveShape, (, ), ;, }, function, drawShape, (, ), {, \n//  calculate node  starting locations\n, for, (, let, i, =, 0, ;, i, <, nodes, ;, i, ++, ), {,   , nodeStartX, [, i, ], =, centerX, +, cos, (, radians, (, rotAngle, )), *, radius, ;,   , nodeStartY, [, i, ], =, centerY, +, sin, (, radians, (, rotAngle, )), *, radius, ;,   , rotAngle, +=, 360.0, /, nodes, ;, }, \n// draw polygon\n, curveTightness, (, organicConstant, ), ;, fill, (, 255, ), ;, beginShape, (, ), ;, for, (, let, i, =, 0, ;, i, <, nodes, ;, i, ++, ), {,   , curveVertex, (, nodeX, [, i, ], ,, nodeY, [, i, ]), ;, }, for, (, let, i, =, 0, ;, i, <, nodes, -1, ;, i, ++, ), {,   , curveVertex, (, nodeX, [, i, ], ,, nodeY, [, i, ]), ;, }, endShape, (, CLOSE, ), ;, }, function, moveShape, (, ), {, \n//move center point\n, deltaX, =, mouseX, -, centerX, ;, deltaY, =, mouseY, -, centerY, ;, \n// create springing effect\n, deltaX, *=, springing, ;, deltaY, *=, springing, ;, accelX, +=, deltaX, ;, accelY, +=, deltaY, ;, \n// move predator's center\n, centerX, +=, accelX, ;, centerY, +=, accelY, ;, \n// slow down springing\n, accelX, *=, damping, ;, accelY, *=, damping, ;, \n// change curve tightness\n, organicConstant, =, 1, -, ((, abs, (, accelX, ), +, abs, (, accelY, )), *, 0.1, ), ;, \n//move nodes\n, for, (, let, i, =, 0, ;, i, <, nodes, ;, i, ++, ), {,   , nodeX, [, i, ], =, nodeStartX, [, i, ], +, sin, (, radians, (, angle, [, i, ])), *, (, accelX, *, 2, ), ;,   , nodeY, [, i, ], =, nodeStartY, [, i, ], +, sin, (, radians, (, angle, [, i, ])), *, (, accelY, *, 2, ), ;,   , angle, [, i, ], +=, frequency, [, i, ], ;, }, }"
    }, {
        "name": "SmokeParticles",
        "description": "a port of Dan Shiffman's SmokeParticleSystem example originally for Processing. Creates smokey particles :p",
        "code": " \n// texture for the particle\n, let, particle_texture, =, null, ;, \n// variable holding our particle system\n, let, ps, =, null, ;, function, preload, (, ), {, particle_texture, =, loadImage, (, \"assets/particle_texture.png\", ), ;, }, function, setup, (, ), {, \n//set the canvas size\n, createCanvas, (, 640, ,, 360, ), ;, \n//initialize our particle system\n, ps, =, new, ParticleSystem, (, 0, ,, createVector, (, width, /, 2, ,, height, -, 60, ), ,, particle_texture, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, dx, =, map, (, mouseX, ,, 0, ,, width, ,, -0.2, ,, 0.2, ), ;, let, wind, =, createVector, (, dx, ,, 0, ), ;, ps, ., applyForce, (, wind, ), ;, ps, ., run, (, ), ;, for, (, let, i, =, 0, ;, i, <, 2, ;, i, ++, ), {,   , ps, ., addParticle, (, ), ;, }, \n// Draw an arrow representing the wind force\n, drawVector, (, wind, ,, createVector, (, width, /, 2, ,, 50, ,, 0, ), ,, 500, ), ;, }, \n/**\n, \n *  This function draws an arrow showing the direction our \"wind\" is blowing.\n, \n */\n, function, drawVector, (, v, , , loc, , , scale, ), {, push, (, ), ;, let, arrowsize, =, 4, ;, translate, (, loc, ., x, ,, loc, ., y, ), ;, stroke, (, 255, ), ;, rotate, (, v, ., heading, (, )), ;, let, len, =, v, ., mag, (, ), *, scale, ;, line, (, 0, ,, 0, ,, len, ,, 0, ), ;, line, (, len, ,, 0, ,, len, -, arrowsize, ,, +, arrowsize, /, 2, ), ;, line, (, len, ,, 0, ,, len, -, arrowsize, ,, -, arrowsize, /, 2, ), ;, pop, (, ), ;, }, \n//========= PARTICLE SYSTEM ===========\n, \n/**\n, \n * A basic particle system class\n, \n * \n, \n@param\n, \n num the number of particles\n, \n * \n, \n@param\n, \n v the origin of the particle system\n, \n * \n, \n@param\n, \n img_ a texture for each particle in the system\n, \n * \n, \n@constructor\n, \n */\n, let, ParticleSystem, =, function, (, num, , , v, , , img_, ), {, this, ., particles, =, [, ], ;, this, ., origin, =, v, ., copy, (, ), ;, \n// we make sure to copy the vector value in case we accidentally mutate the original by accident\n, this, ., img, =, img_, for, (, let, i, =, 0, ;, i, <, num, ;, ++, i, ), {,   , this, ., particles, ., push, (, new, Particle, (, this, ., origin, ,, this, ., img, )), ;, }, }, ;, \n/**\n, \n * This function runs the entire particle system.\n, \n */\n, ParticleSystem, ., prototype, ., run, =,  , function, (, ), {, \n// cache length of the array we're going to loop into a variable\n, \n// You may see <variable>.length in a for loop, from time to time but\n, \n// we cache it here because otherwise the length is re-calculated for each iteration of a loop\n, let, len, =, this, ., particles, ., length, ;, \n//loop through and run particles\n, for, (, let, i, =, len, -, 1, ;, i, >=, 0, ;, i, --, ), {,   , let, particle, =, this, ., particles, [, i, ], ;,   , particle, ., run, (, ), ;,   , \n// if the particle is dead, we remove it.\n,   , \n// javascript arrays don't have a \"remove\" function but \"splice\" works just as well.\n,   , \n// we feed it an index to start at, then how many numbers from that point to remove.\n,   , if, (, particle, ., isDead, (, )), {,   ,   , this, ., particles, ., splice, (, i, ,, 1, ), ;,   , }, }, }, \n/**\n, \n * Method to add a force vector to all particles currently in the system\n, \n * \n, \n@param\n, \n dir a p5.Vector describing the direction of the force.\n, \n */\n, ParticleSystem, ., prototype, ., applyForce, =,  , function, (, dir, ), {, let, len, =, this, ., particles, ., length, ;, for, (, let, i, =, 0, ;, i, <, len, ;, ++, i, ), {,   , this, ., particles, [, i, ], ., applyForce, (, dir, ), ;, }, }, \n/**\n, \n * Adds a new particle to the system at the origin of the system and with\n, \n * the originally set texture.\n, \n */\n, ParticleSystem, ., prototype, ., addParticle, =,  , function, (, ), {,   , this, ., particles, ., push, (, new, Particle, (, this, ., origin, ,, this, ., img, )), ;, }, \n//========= PARTICLE  ===========\n, \n/**\n, \n *  A simple Particle class, renders the particle as an image\n, \n */\n, let, Particle, =, function, (, pos, , , img_, ), {, this, ., loc, =, pos, ., copy, (, ), ;, let, vx, =, randomGaussian, (, ), *, 0.3, ;, let, vy, =, randomGaussian, (, ), *, 0.3, -, 1.0, ;, this, ., vel, =, createVector, (, vx, ,, vy, ), ;, this, ., acc, =, createVector, (, ), ;, this, ., lifespan, =, 100.0, ;, this, ., texture, =, img_, ;, }, \n/**\n, \n *  Simulataneously updates and displays a particle.\n, \n */\n, Particle, ., prototype, ., run, =,  , function, (, ), {, this, ., update, (, ), ;, this, ., render, (, ), ;, }, \n/**\n, \n *  A function to display a particle\n, \n */\n, Particle, ., prototype, ., render, =,  , function, (, ), {, imageMode, (, CENTER, ), ;, tint, (, 255, ,, this, ., lifespan, ), ;, image, (, this, ., texture, ,, this, ., loc, ., x, ,, this, ., loc, ., y, ), ;, }, \n/**\n, \n *  A method to apply a force vector to a particle.\n, \n */\n, Particle, ., prototype, ., applyForce, =,  , function, (, f, ), {, this, ., acc, ., add, (, f, ), ;, }, \n/**\n, \n *  This method checks to see if the particle has reached the end of it's lifespan,\n, \n *  if it has, return true, otherwise return false.\n, \n */\n, Particle, ., prototype, ., isDead, =,  , function,  , (, ), {, if, (, this, ., lifespan, <=, 0.0, ), {,   , return, true, ;, }, else, {,   ,   , return, false, ;,   , }, }, \n/**\n, \n *  This method updates the position of the particle.\n, \n */\n, Particle, ., prototype, ., update, =,  , function, (, ), {, this, ., vel, ., add, (, this, ., acc, ), ;, this, ., loc, ., add, (, this, ., vel, ), ;, this, ., lifespan, -=, 2.5, ;, this, ., acc, ., mult, (, 0, ), ;, }"
    }, {
        "name": "Brownian Motion",
        "description": "Recording random movement as a continuous line. Port of original example from the Processing examples page.",
        "code": " let, num, =, 2000, ;, let, range, =, 6, ;, let, ax, =, [, ], ;, let, ay, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, for, (, let, i, =, 0, ;, i, <, num, ;, i, ++, ), {,   , ax, [, i, ], =, width, /, 2, ;,   , ay, [, i, ], =, height, /, 2, ;, }, frameRate, (, 30, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, \n// Shift all elements 1 place to the left\n, for, (, let, i, =, 1, ;, i, <, num, ;, i, ++, ), {,   , ax, [, i, -, 1, ], =, ax, [, i, ], ;,   , ay, [, i, -, 1, ], =, ay, [, i, ], ;, }, \n// Put a new value at the end of the array\n, ax, [, num, -, 1, ], +=, random, (, -, range, ,, range, ), ;, ay, [, num, -, 1, ], +=, random, (, -, range, ,, range, ), ;, \n// Constrain all points to the screen\n, ax, [, num, -, 1, ], =, constrain, (, ax, [, num, -, 1, ], ,, 0, ,, width, ), ;, ay, [, num, -, 1, ], =, constrain, (, ay, [, num, -, 1, ], ,, 0, ,, height, ), ;, \n// Draw a line connecting the points\n, for, (, let, j, =, 1, ;, j, <, num, ;, j, ++, ), {,   , let, val, =, j, /, num, *, 204.0, +, 51, ;,   , stroke, (, val, ), ;,   , line, (, ax, [, j, -, 1, ], ,, ay, [, j, -, 1, ], ,, ax, [, j, ], ,, ay, [, j, ]), ;, }, }"
    }, {
        "name": "Chain",
        "description": "One mass is attached to the mouse position and the other is attached the position of the other mass. The gravity in the environment pulls down on both.\n\nThis example is ported from the Processing website",
        "code": " let, s1, ,, s2, ;, let, gravity, =, 9.0, ;, let, mass, =, 2.0, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, fill, (, 255, ,, 126, ), ;, \n// Inputs: x, y, mass, gravity\n, s1, =, new, Spring2D, (, 0.0, ,, width, /, 2, ,, mass, ,, gravity, ), ;, s2, =, new, Spring2D, (, 0.0, ,, width, /, 2, ,, mass, ,, gravity, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, s1, ., update, (, mouseX, ,, mouseY, ), ;, s1, ., display, (, mouseX, ,, mouseY, ), ;, s2, ., update, (, s1, ., x, ,, s1, ., y, ), ;, s2, ., display, (, s1, ., x, ,, s1, ., y, ), ;, }, function, Spring2D, (, xpos, , , ypos, , , m, , , g, ), {, this, ., x, =, xpos, ;, \n// The x- and y-coordinates\n, this, ., y, =, ypos, ;, this, ., vx, =, 0, ;, \n// The x- and y-axis velocities\n, this, ., vy, =, 0, ;, this, ., mass, =, m, ;, this, ., gravity, =, g, ;, this, ., radius, =, 30, ;, this, ., stiffness, =, 0.2, ;, this, ., damping, =, 0.7, ;, this, ., update, =, function, (, targetX, , , targetY, ), {,   , let, forceX, =, (, targetX, -, this, ., x, ), *, this, ., stiffness, ;,   , let, ax, =, forceX, /, this, ., mass, ;,   , this, ., vx, =, this, ., damping, *, (, this, ., vx, +, ax, ), ;,   , this, ., x, +=, this, ., vx, ;,   , let, forceY, =, (, targetY, -, this, ., y, ), *, this, ., stiffness, ;,   , forceY, +=, this, ., gravity, ;,   , let, ay, =, forceY, /, this, ., mass, ;,   , this, ., vy, =, this, ., damping, *, (, this, ., vy, +, ay, ), ;,   , this, ., y, +=, this, ., vy, ;, }, this, ., display, =, function, (, nx, , , ny, ), {,   , noStroke, (, ), ;,   , ellipse, (, this, ., x, ,, this, ., y, ,, this, ., radius, *, 2, ,, this, ., radius, *, 2, ), ;,   , stroke, (, 255, ), ;,   , line, (, this, ., x, ,, this, ., y, ,, nx, ,, ny, ), ;, }, }"
    }, {
        "name": "Snowflakes",
        "description": "Particle system simulating the motion of falling snowflakes. Uses an array of objects to hold the snowflake particles. Contributed by Aatish Bhatia.",
        "code": " let, snowflakes, =, [, ], ;, \n// array to hold snowflake objects\n, function, setup, (, ), {, createCanvas, (, 400, ,, 600, ), ;, fill, (, 240, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 'brown', ), ;, let, t, =, frameCount, /, 60, ;, \n// update time\n, \n// create a random number of snowflakes each frame\n, for, (, let, i, =, 0, ;, i, <, random, (, 5, ), ;, i, ++, ), {,   , snowflakes, ., push, (, new, snowflake, (, )), ;, \n// append snowflake object\n, }, \n// loop through snowflakes with a for..of loop\n, for, (, let, flake, of, snowflakes, ), {,   , flake, ., update, (, t, ), ;, \n// update snowflake position\n,   , flake, ., display, (, ), ;, \n// draw snowflake\n, }, }, \n// snowflake class\n, function, snowflake, (, ), {, \n// initialize coordinates\n, this, ., posX, =, 0, ;, this, ., posY, =, random, (, -50, ,, 0, ), ;, this, ., initialangle, =, random, (, 0, ,, 2, *, PI, ), ;, this, ., size, =, random, (, 2, ,, 5, ), ;, \n// radius of snowflake spiral\n, \n// chosen so the snowflakes are uniformly spread out in area\n, this, ., radius, =, sqrt, (, random, (, pow, (, width, /, 2, ,, 2, ))), ;, this, ., update, =, function, (, time, ), {,   , \n// x position follows a circle\n,   , let, w, =, 0.6, ;, \n// angular speed\n,   , let, angle, =, w, *, time, +, this, ., initialangle, ;,   , this, ., posX, =, width, /, 2, +, this, ., radius, *, sin, (, angle, ), ;,   , \n// different size snowflakes fall at slightly different y speeds\n,   , this, ., posY, +=, pow, (, this, ., size, ,, 0.5, ), ;,   , \n// delete snowflake if past end of screen\n,   , if, (, this, ., posY, >, height, ), {,   ,   , let, index, =, snowflakes, ., indexOf, (, this, ), ;,   ,   , snowflakes, ., splice, (, index, ,, 1, ), ;,   , }, }, ;, this, ., display, =, function, (, ), {,   , ellipse, (, this, ., posX, ,, this, ., posY, ,, this, ., size, ), ;, }, ;, }"
    }, {
        "name": "Penrose Tiles",
        "description": "This is a port by David Blitz of the \"Penrose Tile\" example from processing.org/examples",
        "code": " let, ds, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, ds, =, new, PenroseLSystem, (, ), ;, \n//please, play around with the following line\n, ds, ., simulate, (, 5, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, ds, ., render, (, ), ;, }, function, PenroseLSystem, (, ), {,   , this, ., steps, =, 0, ;,   , \n//these are axiom and rules for the penrose rhombus l-system\n,   , \n//a reference would be cool, but I couldn't find a good one\n,   , this, ., axiom, =, \"[X]++[X]++[X]++[X]++[X]\", ;,   , this, ., ruleW, =, \"YF++ZF----XF[-YF----WF]++\", ;,   , this, ., ruleX, =, \"+YF--ZF[---WF--XF]+\", ;,   , this, ., ruleY, =, \"-WF++XF[+++YF++ZF]-\", ;,   , this, ., ruleZ, =, \"--YF++++WF[+ZF++++XF]--XF\", ;,   , \n//please play around with the following two lines\n,   , this, ., startLength, =, 460.0, ;,   , this, ., theta, =, TWO_PI, /, 10.0, ;, \n//36 degrees, try TWO_PI / 6.0, ...\n,   , this, ., reset, (, ), ;, }, PenroseLSystem, ., prototype, ., simulate, =,  , function,  , (, gen, ), {, while, (, this, ., getAge, (, ), <, gen, ), {,   , this, ., iterate, (, this, ., production, ), ;, }, }, PenroseLSystem, ., prototype, ., reset, =,  , function,  , (, ), {,   , this, ., production, =, this, ., axiom, ;,   , this, ., drawLength, =, this, ., startLength, ;,   , this, ., generations, =, 0, ;, }, PenroseLSystem, ., prototype, ., getAge, =,  , function,  , (, ), {,   , return, this, ., generations, ;, }, \n//apply substitution rules to create new iteration of production string\n, PenroseLSystem, ., prototype, ., iterate, =,  , function, (, ), {,   , let, newProduction, =, \"\", ;,   , for, (, let, i, =, 0, ;, i, <, this, ., production, ., length, ;, ++, i, ), {,   ,   , let, step, =, this, ., production, ., charAt, (, i, ), ;,   ,   , \n//if current character is 'W', replace current character\n,   ,   , \n//by corresponding rule\n,   ,   , if, (, step, ==, 'W', ), {,   ,   ,   , newProduction, =, newProduction, +, this, ., ruleW, ;,   ,   , },   ,   , else, if, (, step, ==, 'X', ), {,   ,   ,   , newProduction, =, newProduction, +, this, ., ruleX, ;,   ,   , },   ,   , else, if, (, step, ==, 'Y', ), {,   ,   ,   , newProduction, =, newProduction, +, this, ., ruleY, ;,   ,   , },   ,   , else, if, (, step, ==, 'Z', ), {,   ,   ,   , newProduction, =, newProduction, +, this, ., ruleZ, ;,   ,   , },   ,   , else, {,   ,   ,   , \n//drop all 'F' characters, don't touch other\n,   ,   ,   , \n//characters (i.e. '+', '-', '[', ']'\n,   ,   ,   , if, (, step, !=, 'F', ), {,   ,   ,   ,   , newProduction, =, newProduction, +, step, ;,   ,   ,   , },   ,   , },   , },   , this, ., drawLength, =, this, ., drawLength, *, 0.5, ;,   , this, ., generations, ++, ;,   , this, ., production, =, newProduction, ;, }, \n//convert production string to a turtle graphic\n, PenroseLSystem, ., prototype, ., render, =,  , function,  , (, ), {,   , translate, (, width, /, 2, ,, height, /, 2, ), ;,   , this, ., steps, +=, 20, ;,   , if, (, this, ., steps, >, this, ., production, ., length, ), {,   ,   , this, ., steps, =, this, ., production, ., length, ;,   , },   , for, (, let, i, =, 0, ;, i, <, this, ., steps, ;, ++, i, ), {,   ,   , let, step, =, this, ., production, ., charAt, (, i, ), ;,   ,   , \n//'W', 'X', 'Y', 'Z' symbols don't actually correspond to a turtle action\n,   ,   , if, (, step, ==, 'F', ), {,   ,   ,   , stroke, (, 255, ,, 60, ), ;,   ,   ,   , for, (, let, j, =, 0, ;, j, <, this, ., repeats, ;, j, ++, ), {,   ,   ,   ,   , line, (, 0, ,, 0, ,, 0, ,, -, this, ., drawLength, ), ;,   ,   ,   ,   , noFill, (, ), ;,   ,   ,   ,   , translate, (, 0, ,, -, this, ., drawLength, ), ;,   ,   ,   , },   ,   ,   , this, ., repeats, =, 1, ;,   ,   , },   ,   , else, if, (, step, ==, '+', ), {,   ,   ,   , rotate, (, this, ., theta, ), ;,   ,   , },   ,   , else, if, (, step, ==, '-', ), {,   ,   ,   , rotate, (, -, this, ., theta, ), ;,   ,   , },   ,   , else, if, (, step, ==, '[', ), {,   ,   ,   , push, (, ), ;,   ,   , },   ,   , else, if, (, step, ==, ']', ), {,   ,   ,   , pop, (, ), ;,   ,   , },   , }, }"
    }, {
        "name": "Recursive Tree",
        "description": "Renders a simple tree-like structure via recursion. The branching angle is calculated as a function of the horizontal mouse location. Move the mouse left and right to change the angle. Based on Daniel Shiffman's Recursive Tree Example for Processing.",
        "code": " let, theta, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, frameRate, (, 30, ), ;, stroke, (, 255, ), ;, \n// Let's pick an angle 0 to 90 degrees based on the mouse position\n, let, a, =, (, mouseX, /, width, ), *, 90, ;, \n// Convert it to radians\n, theta, =, radians, (, a, ), ;, \n// Start the tree from the bottom of the screen\n, translate, (, width, /, 2, ,, height, ), ;, \n// Draw a line 120 pixels\n, line, (, 0, ,, 0, ,, 0, ,, -120, ), ;, \n// Move to the end of that line\n, translate, (, 0, ,, -120, ), ;, \n// Start the recursive branching!\n, branch, (, 120, ), ;, }, function, branch, (, h, ), {, \n// Each branch will be 2/3rds the size of the previous one\n, h, *=, 0.66, ;, \n// All recursive functions must have an exit condition!!!!\n, \n// Here, ours is when the length of the branch is 2 pixels or less\n, if, (, h, >, 2, ), {,   , push, (, ), ;, \n// Save the current state of transformation (i.e. where are we now)\n,   , rotate, (, theta, ), ;, \n// Rotate by theta\n,   , line, (, 0, ,, 0, ,, 0, ,, -, h, ), ;, \n// Draw the branch\n,   , translate, (, 0, ,, -, h, ), ;, \n// Move to the end of the branch\n,   , branch, (, h, ), ;, \n// Ok, now call myself to draw two new branches!!\n,   , pop, (, ), ;, \n// Whenever we get back here, we \"pop\" in order to restore the previous matrix state\n,   , \n// Repeat the same thing, only branch off to the \"left\" this time!\n,   , push, (, ), ;,   , rotate, (, -, theta, ), ;,   , line, (, 0, ,, 0, ,, 0, ,, -, h, ), ;,   , translate, (, 0, ,, -, h, ), ;,   , branch, (, h, ), ;,   , pop, (, ), ;, }, }"
    }, {
        "name": "The Mandelbrot Set",
        "description": "Simple rendering of the Mandelbrot set. Based on Daniel Shiffman's Mandelbrot Example for Processing.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, pixelDensity, (, 1, ), ;, noLoop, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Establish a range of values on the complex plane\n, \n// A different range will allow us to \"zoom\" in or out on the fractal\n, \n// It all starts with the width, try higher or lower values\n, const, w, =, 4, ;, const, h, =, (, w, *, height, ), /, width, ;, \n// Start at negative half the width and height\n, const, xmin, =, -, w, /, 2, ;, const, ymin, =, -, h, /, 2, ;, \n// Make sure we can write to the pixels[] array.\n, \n// Only need to do this once since we don't do any other drawing.\n, loadPixels, (, ), ;, \n// Maximum number of iterations for each point on the complex plane\n, const, maxiterations, =, 100, ;, \n// x goes from xmin to xmax\n, const, xmax, =, xmin, +, w, ;, \n// y goes from ymin to ymax\n, const, ymax, =, ymin, +, h, ;, \n// Calculate amount we increment x,y for each pixel\n, const, dx, =, (, xmax, -, xmin, ), /, (, width, ), ;, const, dy, =, (, ymax, -, ymin, ), /, (, height, ), ;, \n// Start y\n, let, y, =, ymin, ;, for, (, let, j, =, 0, ;, j, <, height, ;, j, ++, ), {,   , \n// Start x\n,   , let, x, =, xmin, ;,   , for, (, let, i, =, 0, ;, i, <, width, ;, i, ++, ), {,   ,   , \n// Now we test, as we iterate z = z^2 + cm does z tend towards infinity?\n,   ,   , let, a, =, x, ;,   ,   , let, b, =, y, ;,   ,   , let, n, =, 0, ;,   ,   , while, (, n, <, maxiterations, ), {,   ,   ,   , const, aa, =, a, *, a, ;,   ,   ,   , const, bb, =, b, *, b, ;,   ,   ,   , const, twoab, =, 2.0, *, a, *, b, ;,   ,   ,   , a, =, aa, -, bb, +, x, ;,   ,   ,   , b, =, twoab, +, y, ;,   ,   ,   , \n// Infinty in our finite world is simple, let's just consider it 16\n,   ,   ,   , if, (, dist, (, aa, ,, bb, ,, 0, ,, 0, ), >, 16, ), {,   ,   ,   ,   , break, ;, \n// Bail\n,   ,   ,   , },   ,   ,   , n, ++, ;,   ,   , },   ,   , \n// We color each pixel based on how long it takes to get to infinity\n,   ,   , \n// If we never got there, let's pick the color black\n,   ,   , const, pix, =, (, i, +, j, *, width, ), *, 4, ;,   ,   , const, norm, =, map, (, n, ,, 0, ,, maxiterations, ,, 0, ,, 1, ), ;,   ,   , let, bright, =, map, (, sqrt, (, norm, ), ,, 0, ,, 1, ,, 0, ,, 255, ), ;,   ,   , if, (, n, ==, maxiterations, ), {,   ,   ,   , bright, =, 0, ;,   ,   , }, else, {,   ,   ,   , \n// Gosh, we could make fancy colors here if we wanted\n,   ,   ,   , pixels, [, pix, +, 0, ], =, bright, ;,   ,   ,   , pixels, [, pix, +, 1, ], =, bright, ;,   ,   ,   , pixels, [, pix, +, 2, ], =, bright, ;,   ,   ,   , pixels, [, pix, +, 3, ], =, 255, ;,   ,   , },   ,   , x, +=, dx, ;,   , },   , y, +=, dy, ;, }, updatePixels, (, ), ;, }"
    }, {
        "name": "Koch Curve",
        "description": "Renders a simple fractal, the Koch snowflake. Each recursive level is drawn in sequence. By Daniel Shiffman",
        "code": " let, k, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, frameRate, (, 1, ), ;, \n// Animate slowly\n, k, =, new, KochFractal, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Draws the snowflake!\n, k, ., render, (, ), ;, \n// Iterate\n, k, ., nextLevel, (, ), ;, \n// Let's not do it more than 5 times. . .\n, if, (, k, ., getCount, (, ), >, 5, ), {,   , k, ., restart, (, ), ;, }, }, \n// A class to describe one line segment in the fractal\n, \n// Includes methods to calculate midp5.Vectors along the line according to the Koch algorithm\n, class, KochLine, {, constructor, (, a, ,, b, ), {,   , \n// Two p5.Vectors,\n,   , \n// start is the \"left\" p5.Vector and\n,   , \n// end is the \"right p5.Vector\n,   , this, ., start, =, a, ., copy, (, ), ;,   , this, ., end, =, b, ., copy, (, ), ;, }, display, (, ), {,   , stroke, (, 255, ), ;,   , line, (, this, ., start, ., x, ,, this, ., start, ., y, ,, this, ., end, ., x, ,, this, ., end, ., y, ), ;, }, kochA, (, ), {,   , return, this, ., start, ., copy, (, ), ;, }, \n// This is easy, just 1/3 of the way\n, kochB, (, ), {,   , let, v, =, p5, ., Vector, ., sub, (, this, ., end, ,, this, ., start, ), ;,   , v, ., div, (, 3, ), ;,   , v, ., add, (, this, ., start, ), ;,   , return, v, ;, }, \n// More complicated, have to use a little trig to figure out where this p5.Vector is!\n, kochC, (, ), {,   , let, a, =, this, ., start, ., copy, (, ), ;, \n// Start at the beginning\n,   , let, v, =, p5, ., Vector, ., sub, (, this, ., end, ,, this, ., start, ), ;,   , v, ., div, (, 3, ), ;,   , a, ., add, (, v, ), ;, \n// Move to point B\n,   , v, ., rotate, (, -, PI, /, 3, ), ;, \n// Rotate 60 degrees\n,   , a, ., add, (, v, ), ;, \n// Move to point C\n,   , return, a, ;, }, \n// Easy, just 2/3 of the way\n, kochD, (, ), {,   , let, v, =, p5, ., Vector, ., sub, (, this, ., end, ,, this, ., start, ), ;,   , v, ., mult, (, 2, /, 3.0, ), ;,   , v, ., add, (, this, ., start, ), ;,   , return, v, ;, }, kochE, (, ), {,   , return, this, ., end, ., copy, (, ), ;, }, }, \n// A class to manage the list of line segments in the snowflake pattern\n, class, KochFractal, {, constructor, (, ), {,   , this, ., start, =, createVector, (, 0, ,, height, -20, ), ;, \n// A p5.Vector for the start\n,   , this, ., end, =, createVector, (, width, ,, height, -20, ), ;, \n// A p5.Vector for the end\n,   , this, ., lines, =, [, ], ;, \n// An array to keep track of all the lines\n,   , this, ., count, =, 0, ;,   , this, ., restart, (, ), ;, }, nextLevel, (, ), {,   , \n// For every line that is in the arraylist\n,   , \n// create 4 more lines in a new arraylist\n,   , this, ., lines, =, this, ., iterate, (, this, ., lines, ), ;,   , this, ., count, ++, ;, }, restart, (, ), {,   , this, ., count, =, 0, ;, \n// Reset count\n,   , this, ., lines, =, [, ], ;, \n// Empty the array list\n,   , this, ., lines, ., push, (, new, KochLine, (, this, ., start, ,, this, ., end, )), ;, \n// Add the initial line (from one end p5.Vector to the other)\n, }, getCount, (, ), {,   , return, this, ., count, ;, }, \n// This is easy, just draw all the lines\n, render, (, ), {,   , for, (, let, i, =, 0, ;, i, <, this, ., lines, ., length, ;, i, ++, ), {,   ,   , this, ., lines, [, i, ], ., display, (, ), ;,   , }, }, \n// This is where the **MAGIC** happens\n, \n// Step 1: Create an empty arraylist\n, \n// Step 2: For every line currently in the arraylist\n, \n//   - calculate 4 line segments based on Koch algorithm\n, \n//   - add all 4 line segments into the new arraylist\n, \n// Step 3: Return the new arraylist and it becomes the list of line segments for the structure\n, \n// As we do this over and over again, each line gets broken into 4 lines, which gets broken into 4 lines, and so on. . .\n, iterate, (, before, ), {,   , let, now, =, [, ], ;, \n// Create emtpy list\n,   , for, (, let, i, =, 0, ;, i, <, this, ., lines, ., length, ;, i, ++, ), {,   ,   , let, l, =, this, ., lines, [, i, ], ;,   ,   , \n// Calculate 5 koch p5.Vectors (done for us by the line object)\n,   ,   , let, a, =, l, ., kochA, (, ), ;,   ,   , let, b, =, l, ., kochB, (, ), ;,   ,   , let, c, =, l, ., kochC, (, ), ;,   ,   , let, d, =, l, ., kochD, (, ), ;,   ,   , let, e, =, l, ., kochE, (, ), ;,   ,   , \n// Make line segments between all the p5.Vectors and add them\n,   ,   , now, ., push, (, new, KochLine, (, a, ,, b, )), ;,   ,   , now, ., push, (, new, KochLine, (, b, ,, c, )), ;,   ,   , now, ., push, (, new, KochLine, (, c, ,, d, )), ;,   ,   , now, ., push, (, new, KochLine, (, d, ,, e, )), ;,   , },   , return, now, ;, }, }"
    }, {
        "name": "Bubble Sort",
        "description": "Sorts the randomly distributed bars according to their height in ascending order while simulating the whole sorting process. Took references from Coding Challenge by The Coding Train.",
        "code": " let, values, =, [, ], ;, let, i, =, 0, ;, let, j, =, 0, ;, \n// The statements in the setup() function\n, \n// execute once when the program begins\n, \n// The array is filled with random values in setup() function.\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, for, (, let, i, =, 0, ;, i, <, width, /, 8, ;, i, ++, ), {,   , values, ., push, (, random, (, height, )), ;, }, }, \n// The statements in draw() function are executed until the\n, \n// program is stopped. Each statement is executed in\n, \n// sequence and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 220, ), ;, bubbleSort, (, ), ;, simulateSorting, (, ), ;, }, \n// The bubbleSort() function sorts taking 8 elements of the array\n, \n// per frame. The algorithm behind this function is \n, \n// bubble sort.\n, function, bubbleSort, (, ), {, for, (, let, k, =, 0, ;, k, <, 8, ;, k, ++, ), {,   , if, (, i, <, values, ., length, ), {,   ,   , let, temp, =, values, [, j, ], ;,   ,   , if, (, values, [, j, ], >, values, [, j, +1, ]), {,   ,   ,   , values, [, j, ], =, values, [, j, +1, ], ;,   ,   ,   , values, [, j, +1, ], =, temp, ;,   ,   , },   ,   , j, ++, ;,   ,   ,   ,   , if, (, j, >=, values, ., length, -, i, -1, ), {,   ,   ,   , j, =, 0, ;,   ,   ,   , i, ++, ;,   ,   , },   , },   , else, {,   ,   , noLoop, (, ), ;,   , }, }, }, \n// The simulateSorting() function helps in animating\n, \n// the whole bubble sort algorithm\n, \n// by drawing the rectangles using values\n, \n// in the array as the length of the rectangle.\n, function, simulateSorting, (, ), {, for, (, let, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {,   , stroke, (, 100, ,, 143, ,, 143, ), ;,   ,   , fill, (, 50, ), ;,   ,   , rect, (, i, *, 8, ,, height, ,, 8, ,, -, values, [, i, ], ,, 20, ), ;,   , }, }"
    }, {
        "name": "Stepping Feet Illusion",
        "description": "Stepping feet illusion is a very famous psychological experiment Both the bricks will appear to move at different speed even though they are moving at the same speed. Click the mouse inside Canvas to confirm that they are moving at the same speed. Contributed by Sagar Arora.",
        "code": " \n// this class describes the structure\n, \n// and movements of the brick\n, class, Brick, {, constructor, (, bc, ,, y, ), {,   , this, ., brickColor, =, bc, ;,   , this, ., yPos, =, y, ;,   , this, ., xPos, =, 0, ;, }, \n// this function creates the brick\n, createBrick, (, ), {,   , fill, (, this, ., brickColor, ), ;,   , rect, (, this, ., xPos, ,, this, ., yPos, ,, 100, ,, 50, ), ;, }, \n// this function sets the speed\n, \n// of movement of the brick to 1\n, setSpeed, (, ), {,   , this, ., xSpeed, =, 1, ;, }, \n// this function sets the bricks in motion\n, moveBrick, (, ), {,   , this, ., xPos, +=, this, ., xSpeed, ;,   , if, (, this, ., xPos, +100, >=, width, ||, this, ., xPos, <=, 0, ), {,   ,   , this, ., xSpeed, *=, -1, ;,   , }, }, }, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, createP, (, \"Keep the mouse clicked\", ), ., style, (, 'color', ,, '#ffffff', ), ;, createP, (, \"to check whether the bricks\", ), ., style, (, 'color', ,, '#ffffff', ), ;, createP, (, \"are moving at same speed or not\", ), ., style, (, 'color', ,, '#ffffff', ), ;, }, \n// creating two bricks of \n, \n// colors white and black\n, let, brick1, =, new, Brick, (, \"white\", ,, 100, ), ;, let, brick2, =, new, Brick, (, \"black\", ,, 250, ), ;, \n// This function sets speed of\n, \n// brick 1 and brick2 to 1.\n, brick1, ., setSpeed, (, ), ;, brick2, ., setSpeed, (, ), ;, function, draw, (, ), {, background, (, 0, ), ;, if, (, mouseIsPressed, ), {,   , background, (, 50, ), ;, }, brick1, ., createBrick, (, ), ;, brick1, ., moveBrick, (, ), ;, if, (, !, mouseIsPressed, ), {,   , createBars, (, ), ;, }, brick2, ., createBrick, (, ), ;, brick2, ., moveBrick, (, ), ;, }, \n// this function creates the black and\n, \n// white bars across the screen\n, function, createBars, (, ), {, let, len, =, 12, ;, for, (, let, i, =, 0, ;, i, <, width, /, len, ;, i, ++, ), {,   , fill, (, \"white\", ), ;,   , if, (, i, %, 2, ===, 0, ),   , rect, (, i, *, len, ,, height, ,, len, ,, -, height, ), ;, }, }"
    }, {
        "name": "Particles",
        "description": "There is a light-weight JavaScript library named particle.js which creates a very pleasing particle system. This is an attempt to recreate that particle system using p5.js. Inspired by Particle.js, contributed by Sagar Arora.",
        "code": " \n// this class describes the properties of a single particle.\n, class, Particle, {, \n// setting the co-ordinates, radius and the\n, \n// speed of a particle in both the co-ordinates axes.\n, constructor, (, ), {,   , this, ., x, =, random, (, 0, ,, width, ), ;,   , this, ., y, =, random, (, 0, ,, height, ), ;,   , this, ., r, =, random, (, 1, ,, 8, ), ;,   , this, ., xSpeed, =, random, (, -2, ,, 2, ), ;,   , this, ., ySpeed, =, random, (, -1, ,, 1.5, ), ;, }, \n// creation of a particle.\n, createParticle, (, ), {,   , noStroke, (, ), ;,   , fill, (, 'rgba(200,169,169,0.5)', ), ;,   , circle, (, this, ., x, ,, this, ., y, ,, this, ., r, ), ;, }, \n// setting the particle in motion.\n, moveParticle, (, ), {,   , if, (, this, ., x, <, 0, ||, this, ., x, >, width, ),   ,   , this, ., xSpeed, *=, -1, ;,   , if, (, this, ., y, <, 0, ||, this, ., y, >, height, ),   ,   , this, ., ySpeed, *=, -1, ;,   , this, ., x, +=, this, ., xSpeed, ;,   , this, ., y, +=, this, ., ySpeed, ;, }, \n// this function creates the connections(lines)\n, \n// between particles which are less than a certain distance apart\n, joinParticles, (, particles, ), {,   , particles, ., forEach, (, element, =>, {,   ,   , let, dis, =, dist, (, this, ., x, ,, this, ., y, ,, element, ., x, ,, element, ., y, ), ;,   ,   , if, (, dis, <, 85, ), {,   ,   ,   , stroke, (, 'rgba(255,255,255,0.04)', ), ;,   ,   ,   , line, (, this, ., x, ,, this, ., y, ,, element, ., x, ,, element, ., y, ), ;,   ,   , },   , }), ;, }, }, \n// an array to add multiple particles\n, let, particles, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, for, (, let, i, =, 0, ;, i, <, width, /, 10, ;, i, ++, ), {,   , particles, ., push, (, new, Particle, (, )), ;, }, }, function, draw, (, ), {, background, (, '#0f0f0f', ), ;, for, (, let, i, =, 0, ;, i, <, particles, ., length, ;, i, ++, ), {,   , particles, [, i, ], ., createParticle, (, ), ;,   , particles, [, i, ], ., moveParticle, (, ), ;,   , particles, [, i, ], ., joinParticles, (, particles, ., slice, (, i, )), ;, }, }"
    }, {
        "name": "Quicksort",
        "description": "This is a simulation of the Quicksort sorting algorithm. We start with an array of bars and sort them according to their height in ascending order. References taken from a coding challenge by The Coding Train.\n\nQuicksort is a divide-and-conquer algorithm: it performs sorting by dividing the original array into smaller subarrays and solving them independently, loosely speaking. It involves picking an element of the array as the pivot element and partitioning the given array around the picked pivot.\nPartitioning refers to arranging the given array(or subarray) in such a way that all elements to the left of the pivot element are smaller than it and all elements to its right are larger than it. Thus, we have a reference point from where we proceed to sort the left and right 'halves' of the array, and eventually arrive at an array sorted in ascending order. More\n",
        "code": " \n// width of each bar is taken as 8.\n, let, values, =, [, ], ;, \n// The array 'states' helps in identifying the pivot index\n, \n// at every step, and also the subarray which is being sorted\n, \n// at any given time. \n, let, states, =, [, ], ;, \n// The setup() function is called once when the program \n, \n// starts. Here, we fill the array 'values' with random values\n, \n// and the array 'states' with a value of -1 for each position.\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, for, (, let, i, =, 0, ;, i, <, width, /, 8, ;, i, ++, ), {,   , values, ., push, (, random, (, height, )), ;,   , states, ., push, (, -1, ), ;, }, quickSort, (, 0, ,, values, ., length, -, 1, ), ;, }, \n// The statements in draw() function are executed continuously\n, \n// until the program is stopped. Each statement is executed\n, \n// sequentially and after the last line is read, the first\n, \n// line is executed again.\n, function, draw, (, ), {, background, (, 140, ), ;, for, (, let, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {,   , \n// color coding\n,   , if, (, states, [, i, ], ==, 0, ), {,   ,   , \n// color for the bar at the pivot index\n,   ,   , fill, (, '#E0777D', ), ;,   , }, else, if, (, states, [, i, ], ==, 1, ), {,   ,   , \n// color for the bars being sorted currently\n,   ,   , fill, (, '#D6FFB7', ), ;,   , }, else, {,   ,   , fill, (, 255, ), ;,   , },   , rect, (, i, *, 8, ,, height, -, values, [, i, ], ,, 8, ,, values, [, i, ]), ;,   , }, }, async, function, quickSort, (, start, , , end, ), {, if, (, start, >, end, ), {, \n// Nothing to sort!\n,   , return, ;, }, \n// partition() returns the index of the pivot element.\n, \n// Once partition() is executed, all elements to the  \n, \n// left of the pivot element are smaller than it and \n, \n// all elements to its right are larger than it.\n, let, index, =, await, partition, (, start, ,, end, ), ;, \n// restore original state\n, states, [, index, ], =, -1, ;, await, Promise, ., all, (,   , [, quickSort, (, start, ,, index, -, 1, ), ,,   ,   , quickSort, (, index, +, 1, ,, end, ),   , ]), ;, }, \n// We have chosen the element at the last index as \n, \n// the pivot element, but we could've made different\n, \n// choices, e.g. take the first element as pivot.\n, async, function, partition, (, start, , , end, ), {, for, (, let, i, =, start, ;, i, <, end, ;, i, ++, ), {,   , \n// identify the elements being considered currently\n,   , states, [, i, ], =, 1, ;, }, \n// Quicksort algorithm\n, let, pivotIndex, =, start, ;, \n// make pivot index distinct\n, states, [, pivotIndex, ], =, 0, ;, let, pivotElement, =, values, [, end, ], ;, for, (, let, i, =, start, ;, i, <, end, ;, i, ++, ), {,   , if, (, values, [, i, ], <, pivotElement, ), {,   ,   , await, swap, (, i, ,, pivotIndex, ), ;,   ,   , states, [, pivotIndex, ], =, -1, ;,   ,   , pivotIndex, ++, ;,   ,   , states, [, pivotIndex, ], =, 0, ;,   , }, }, await, swap, (, end, ,, pivotIndex, ), ;, for, (, let, i, =, start, ;, i, <, end, ;, i, ++, ), {,   , \n// restore original state\n,   , if, (, i, !=, pivotIndex, ), {,   ,   , states, [, i, ], =, -1, ;,   , }, }, return, pivotIndex, ;, }, \n// swaps elements of 'values' at indices 'i' and 'j'\n, async, function, swap, (, i, , , j, ), {, \n// adjust the pace of the simulation by changing the\n, \n// value\n, await, sleep, (, 25, ), ;, let, temp, =, values, [, i, ], ;, values, [, i, ], =, values, [, j, ], ;, values, [, j, ], =, temp, ;, }, \n// custom helper function to deliberately slow down\n, \n// the sorting process and make visualization easy\n, function, sleep, (, ms, ), {, return, new, Promise, (, resolve, =>, setTimeout, (, resolve, ,, ms, )), ;, }"
    }]
}, {
    "groupName": "Interaction",
    "examples": [{
        "name": "Tickle",
        "description": "The word \"tickle\" jitters when the cursor hovers over. Sometimes, it can be tickled off the screen.",
        "code": " let, message, =, 'tickle', ,, font, ,, bounds, ,, \n// holds x, y, w, h of the text's bounding box\n, fontsize, =, 60, ,, x, ,, y, ;, \n// x and y coordinates of the text\n, function, preload, (, ), {, font, =, loadFont, (, 'assets/SourceSansPro-Regular.otf', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// set up the font\n, textFont, (, font, ), ;, textSize, (, fontsize, ), ;, \n// get the width and height of the text so we can center it initially\n, bounds, =, font, ., textBounds, (, message, ,, 0, ,, 0, ,, fontsize, ), ;, x, =, width, /, 2, -, bounds, ., w, /, 2, ;, y, =, height, /, 2, -, bounds, ., h, /, 2, ;, }, function, draw, (, ), {, background, (, 204, ,, 120, ), ;, \n// write the text in black and get its bounding box\n, fill, (, 0, ), ;, text, (, message, ,, x, ,, y, ), ;, bounds, =, font, ., textBounds, (, message, ,, x, ,, y, ,, fontsize, ), ;, \n// check if the mouse is inside the bounding box and tickle if so\n, if, (,   , mouseX, >=, bounds, ., x, &&,   , mouseX, <=, bounds, ., x, +, bounds, ., w, &&,   , mouseY, >=, bounds, ., y, &&,   , mouseY, <=, bounds, ., y, +, bounds, ., h, ), {,   , x, +=, random, (, -5, ,, 5, ), ;,   , y, +=, random, (, -5, ,, 5, ), ;, }, }"
    }, {
        "name": "Weight Line",
        "description": "contributed by Prof WM Harris, using the random function with events to color/weight a line\nHow to use the random function with events to color/ weight a line dependent on mouse location, left mouse button clicks, character key types, and random key releases.\nFunctions are created for both the canvas set up as well as the creation of the line. Depending on the action taken by the user the line can vary in width and color. Left mouse button clicks result in a color change to blue, while the typing of any character key will change the color to turquoise, each resulting in a variable stroke weight; the width of the former will be between 0 – 1 while the width of the latter will be 0 – 5. The release of any key will result in a random hue, saturation, and brightness change to the line.",
        "code": " function, setup, (, ), {,   , createCanvas, (, 400, ,, 400, ), ;,   , background, (, \"beige\", ), ;,   , colorMode, (, HSB, ), ;, }, function, draw, (, ), {,   , \n//Line from prev pt to current pt\n,   , \n//of mouse position\n,   , line, (, mouseX, ,, mouseY, ,, pmouseX, ,, pmouseY, ), ;, }, \n//listen when we click the mouse\n, function, mouseClicked, (, ), {,   , \n//weights 0 to 1\n,   , stroke, (, \"slateBlue\", ), ;,   , strokeWeight, (, random, (, )), ;,   , \n//what if want weights 0 to .4?\n,   , \n//strokeWeight( random(.4) );\n, }, \n//listen when we release *any* key\n, function, keyReleased, (, ), {,   , \n//color hue values between 20 and 145\n,   , \n//saturation 0 to 100\n,   , \n//brightness 80 to 100\n,   , stroke, (, random, (, 20, ,, 145, ), ,, random, (, 100, ), ,, random, (, 80, ,, 100, )), ;, }, \n//listen for only character keys\n, function, keyTyped, (, ), {,   , \n//weights 0 to 5\n,   , stroke, (, \"turquoise\", ), ;,   , strokeWeight, (, random, (, 5, )), ;, }"
    }, {
        "name": "Follow 1",
        "description": "A line segment is pushed and pulled by the cursor. Based on code from Keith Peters.",
        "code": " let, x, =, 100, ,, y, =, 100, ,, angle1, =, 0.0, ,, segLength, =, 50, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 20.0, ), ;, stroke, (, 255, ,, 100, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, dx, =, mouseX, -, x, ;, dy, =, mouseY, -, y, ;, angle1, =, atan2, (, dy, ,, dx, ), ;, x, =, mouseX, -, cos, (, angle1, ), *, segLength, ;, y, =, mouseY, -, sin, (, angle1, ), *, segLength, ;, segment, (, x, ,, y, ,, angle1, ), ;, ellipse, (, x, ,, y, ,, 20, ,, 20, ), ;, }, function, segment, (, x, , , y, , , a, ), {, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Follow 2",
        "description": "A two-segmented arm follows the cursor position. The relative angle between the segments is calculated with atan2() and the position calculated with sin() and cos(). Based on code from Keith Peters.",
        "code": " let, x, =, [, 0, ,, 0, ], ,, y, =, [, 0, ,, 0, ], ,, segLength, =, 50, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 20.0, ), ;, stroke, (, 255, ,, 100, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, dragSegment, (, 0, ,, mouseX, ,, mouseY, ), ;, dragSegment, (, 1, ,, x, [, 0, ], ,, y, [, 0, ]), ;, }, function, dragSegment, (, i, , , xin, , , yin, ), {, const, dx, =, xin, -, x, [, i, ], ;, const, dy, =, yin, -, y, [, i, ], ;, const, angle, =, atan2, (, dy, ,, dx, ), ;, x, [, i, ], =, xin, -, cos, (, angle, ), *, segLength, ;, y, [, i, ], =, yin, -, sin, (, angle, ), *, segLength, ;, segment, (, x, [, i, ], ,, y, [, i, ], ,, angle, ), ;, }, function, segment, (, x, , , y, , , a, ), {, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Follow 3",
        "description": "A segmented line follows the mouse. The relative angle from each segment to the next is calculated with atan2() and the position of the next is calculated with sin() and cos(). Based on code from Keith Peters.",
        "code": " let, x, =, [, ], ,, y, =, [, ], ,, segNum, =, 20, ,, segLength, =, 18, ;, for, (, let, i, =, 0, ;, i, <, segNum, ;, i, ++, ), {, x, [, i, ], =, 0, ;, y, [, i, ], =, 0, ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 9, ), ;, stroke, (, 255, ,, 100, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, dragSegment, (, 0, ,, mouseX, ,, mouseY, ), ;, for, (, let, i, =, 0, ;, i, <, x, ., length, -, 1, ;, i, ++, ), {,   , dragSegment, (, i, +, 1, ,, x, [, i, ], ,, y, [, i, ]), ;, }, }, function, dragSegment, (, i, , , xin, , , yin, ), {, const, dx, =, xin, -, x, [, i, ], ;, const, dy, =, yin, -, y, [, i, ], ;, const, angle, =, atan2, (, dy, ,, dx, ), ;, x, [, i, ], =, xin, -, cos, (, angle, ), *, segLength, ;, y, [, i, ], =, yin, -, sin, (, angle, ), *, segLength, ;, segment, (, x, [, i, ], ,, y, [, i, ], ,, angle, ), ;, }, function, segment, (, x, , , y, , , a, ), {, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Snake game",
        "description": "The famous snake game! Once you click run, click anywhere inside the black area, and control the snake using i j k and l. Don't let the snake hit itself or the wall!\nExample created by Prashant Gupta",
        "code": ""
    }, {
        "name": "Wavemaker",
        "description": "This illustrates how waves (like water waves) emerge from particles oscillating in place. Move your mouse to direct the wave. Contributed by Aatish Bhatia, inspired by Orbiters by Dave Whyte.",
        "code": " let, t, =, 0, ;, \n// time variable\n, function, setup, (, ), {, createCanvas, (, 600, ,, 600, ), ;, noStroke, (, ), ;, fill, (, 40, ,, 200, ,, 40, ), ;, }, function, draw, (, ), {, background, (, 10, ,, 10, ), ;, \n// translucent background (creates trails)\n, \n// make a x and y grid of ellipses\n, for, (, let, x, =, 0, ;, x, <=, width, ;, x, =, x, +, 30, ), {,   , for, (, let, y, =, 0, ;, y, <=, height, ;, y, =, y, +, 30, ), {,   ,   , \n// starting point of each circle depends on mouse position\n,   ,   , const, xAngle, =, map, (, mouseX, ,, 0, ,, width, ,, -4, *, PI, ,, 4, *, PI, ,, true, ), ;,   ,   , const, yAngle, =, map, (, mouseY, ,, 0, ,, height, ,, -4, *, PI, ,, 4, *, PI, ,, true, ), ;,   ,   , \n// and also varies based on the particle's location\n,   ,   , const, angle, =, xAngle, *, (, x, /, width, ), +, yAngle, *, (, y, /, height, ), ;,   ,   , \n// each particle moves in a circle\n,   ,   , const, myX, =, x, +, 20, *, cos, (, 2, *, PI, *, t, +, angle, ), ;,   ,   , const, myY, =, y, +, 20, *, sin, (, 2, *, PI, *, t, +, angle, ), ;,   ,   , ellipse, (, myX, ,, myY, ,, 10, ), ;, \n// draw particle\n,   , }, }, t, =, t, +, 0.01, ;, \n// update time\n, }"
    }, {
        "name": "Reach 1",
        "description": "The arm follows the position of the mouse by calculating the angles with atan2(). Based on code from Keith Peters.",
        "code": " let, segLength, =, 80, ,, x, ,, y, ,, x2, ,, y2, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 20, ), ;, stroke, (, 255, ,, 100, ), ;, x, =, width, /, 2, ;, y, =, height, /, 2, ;, x2, =, x, ;, y2, =, y, ;, }, function, draw, (, ), {, background, (, 0, ), ;, dragSegment, (, 0, ,, mouseX, ,, mouseY, ), ;, for, (, let, i, =, 0, ;, i, <, x, ., length, -, 1, ;, i, ++, ), {,   , dragSegment, (, i, +, 1, ,, x, [, i, ], ,, y, [, i, ]), ;, }, }, function, dragSegment, (, i, , , xin, , , yin, ), {, background, (, 0, ), ;, dx, =, mouseX, -, x, ;, dy, =, mouseY, -, y, ;, angle1, =, atan2, (, dy, ,, dx, ), ;, tx, =, mouseX, -, cos, (, angle1, ), *, segLength, ;, ty, =, mouseY, -, sin, (, angle1, ), *, segLength, ;, dx, =, tx, -, x2, ;, dy, =, ty, -, y2, ;, angle2, =, atan2, (, dy, ,, dx, ), ;, x, =, x2, +, cos, (, angle2, ), *, segLength, ;, y, =, y2, +, sin, (, angle2, ), *, segLength, ;, segment, (, x, ,, y, ,, angle1, ), ;, segment, (, x2, ,, y2, ,, angle2, ), ;, }, function, segment, (, x, , , y, , , a, ), {, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Reach 2",
        "description": "The arm follows the position of the mouse by calculating the angles with atan2(). Based on code from Keith Peters.",
        "code": " let, numSegments, =, 10, ,, x, =, [, ], ,, y, =, [, ], ,, angle, =, [, ], ,, segLength, =, 26, ,, targetX, ,, targetY, ;, for, (, let, i, =, 0, ;, i, <, numSegments, ;, i, ++, ), {, x, [, i, ], =, 0, ;, y, [, i, ], =, 0, ;, angle, [, i, ], =, 0, ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 20, ), ;, stroke, (, 255, ,, 100, ), ;, x, [, x, ., length, -, 1, ], =, width, /, 2, ;, \n// Set base x-coordinate\n, y, [, x, ., length, -, 1, ], =, height, ;, \n// Set base y-coordinate\n, }, function, draw, (, ), {, background, (, 0, ), ;, reachSegment, (, 0, ,, mouseX, ,, mouseY, ), ;, for, (, let, i, =, 1, ;, i, <, numSegments, ;, i, ++, ), {,   , reachSegment, (, i, ,, targetX, ,, targetY, ), ;, }, for, (, let, j, =, x, ., length, -, 1, ;, j, >=, 1, ;, j, --, ), {,   , positionSegment, (, j, ,, j, -, 1, ), ;, }, for, (, let, k, =, 0, ;, k, <, x, ., length, ;, k, ++, ), {,   , segment, (, x, [, k, ], ,, y, [, k, ], ,, angle, [, k, ], ,, (, k, +, 1, ), *, 2, ), ;, }, }, function, positionSegment, (, a, , , b, ), {, x, [, b, ], =, x, [, a, ], +, cos, (, angle, [, a, ]), *, segLength, ;, y, [, b, ], =, y, [, a, ], +, sin, (, angle, [, a, ]), *, segLength, ;, }, function, reachSegment, (, i, , , xin, , , yin, ), {, const, dx, =, xin, -, x, [, i, ], ;, const, dy, =, yin, -, y, [, i, ], ;, angle, [, i, ], =, atan2, (, dy, ,, dx, ), ;, targetX, =, xin, -, cos, (, angle, [, i, ]), *, segLength, ;, targetY, =, yin, -, sin, (, angle, [, i, ]), *, segLength, ;, }, function, segment, (, x, , , y, , , a, , , sw, ), {, strokeWeight, (, sw, ), ;, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Reach 3",
        "description": "The arm follows the position of the ball by calculating the angles with atan2(). Based on code from Keith Peters.",
        "code": " let, numSegments, =, 8, ,, x, =, [, ], ,, y, =, [, ], ,, angle, =, [, ], ,, segLength, =, 26, ,, targetX, ,, targetY, ,, ballX, =, 50, ,, ballY, =, 50, ,, ballXDirection, =, 1, ,, ballYDirection, =, -1, ;, for, (, let, i, =, 0, ;, i, <, numSegments, ;, i, ++, ), {, x, [, i, ], =, 0, ;, y, [, i, ], =, 0, ;, angle, [, i, ], =, 0, ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, strokeWeight, (, 20, ), ;, stroke, (, 255, ,, 100, ), ;, noFill, (, ), ;, x, [, x, ., length, -, 1, ], =, width, /, 2, ;, \n// Set base x-coordinate\n, y, [, x, ., length, -, 1, ], =, height, ;, \n// Set base y-coordinate\n, }, function, draw, (, ), {, background, (, 0, ), ;, strokeWeight, (, 20, ), ;, ballX, =, ballX, +, 1.0, *, ballXDirection, ;, ballY, =, ballY, +, 0.8, *, ballYDirection, ;, if, (, ballX, >, width, -, 25, ||, ballX, <, 25, ), {,   , ballXDirection, *=, -1, ;, }, if, (, ballY, >, height, -, 25, ||, ballY, <, 25, ), {,   , ballYDirection, *=, -1, ;, }, ellipse, (, ballX, ,, ballY, ,, 30, ,, 30, ), ;, reachSegment, (, 0, ,, ballX, ,, ballY, ), ;, for, (, let, i, =, 1, ;, i, <, numSegments, ;, i, ++, ), {,   , reachSegment, (, i, ,, targetX, ,, targetY, ), ;, }, for, (, let, j, =, x, ., length, -, 1, ;, j, >=, 1, ;, j, --, ), {,   , positionSegment, (, j, ,, j, -, 1, ), ;, }, for, (, let, k, =, 0, ;, k, <, x, ., length, ;, k, ++, ), {,   , segment, (, x, [, k, ], ,, y, [, k, ], ,, angle, [, k, ], ,, (, k, +, 1, ), *, 2, ), ;, }, }, function, positionSegment, (, a, , , b, ), {, x, [, b, ], =, x, [, a, ], +, cos, (, angle, [, a, ]), *, segLength, ;, y, [, b, ], =, y, [, a, ], +, sin, (, angle, [, a, ]), *, segLength, ;, }, function, reachSegment, (, i, , , xin, , , yin, ), {, const, dx, =, xin, -, x, [, i, ], ;, const, dy, =, yin, -, y, [, i, ], ;, angle, [, i, ], =, atan2, (, dy, ,, dx, ), ;, targetX, =, xin, -, cos, (, angle, [, i, ]), *, segLength, ;, targetY, =, yin, -, sin, (, angle, [, i, ]), *, segLength, ;, }, function, segment, (, x, , , y, , , a, , , sw, ), {, strokeWeight, (, sw, ), ;, push, (, ), ;, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Arduino sensor data via WebJack",
        "description": "WebJack is a way to read data from an Arduino (and other sources) using audio -- it basically turns your Arduino into an audio modem. https://github.com/publiclab/webjack Note: WebJack and p5-webjack libraries must be added to your index.html as follows:\n<script src=\"https://webjack.io/dist/webjack.js\"></script>\n<script src=\"https://jywarren.github.io/p5-webjack/lib.js\"></script>\nWorking example: https://editor.p5js.org/jywarren/sketches/rkztwSt8M Testing audio: https://www.youtube.com/watch?v=GtJW1Dlt3cg Load this sketch onto an Arduino: https://create.arduino.cc/editor/jywarren/023158d8-be51-4c78-99ff-36c63126b554/preview Arduino will output audio from pin 3 + ground. Use microphone or an audio cable.",
        "code": ""
    }, {
        "name": "Kaleidoscope",
        "description": "A kaleidoscope is an optical instrument with two or more reflecting surfaces tilted to each other in an angle. This example tries to replicate the behavior of a kaleidoscope. Set the number of reflections at the symmetry variable and start drawing on the screen. Adjust the brush size with the help of the slider. The clear screen as it says clears the screen. The save button will download a .jpg file of the art that you have created.",
        "code": " \n// Symmetry corresponding to the number of reflections. Change the number for different number of reflections \n, let, symmetry, =, 6, ;, let, angle, =, 360, /, symmetry, ;, let, saveButton, ,, clearButton, ,, mouseButton, ,, keyboardButton, ;, let, slider, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 710, ), ;, angleMode, (, DEGREES, ), ;, background, (, 127, ), ;, \n// Creating the save button for the file\n, saveButton, =, createButton, (, 'save', ), ;, saveButton, ., mousePressed, (, saveFile, ), ;, \n// Creating the clear screen button\n, clearButton, =, createButton, (, 'clear', ), ;, clearButton, ., mousePressed, (, clearScreen, ), ;, \n// Creating the button for Full Screen\n, fullscreenButton, =, createButton, (, 'Full Screen', ), ;, fullscreenButton, ., mousePressed, (, screenFull, ), ;, \n// Setting up the slider for the thickness of the brush\n, brushSizeSlider, =, createButton, (, 'Brush Size Slider', ), ;, sizeSlider, =, createSlider, (, 1, ,, 32, ,, 4, ,, 0.1, ), ;, }, \n// Save File Function\n, function, saveFile, (, ), {, save, (, 'design.jpg', ), ;, }, \n// Clear Screen function\n, function, clearScreen, (, ), {, background, (, 127, ), ;, }, \n// Full Screen Function\n, function, screenFull, (, ), {, let, fs, =, fullscreen, (, ), ;, fullscreen, (, !, fs, ), ;, }, function, draw, (, ), {, translate, (, width, /, 2, ,, height, /, 2, ), ;, if, (, mouseX, >, 0, &&, mouseX, <, width, &&, mouseY, >, 0, &&, mouseY, <, height, ), {,   , let, mx, =, mouseX, -, width, /, 2, ;,   , let, my, =, mouseY, -, height, /, 2, ;,   , let, pmx, =, pmouseX, -, width, /, 2, ;,   , let, pmy, =, pmouseY, -, height, /, 2, ;,   ,   , if, (, mouseIsPressed, ), {,   ,   , for, (, let, i, =, 0, ;, i, <, symmetry, ;, i, ++, ), {,   ,   ,   , rotate, (, angle, ), ;,   ,   ,   , let, sw, =, sizeSlider, ., value, (, ), ;,   ,   ,   , strokeWeight, (, sw, ), ;,   ,   ,   , line, (, mx, ,, my, ,, pmx, ,, pmy, ), ;,   ,   ,   , push, (, ), ;,   ,   ,   , scale, (, 1, ,, -1, ), ;,   ,   ,   , line, (, mx, ,, my, ,, pmx, ,, pmy, ), ;,   ,   ,   , pop, (, ), ;,   ,   , },   , }, }, }"
    }]
}, {
    "groupName": "Objects",
    "examples": [{
        "name": "Objects",
        "description": "Create a Jitter class, instantiate an object, and move it around the screen. Adapted from Getting Started with Processing by Casey Reas and Ben Fry.",
        "code": ""
    }, {
        "name": "Multiple Objects",
        "description": "Create a Jitter class, instantiate multiple objects, and move it around the screen.",
        "code": " let, bug1, ;, \n// Declare objects\n, let, bug2, ;, let, bug3, ;, let, bug4, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// Create object\n, bug1, =, new, Jitter, (, ), ;, bug2, =, new, Jitter, (, ), ;, bug3, =, new, Jitter, (, ), ;, bug4, =, new, Jitter, (, ), ;, }, function, draw, (, ), {, background, (, 50, ,, 89, ,, 100, ), ;, bug1, ., move, (, ), ;, bug1, ., display, (, ), ;, bug2, ., move, (, ), ;, bug2, ., display, (, ), ;, bug3, ., move, (, ), ;, bug3, ., display, (, ), ;, bug4, ., move, (, ), ;, bug4, ., display, (, ), ;, }, \n// Jitter class\n, class, Jitter, {, constructor, (, ), {,   , this, ., x, =, random, (, width, ), ;,   , this, ., y, =, random, (, height, ), ;,   , this, ., diameter, =, random, (, 10, ,, 30, ), ;,   , this, ., speed, =, 1, ;, }, move, (, ), {,   , this, ., x, +=, random, (, -, this, ., speed, ,, this, ., speed, ), ;,   , this, ., y, +=, random, (, -, this, ., speed, ,, this, ., speed, ), ;, }, display, (, ), {,   , ellipse, (, this, ., x, ,, this, ., y, ,, this, ., diameter, ,, this, ., diameter, ), ;, }, }"
    }, {
        "name": "Array of Objects",
        "description": "Create a Jitter class, instantiate an array of objects and move them around the screen.",
        "code": " let, bugs, =, [, ], ;, \n// array of Jitter objects\n, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// Create objects\n, for, (, let, i, =, 0, ;, i, <, 50, ;, i, ++, ), {,   , bugs, ., push, (, new, Jitter, (, )), ;, }, }, function, draw, (, ), {, background, (, 50, ,, 89, ,, 100, ), ;, for, (, let, i, =, 0, ;, i, <, bugs, ., length, ;, i, ++, ), {,   , bugs, [, i, ], ., move, (, ), ;,   , bugs, [, i, ], ., display, (, ), ;, }, }, \n// Jitter class\n, class, Jitter, {, constructor, (, ), {,   , this, ., x, =, random, (, width, ), ;,   , this, ., y, =, random, (, height, ), ;,   , this, ., diameter, =, random, (, 10, ,, 30, ), ;,   , this, ., speed, =, 1, ;, }, move, (, ), {,   , this, ., x, +=, random, (, -, this, ., speed, ,, this, ., speed, ), ;,   , this, ., y, +=, random, (, -, this, ., speed, ,, this, ., speed, ), ;, }, display, (, ), {,   , ellipse, (, this, ., x, ,, this, ., y, ,, this, ., diameter, ,, this, ., diameter, ), ;, }, }"
    }, {
        "name": "Objects 2",
        "description": "Ported from example by hbarragan. Move the cursor across the image to change the speed and positions of the geometry. The class MRect defines a group of lines.",
        "code": " let, r1, ,, r2, ,, r3, ,, r4, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, fill, (, 255, ,, 204, ), ;, noStroke, (, ), ;, r1, =, new, MRect, (, 1, ,, 134.0, ,, 0.532, ,, 0.1, *, height, ,, 10.0, ,, 60.0, ), ;, r2, =, new, MRect, (, 2, ,, 44.0, ,, 0.166, ,, 0.3, *, height, ,, 5.0, ,, 50.0, ), ;, r3, =, new, MRect, (, 2, ,, 58.0, ,, 0.332, ,, 0.4, *, height, ,, 10.0, ,, 35.0, ), ;, r4, =, new, MRect, (, 1, ,, 120.0, ,, 0.0498, ,, 0.9, *, height, ,, 15.0, ,, 60.0, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, r1, ., display, (, ), ;, r2, ., display, (, ), ;, r3, ., display, (, ), ;, r4, ., display, (, ), ;, r1, ., move, (, mouseX, -, width, /, 2, ,, mouseY, +, height, *, 0.1, ,, 30, ), ;, r2, ., move, ((, mouseX, +, width, *, 0.05, ), %, width, ,, mouseY, +, height, *, 0.025, ,, 20, ), ;, r3, ., move, (, mouseX, /, 4, ,, mouseY, -, height, *, 0.025, ,, 40, ), ;, r4, ., move, (, mouseX, -, width, /, 2, ,, height, -, mouseY, ,, 50, ), ;, }, class, MRect, {,   , constructor, (, iw, ,, ixp, ,, ih, ,, iyp, ,, id, ,, it, ), {,   , this, ., w, =, iw, ;, \n// single bar width\n,   , this, ., xpos, =, ixp, ;, \n// rect xposition\n,   , this, ., h, =, ih, ;, \n// rect height\n,   , this, ., ypos, =, iyp, ;, \n// rect yposition\n,   , this, ., d, =, id, ;, \n// single bar distance\n,   , this, ., t, =, it, ;, \n// number of bars\n,   , },   , move, (, posX, ,, posY, ,, damping, ), {,   ,   ,   , let, dif, =, this, ., ypos, -, posY, ;,   ,   ,   , if, (, abs, (, dif, ), >, 1, ), {,   ,   ,   ,   ,   , this, ., ypos, -=, dif, /, damping, ;,   ,   ,   , },   ,   ,   , dif, =, this, ., xpos, -, posX, ;,   ,   ,   , if, (, abs, (, dif, ), >, 1, ), {,   ,   ,   ,   ,   , this, ., xpos, -=, dif, /, damping, ;,   ,   ,   , },   , },   , display, (, ), {,   ,   ,   , for, (, let, i, =, 0, ;, i, <, this, ., t, ;, i, ++, ), {,   ,   ,   ,   ,   , rect, (,   ,   ,   ,   ,   , this, ., xpos, +, i, *, (, this, ., d, +, this, ., w, ), ,,   ,   ,   ,   ,   , this, ., ypos, ,,   ,   ,   ,   ,   , this, ., w, ,,   ,   ,   ,   ,   , height, *, this, ., h,   ,   ,   ,   ,   , ), ;,   ,   ,   , },   , }, }"
    }, {
        "name": "Inheritance",
        "description": "A class can be defined using another class as a foundation. In object-oriented programming terminology, one class can inherit fields and methods from another. An object that inherits from another is called a subclass, and the object it inherits from is called a superclass. A subclass extends the superclass.",
        "code": ""
    }, {
        "name": "Composite Objects",
        "description": "An object can include several other objects. Creating such composite objects is a good way to use the principles of modularity and build higher levels of abstraction within a program.",
        "code": ""
    }, {
        "name": "Car Instances",
        "description": "contributed by Prof WM Harris, How to create three instances of Car Class and invoke class methods.\nA function is created for the canvas setup, and 3 car instances are initialized with different colors and canvas positions. The speed of each car is set by passing value to the instance’s start method. A second function calls class methods to display and move the cars.",
        "code": " class, Car, {, \n/* Constructor expects parameters for\n, \n  fill color, x and y coordinates that\n, \n  will be used to initialize class properties.\n, \n  */\n, constructor, (, cColor, ,, x, ,, y, ), {,   , this, ., color, =, cColor, ;,   , this, ., doors, =, 4, ;,   , this, ., isConvertible, =, false, ;,   , this, ., x, =, x, ;,   , this, ., y, =, y, ;,   , this, ., speed, =, 0, ;, }, start, (, speed, ), {, \n// method expects parameter!\n,   , this, ., speed, =, speed, ;, }, display, (, ), {, \n// method!\n,   , fill, (, this, ., color, ), ;,   , rect, (, this, ., x, ,, this, ., y, ,, 20, ,, 10, ), ;, }, move, (, ), {, \n// method!\n,   , this, ., x, +=, this, ., speed, ;,   , \n// Wrap x around boundaries\n,   , if, (, this, ., x, <, -20, ), {,   ,   , this, ., x, =, width, ;,   , }, else, if, (, this, ., x, >, width, ), {,   ,   , this, ., x, =, -20, ;,   , }, }, }, \n//end class Car\n, let, rav4, ;, let, charger, ;, let, nova, ;, function, setup, (, ), {, createCanvas, (, 200, ,, 400, ), ;, \n/* Construct the 3 Cars */\n, \n//constructor expects cColor, x, y\n, rav4, =, new, Car, (, \"silver\", ,, 100, ,, 300, ), ;, charger, =, new, Car, (, \"gold\", ,, 0, ,, 200, ), ;, nova, =, new, Car, (, \"blue\", ,, 200, ,, 100, ), ;, nova, ., doors, =, 2, ;, \n//update nova's doors property\n, console, ., log, (, \"rav4\", ,, rav4, ), ;, console, ., log, (, \"charger\", ,, charger, ), ;, console, ., log, (, \"nova\", ,, nova, ), ;, \n//call start methods of Car instances\n, \n//the start method expects a number for speed\n, rav4, ., start, (, 2.3, ), ;, charger, ., start, (, -4, ), ;, nova, ., start, (, random, (, -1, ,, 1, )), ;, }, function, draw, (, ), {, background, (, \"beige\", ), ;, \n//display and move all 3 Cars\n, rav4, ., display, (, ), ;, charger, ., display, (, ), ;, nova, ., display, (, ), ;, rav4, ., move, (, ), ;, charger, ., move, (, ), ;, nova, ., move, (, ), ;, }"
    }]
}, {
    "groupName": "Lights",
    "examples": [{
        "name": "Directional",
        "description": "Move the mouse to change the direction of the light. Directional light comes from one direction and is stronger when hitting a surface squarely and weaker if it hits at a a gentle angle. After hitting a surface, a directional light scatters in all directions.",
        "code": " const, radius, =, 200, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, noStroke, (, ), ;, fill, (, 200, ), ;, }, function, draw, (, ), {, noStroke, (, ), ;, background, (, 0, ), ;, const, dirY, =, (, mouseY, /, height, -, 0.5, ), *, 4, ;, const, dirX, =, (, mouseX, /, width, -, 0.5, ), *, 4, ;, directionalLight, (, 204, ,, 204, ,, 204, ,, dirX, ,, dirY, ,, 1, ), ;, translate, (, -1.5, *, radius, ,, 0, ,, 0, ), ;, sphere, (, radius, ), ;, translate, (, 3, *, radius, ,, 0, ,, 0, ), ;, sphere, (, radius, ), ;, }"
    }, {
        "name": "Mixture",
        "description": "Display a box with three different kinds of lights.",
        "code": ""
    }]
}, {
    "groupName": "Motion",
    "examples": [{
        "name": "Non Orthogonal Reflection",
        "description": "This is a port by David Blitz of the \"Reflection 1\" example from processing.org/examples",
        "code": ""
    }, {
        "name": "Linear",
        "description": "Changing a variable to create a moving line. When the line moves off the edge of the window, the variable is set to 0, which places the line back at the bottom of the screen.",
        "code": ""
    }, {
        "name": "Bounce",
        "description": "When the shape hits the edge of the window, it reverses its direction.",
        "code": " let, rad, =, 60, ;, \n// Width of the shape\n, let, xpos, ,, ypos, ;, \n// Starting position of shape\n, let, xspeed, =, 2.8, ;, \n// Speed of the shape\n, let, yspeed, =, 2.2, ;, \n// Speed of the shape\n, let, xdirection, =, 1, ;, \n// Left or Right\n, let, ydirection, =, 1, ;, \n// Top to Bottom\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, frameRate, (, 30, ), ;, ellipseMode, (, RADIUS, ), ;, \n// Set the starting position of the shape\n, xpos, =, width, /, 2, ;, ypos, =, height, /, 2, ;, }, function, draw, (, ), {, background, (, 102, ), ;, \n// Update the position of the shape\n, xpos, =, xpos, +, xspeed, *, xdirection, ;, ypos, =, ypos, +, yspeed, *, ydirection, ;, \n// Test to see if the shape exceeds the boundaries of the screen\n, \n// If it does, reverse its direction by multiplying by -1\n, if, (, xpos, >, width, -, rad, ||, xpos, <, rad, ), {,   , xdirection, *=, -1, ;, }, if, (, ypos, >, height, -, rad, ||, ypos, <, rad, ), {,   , ydirection, *=, -1, ;, }, \n// Draw the shape\n, ellipse, (, xpos, ,, ypos, ,, rad, ,, rad, ), ;, }"
    }, {
        "name": "Bouncy Bubbles",
        "description": "based on code from Keith Peters. Multiple-object collision..",
        "code": " let, numBalls, =, 13, ;, let, spring, =, 0.05, ;, let, gravity, =, 0.03, ;, let, friction, =, -0.9, ;, let, balls, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, for, (, let, i, =, 0, ;, i, <, numBalls, ;, i, ++, ), {,   , balls, [, i, ], =, new, Ball, (,   ,   , random, (, width, ), ,,   ,   , random, (, height, ), ,,   ,   , random, (, 30, ,, 70, ), ,,   ,   , i, ,,   ,   , balls,   , ), ;, }, noStroke, (, ), ;, fill, (, 255, ,, 204, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, balls, ., forEach, (, ball, =>, {,   , ball, ., collide, (, ), ;,   , ball, ., move, (, ), ;,   , ball, ., display, (, ), ;, }), ;, }, class, Ball, {, constructor, (, xin, ,, yin, ,, din, ,, idin, ,, oin, ), {,   , this, ., x, =, xin, ;,   , this, ., y, =, yin, ;,   , this, ., vx, =, 0, ;,   , this, ., vy, =, 0, ;,   , this, ., diameter, =, din, ;,   , this, ., id, =, idin, ;,   , this, ., others, =, oin, ;, }, collide, (, ), {,   , for, (, let, i, =, this, ., id, +, 1, ;, i, <, numBalls, ;, i, ++, ), {,   ,   , \n// console.log(others[i]);\n,   ,   , let, dx, =, this, ., others, [, i, ], ., x, -, this, ., x, ;,   ,   , let, dy, =, this, ., others, [, i, ], ., y, -, this, ., y, ;,   ,   , let, distance, =, sqrt, (, dx, *, dx, +, dy, *, dy, ), ;,   ,   , let, minDist, =, this, ., others, [, i, ], ., diameter, /, 2, +, this, ., diameter, /, 2, ;,   ,   , \n//   console.log(distance);\n,   ,   , \n//console.log(minDist);\n,   ,   , if, (, distance, <, minDist, ), {,   ,   ,   , \n//console.log(\"2\");\n,   ,   ,   , let, angle, =, atan2, (, dy, ,, dx, ), ;,   ,   ,   , let, targetX, =, this, ., x, +, cos, (, angle, ), *, minDist, ;,   ,   ,   , let, targetY, =, this, ., y, +, sin, (, angle, ), *, minDist, ;,   ,   ,   , let, ax, =, (, targetX, -, this, ., others, [, i, ], ., x, ), *, spring, ;,   ,   ,   , let, ay, =, (, targetY, -, this, ., others, [, i, ], ., y, ), *, spring, ;,   ,   ,   , this, ., vx, -=, ax, ;,   ,   ,   , this, ., vy, -=, ay, ;,   ,   ,   , this, ., others, [, i, ], ., vx, +=, ax, ;,   ,   ,   , this, ., others, [, i, ], ., vy, +=, ay, ;,   ,   , },   , }, }, move, (, ), {,   , this, ., vy, +=, gravity, ;,   , this, ., x, +=, this, ., vx, ;,   , this, ., y, +=, this, ., vy, ;,   , if, (, this, ., x, +, this, ., diameter, /, 2, >, width, ), {,   ,   , this, ., x, =, width, -, this, ., diameter, /, 2, ;,   ,   , this, ., vx, *=, friction, ;,   , }, else, if, (, this, ., x, -, this, ., diameter, /, 2, <, 0, ), {,   ,   , this, ., x, =, this, ., diameter, /, 2, ;,   ,   , this, ., vx, *=, friction, ;,   , },   , if, (, this, ., y, +, this, ., diameter, /, 2, >, height, ), {,   ,   , this, ., y, =, height, -, this, ., diameter, /, 2, ;,   ,   , this, ., vy, *=, friction, ;,   , }, else, if, (, this, ., y, -, this, ., diameter, /, 2, <, 0, ), {,   ,   , this, ., y, =, this, ., diameter, /, 2, ;,   ,   , this, ., vy, *=, friction, ;,   , }, }, display, (, ), {,   , ellipse, (, this, ., x, ,, this, ., y, ,, this, ., diameter, ,, this, ., diameter, ), ;, }, }"
    }, {
        "name": "Morph",
        "description": "Changing one shape into another by interpolating vertices from one to another.",
        "code": " \n// Two ArrayLists to store the vertices for two shapes\n, \n// This example assumes that each shape will have the same\n, \n// number of vertices, i.e. the size of each ArrayList will be the same\n, let, circle, =, [, ], ;, let, square, =, [, ], ;, \n// An ArrayList for a third set of vertices, the ones we will be drawing\n, \n// in the window\n, let, morph, =, [, ], ;, \n// This boolean variable will control if we are morphing to a circle or square\n, let, state, =, false, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, \n// Create a circle using vectors pointing from center\n, for, (, let, angle, =, 0, ;, angle, <, 360, ;, angle, +=, 9, ), {,   , \n// Note we are not starting from 0 in order to match the\n,   , \n// path of a circle.\n,   , let, v, =, p5, ., Vector, ., fromAngle, (, radians, (, angle, -, 135, )), ;,   , v, ., mult, (, 100, ), ;,   , circle, ., push, (, v, ), ;,   , \n// Let's fill out morph ArrayList with blank PVectors while we are at it\n,   , morph, ., push, (, createVector, (, )), ;, }, \n// A square is a bunch of vertices along straight lines\n, \n// Top of square\n, for, (, let, x, =, -50, ;, x, <, 50, ;, x, +=, 10, ), {,   , square, ., push, (, createVector, (, x, ,, -50, )), ;, }, \n// Right side\n, for, (, let, y, =, -50, ;, y, <, 50, ;, y, +=, 10, ), {,   , square, ., push, (, createVector, (, 50, ,, y, )), ;, }, \n// Bottom\n, for, (, let, x, =, 50, ;, x, >, -50, ;, x, -=, 10, ), {,   , square, ., push, (, createVector, (, x, ,, 50, )), ;, }, \n// Left side\n, for, (, let, y, =, 50, ;, y, >, -50, ;, y, -=, 10, ), {,   , square, ., push, (, createVector, (, -50, ,, y, )), ;, }, }, function, draw, (, ), {, background, (, 51, ), ;, \n// We will keep how far the vertices are from their target\n, let, totalDistance, =, 0, ;, \n// Look at each vertex\n, for, (, let, i, =, 0, ;, i, <, circle, ., length, ;, i, ++, ), {,   , let, v1, ;,   , \n// Are we lerping to the circle or square?\n,   , if, (, state, ), {,   ,   , v1, =, circle, [, i, ], ;,   , }, else, {,   ,   , v1, =, square, [, i, ], ;,   , },   , \n// Get the vertex we will draw\n,   , let, v2, =, morph, [, i, ], ;,   , \n// Lerp to the target\n,   , v2, ., lerp, (, v1, ,, 0.1, ), ;,   , \n// Check how far we are from target\n,   , totalDistance, +=, p5, ., Vector, ., dist, (, v1, ,, v2, ), ;, }, \n// If all the vertices are close, switch shape\n, if, (, totalDistance, <, 0.1, ), {,   , state, =, !, state, ;, }, \n// Draw relative to center\n, translate, (, width, /, 2, ,, height, /, 2, ), ;, strokeWeight, (, 4, ), ;, \n// Draw a polygon that makes up all the vertices\n, beginShape, (, ), ;, noFill, (, ), ;, stroke, (, 255, ), ;, morph, ., forEach, (, v, =>, {,   , vertex, (, v, ., x, ,, v, ., y, ), ;, }), ;, endShape, (, CLOSE, ), ;, }"
    }, {
        "name": "Moving On Curves",
        "description": "In this example, the circles moves along the curve y = x^4. Click the mouse to have it move to a new position.",
        "code": " let, beginX, =, 20.0, ;, \n// Initial x-coordinate\n, let, beginY, =, 10.0, ;, \n// Initial y-coordinate\n, let, endX, =, 570.0, ;, \n// Final x-coordinate\n, let, endY, =, 320.0, ;, \n// Final y-coordinate\n, let, distX, ;, \n// X-axis distance to move\n, let, distY, ;, \n// Y-axis distance to move\n, let, exponent, =, 4, ;, \n// Determines the curve\n, let, x, =, 0.0, ;, \n// Current x-coordinate\n, let, y, =, 0.0, ;, \n// Current y-coordinate\n, let, step, =, 0.01, ;, \n// Size of each step along the path\n, let, pct, =, 0.0, ;, \n// Percentage traveled (0.0 to 1.0)\n, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, distX, =, endX, -, beginX, ;, distY, =, endY, -, beginY, ;, }, function, draw, (, ), {, fill, (, 0, ,, 2, ), ;, rect, (, 0, ,, 0, ,, width, ,, height, ), ;, pct, +=, step, ;, if, (, pct, <, 1.0, ), {,   , x, =, beginX, +, pct, *, distX, ;,   , y, =, beginY, +, pow, (, pct, ,, exponent, ), *, distY, ;, }, fill, (, 255, ), ;, ellipse, (, x, ,, y, ,, 20, ,, 20, ), ;, }, function, mousePressed, (, ), {, pct, =, 0.0, ;, beginX, =, x, ;, beginY, =, y, ;, endX, =, mouseX, ;, endY, =, mouseY, ;, distX, =, endX, -, beginX, ;, distY, =, endY, -, beginY, ;, }"
    }, {
        "name": "Circle Collision",
        "description": "This is a port of the \"Circle Collision\" example from processing.org/examples\nThis example uses vectors for better visualization of physical Quantity",
        "code": " class, Ball, {, constructor, (, x, ,, y, ,, r, ), {,   , this, ., position, =, new, p5, ., Vector, (, x, ,, y, ), ;,   , this, ., velocity, =, p5, ., Vector, ., random2D, (, ), ;,   , this, ., velocity, ., mult, (, 3, ), ;,   , this, ., r, =, r, ;,   , this, ., m, =, r, *, 0.1, ;, }, update, (, ), {,   , this, ., position, ., add, (, this, ., velocity, ), ;, }, checkBoundaryCollision, (, ), {,   , if, (, this, ., position, ., x, >, width, -, this, ., r, ), {,   ,   , this, ., position, ., x, =, width, -, this, ., r, ;,   ,   , this, ., velocity, ., x, *=, -1, ;,   , }, else, if, (, this, ., position, ., x, <, this, ., r, ), {,   ,   , this, ., position, ., x, =, this, ., r, ;,   ,   , this, ., velocity, ., x, *=, -1, ;,   , }, else, if, (, this, ., position, ., y, >, height, -, this, ., r, ), {,   ,   , this, ., position, ., y, =, height, -, this, ., r, ;,   ,   , this, ., velocity, ., y, *=, -1, ;,   , }, else, if, (, this, ., position, ., y, <, this, ., r, ), {,   ,   , this, ., position, ., y, =, this, ., r, ;,   ,   , this, ., velocity, ., y, *=, -1, ;,   , }, }, checkCollision, (, other, ), {,   , \n// Get distances between the balls components\n,   , let, distanceVect, =, p5, ., Vector, ., sub, (, other, ., position, ,, this, ., position, ), ;,   , \n// Calculate magnitude of the vector separating the balls\n,   , let, distanceVectMag, =, distanceVect, ., mag, (, ), ;,   , \n// Minimum distance before they are touching\n,   , let, minDistance, =, this, ., r, +, other, ., r, ;,   , if, (, distanceVectMag, <, minDistance, ), {,   ,   , let, distanceCorrection, =, (, minDistance, -, distanceVectMag, ), /, 2.0, ;,   ,   , let, d, =, distanceVect, ., copy, (, ), ;,   ,   , let, correctionVector, =, d, ., normalize, (, ), ., mult, (, distanceCorrection, ), ;,   ,   , other, ., position, ., add, (, correctionVector, ), ;,   ,   , this, ., position, ., sub, (, correctionVector, ), ;,   ,   , \n// get angle of distanceVect\n,   ,   , let, theta, =, distanceVect, ., heading, (, ), ;,   ,   , \n// precalculate trig values\n,   ,   , let, sine, =, sin, (, theta, ), ;,   ,   , let, cosine, =, cos, (, theta, ), ;,   ,   , \n/* bTemp will hold rotated ball this.positions. You \n,   ,   ,   , \n just need to worry about bTemp[1] this.position*/\n,   ,   , let, bTemp, =, [, new, p5, ., Vector, (, ), ,, new, p5, ., Vector, (, )], ;,   ,   , \n/* this ball's this.position is relative to the other\n,   ,   ,   , \n so you can use the vector between them (bVect) as the \n,   ,   ,   , \n reference point in the rotation expressions.\n,   ,   ,   , \n bTemp[0].this.position.x and bTemp[0].this.position.y will initialize\n,   ,   ,   , \n automatically to 0.0, which is what you want\n,   ,   ,   , \n since b[1] will rotate around b[0] */\n,   ,   , bTemp, [, 1, ], ., x, =, cosine, *, distanceVect, ., x, +, sine, *, distanceVect, ., y, ;,   ,   , bTemp, [, 1, ], ., y, =, cosine, *, distanceVect, ., y, -, sine, *, distanceVect, ., x, ;,   ,   , \n// rotate Temporary velocities\n,   ,   , let, vTemp, =, [, new, p5, ., Vector, (, ), ,, new, p5, ., Vector, (, )], ;,   ,   , vTemp, [, 0, ], ., x, =, cosine, *, this, ., velocity, ., x, +, sine, *, this, ., velocity, ., y, ;,   ,   , vTemp, [, 0, ], ., y, =, cosine, *, this, ., velocity, ., y, -, sine, *, this, ., velocity, ., x, ;,   ,   , vTemp, [, 1, ], ., x, =, cosine, *, other, ., velocity, ., x, +, sine, *, other, ., velocity, ., y, ;,   ,   , vTemp, [, 1, ], ., y, =, cosine, *, other, ., velocity, ., y, -, sine, *, other, ., velocity, ., x, ;,   ,   , \n/* Now that velocities are rotated, you can use 1D\n,   ,   ,   , \n conservation of momentum equations to calculate \n,   ,   ,   , \n the final this.velocity along the x-axis. */\n,   ,   , let, vFinal, =, [, new, p5, ., Vector, (, ), ,, new, p5, ., Vector, (, )], ;,   ,   , \n// final rotated this.velocity for b[0]\n,   ,   , vFinal, [, 0, ], ., x, =,   ,   ,   , ((, this, ., m, -, other, ., m, ), *, vTemp, [, 0, ], ., x, +, 2, *, other, ., m, *, vTemp, [, 1, ], ., x, ), /,   ,   ,   , (, this, ., m, +, other, ., m, ), ;,   ,   , vFinal, [, 0, ], ., y, =, vTemp, [, 0, ], ., y, ;,   ,   , \n// final rotated this.velocity for b[0]\n,   ,   , vFinal, [, 1, ], ., x, =,   ,   ,   , ((, other, ., m, -, this, ., m, ), *, vTemp, [, 1, ], ., x, +, 2, *, this, ., m, *, vTemp, [, 0, ], ., x, ), /,   ,   ,   , (, this, ., m, +, other, ., m, ), ;,   ,   , vFinal, [, 1, ], ., y, =, vTemp, [, 1, ], ., y, ;,   ,   , \n// hack to avoid clumping\n,   ,   , bTemp, [, 0, ], ., x, +=, vFinal, [, 0, ], ., x, ;,   ,   , bTemp, [, 1, ], ., x, +=, vFinal, [, 1, ], ., x, ;,   ,   , \n/* Rotate ball this.positions and velocities back\n,   ,   ,   , \n Reverse signs in trig expressions to rotate \n,   ,   ,   , \n in the opposite direction */\n,   ,   , \n// rotate balls\n,   ,   , let, bFinal, =, [, new, p5, ., Vector, (, ), ,, new, p5, ., Vector, (, )], ;,   ,   , bFinal, [, 0, ], ., x, =, cosine, *, bTemp, [, 0, ], ., x, -, sine, *, bTemp, [, 0, ], ., y, ;,   ,   , bFinal, [, 0, ], ., y, =, cosine, *, bTemp, [, 0, ], ., y, +, sine, *, bTemp, [, 0, ], ., x, ;,   ,   , bFinal, [, 1, ], ., x, =, cosine, *, bTemp, [, 1, ], ., x, -, sine, *, bTemp, [, 1, ], ., y, ;,   ,   , bFinal, [, 1, ], ., y, =, cosine, *, bTemp, [, 1, ], ., y, +, sine, *, bTemp, [, 1, ], ., x, ;,   ,   , \n// update balls to screen this.position\n,   ,   , other, ., position, ., x, =, this, ., position, ., x, +, bFinal, [, 1, ], ., x, ;,   ,   , other, ., position, ., y, =, this, ., position, ., y, +, bFinal, [, 1, ], ., y, ;,   ,   , this, ., position, ., add, (, bFinal, [, 0, ]), ;,   ,   , \n// update velocities\n,   ,   , this, ., velocity, ., x, =, cosine, *, vFinal, [, 0, ], ., x, -, sine, *, vFinal, [, 0, ], ., y, ;,   ,   , this, ., velocity, ., y, =, cosine, *, vFinal, [, 0, ], ., y, +, sine, *, vFinal, [, 0, ], ., x, ;,   ,   , other, ., velocity, ., x, =, cosine, *, vFinal, [, 1, ], ., x, -, sine, *, vFinal, [, 1, ], ., y, ;,   ,   , other, ., velocity, ., y, =, cosine, *, vFinal, [, 1, ], ., y, +, sine, *, vFinal, [, 1, ], ., x, ;,   , }, }, display, (, ), {,   , noStroke, (, ), ;,   , fill, (, 204, ), ;,   , ellipse, (, this, ., position, ., x, ,, this, ., position, ., y, ,, this, ., r, *, 2, ,, this, ., r, *, 2, ), ;, }, }, let, balls, =, [, new, Ball, (, 100, ,, 400, ,, 20, ), ,, new, Ball, (, 700, ,, 400, ,, 80, )], ;, console, ., log, (, balls, ), ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, for, (, let, i, =, 0, ;, i, <, balls, ., length, ;, i, ++, ), {,   , let, b, =, balls, [, i, ], ;,   , b, ., update, (, ), ;,   , b, ., display, (, ), ;,   , b, ., checkBoundaryCollision, (, ), ;,   , balls, [, 0, ], ., checkCollision, (, balls, [, 1, ]), ;, }, }"
    }]
}, {
    "groupName": "Instance Mode",
    "examples": [{
        "name": "Instantiation",
        "description": "Create a p5 instance, which keeps all variables out of the global scope of your page.",
        "code": " let, sketch, =, function, (, p, ), {, let, x, =, 100, ;, let, y, =, 100, ;, p, ., setup, =, function, (, ), {,   , p, ., createCanvas, (, 700, ,, 410, ), ;, }, ;, p, ., draw, =, function, (, ), {,   , p, ., background, (, 0, ), ;,   , p, ., fill, (, 255, ), ;,   , p, ., rect, (, x, ,, y, ,, 50, ,, 50, ), ;, }, ;, }, ;, let, myp5, =, new, p5, (, sketch, ), ;, \n// Compare to \"global mode\"\n, \n// let x = 100;\n, \n// let y = 100;\n, \n// function setup() {\n, \n//   createCanvas(200,200);\n, \n// }\n, \n// function draw() {\n, \n//   background(0);\n, \n//   fill(255);\n, \n//   ellipse(x,y,50,50);\n, \n// }\n"
    }, {
        "name": "Instance Container",
        "description": "Optionally, you can specify a default container for the canvas and any other elements to append to with a second argument. You can give the ID of an element in your html, or an html node itself. * Here are three different options for selecting a container DOM element. All DOM elements (canvas, buttons, divs, etc) created by p5 will be attached to the DOM element specified as the second argument to the p5() call.",
        "code": " \n<!-- pass in the ID of the container element -->\n, <!, DOCTYPE,  , html, >, <, head, >,   , <, script,  , src, =, 'p5.js', >, </, script, >, </, head, >, <, body, >,   , <, div,  , id, =, 'container', >, </, div, >,   , <, script, >, let, sketch, =, function, (, p, ), {,   , p, ., setup, =, function, (, ), {,   ,   , p, ., createCanvas, (, 100, ,, 100, ), ;,   ,   , p, ., background, (, 0, ), ;,   , }, }, ;, new, p5, (, sketch, ,, 'container', ), ;, </, script, >, </, body, >, </, html, >, \n<!-- pass in a pointer to the container element -->\n, <!, DOCTYPE,  , html, >, <, head, >,   , <, script,  , src, =, 'p5.js', >, </, script, >, </, head, >, <, body, >,   , <, div,  , id, =, 'container', >, </, div, >,   , <, script, >, let, sketch, =, function, (, p, ), {,   , p, ., setup, =, function, (, ), {,   ,   , p, ., createCanvas, (, 100, ,, 100, ), ;,   ,   , p, ., background, (, 0, ), ;,   , }, }, ;, new, p5, (, sketch, ,, window, ., document, ., getElementById, (, 'container', )), ;, </, script, >, </, body, >, </, html, >, \n<!-- create an element, attach it to the body,\n, \nand pass in a pointer -->\n, <!, DOCTYPE,  , html, >, <, head, >,   , <, script,  , src, =, 'p5.js', >, </, script, >, </, head, >, <, body, >,   , <, script, >, let, sketch, =, function, (, p, ), {,   , p, ., setup, =, function, (, ), {,   ,   , p, ., createCanvas, (, 100, ,, 100, ), ;,   ,   , p, ., background, (, 0, ), ;,   , }, }, ;, let, node, =, document, ., createElement, (, 'div', ), ;, window, ., document, ., getElementsByTagName, (, 'body', ), [, 0, ], ., appendChild, (, node, ), ;, new, p5, (, sketch, ,, node, ), ;, </, script, >, </, body, >, </, html, >, \n<!-- create an element, pass in a pointer,\n, \nand attach it to the body -->\n, <!, DOCTYPE,  , html, >, <, head, >,   , <, script,  , src, =, 'p5.js', >, </, script, >, </, head, >, <, body, >,   , <, script, >, let, sketch, =, function, (, p, ), {,   , p, ., setup, =, function, (, ), {,   ,   , p, ., createCanvas, (, 100, ,, 100, ), ;,   ,   , p, ., background, (, 0, ), ;,   , }, }, ;, let, node, =, document, ., createElement, (, 'div', ), ;, new, p5, (, sketch, ,, node, ), ;, window, ., document, ., getElementsByTagName, (, 'body', ), [, 0, ], ., appendChild, (, node, ), ;, </, script, >, </, body, >, </, html, >"
    }]
}, {
    "groupName": "DOM",
    "examples": [{
        "name": "Input and Button",
        "description": "Input text and click the button to see it affect the the canvas.",
        "code": ""
    }, {
        "name": "Slider",
        "description": "Move the sliders to control the R, G, B values of the background.",
        "code": " let, rSlider, ,, gSlider, ,, bSlider, ;, function, setup, (, ), {, \n// create canvas\n, createCanvas, (, 710, ,, 400, ), ;, textSize, (, 15, ), ;, noStroke, (, ), ;, \n// create sliders\n, rSlider, =, createSlider, (, 0, ,, 255, ,, 100, ), ;, rSlider, ., position, (, 20, ,, 20, ), ;, gSlider, =, createSlider, (, 0, ,, 255, ,, 0, ), ;, gSlider, ., position, (, 20, ,, 50, ), ;, bSlider, =, createSlider, (, 0, ,, 255, ,, 255, ), ;, bSlider, ., position, (, 20, ,, 80, ), ;, }, function, draw, (, ), {, const, r, =, rSlider, ., value, (, ), ;, const, g, =, gSlider, ., value, (, ), ;, const, b, =, bSlider, ., value, (, ), ;, background, (, r, ,, g, ,, b, ), ;, text, (, 'red', ,, rSlider, ., x, *, 2, +, rSlider, ., width, ,, 35, ), ;, text, (, 'green', ,, gSlider, ., x, *, 2, +, gSlider, ., width, ,, 65, ), ;, text, (, 'blue', ,, bSlider, ., x, *, 2, +, bSlider, ., width, ,, 95, ), ;, }"
    }, {
        "name": "Modifying the DOM",
        "description": "Create DOM elements and modify their properties every time draw() is called.",
        "code": ""
    }, {
        "name": "Video",
        "description": "Load a video with multiple formats and toggle between playing and paused with a button press.",
        "code": " let, playing, =, false, ;, let, fingers, ;, let, button, ;, function, setup, (, ), {, noCanvas, (, ), ;, \n// specify multiple formats for different browsers\n, fingers, =, createVideo, ([, 'assets/fingers.mov', ,, 'assets/fingers.webm', ]), ;, button, =, createButton, (, 'play', ), ;, button, ., mousePressed, (, toggleVid, ), ;, \n// attach button listener\n, }, \n// plays or pauses the video depending on current state\n, function, toggleVid, (, ), {, if, (, playing, ), {,   , fingers, ., pause, (, ), ;,   , button, ., html, (, 'play', ), ;, }, else, {,   , fingers, ., loop, (, ), ;,   , button, ., html, (, 'pause', ), ;, }, playing, =, !, playing, ;, }"
    }, {
        "name": "Video Canvas",
        "description": "Load a video with multiple formats and draw it to the canvas. To run this example locally, you will need a running local server.",
        "code": ""
    }, {
        "name": "Video Pixels",
        "description": "Load a video, manipulate its pixels and draw to canvas. To run this example locally, you will need a running local server.",
        "code": " let, fingers, ;, function, setup, (, ), {, createCanvas, (, 320, ,, 240, ), ;, \n// specify multiple formats for different browsers\n, fingers, =, createVideo, ([, 'assets/fingers.mov', ,, 'assets/fingers.webm', ]), ;, fingers, ., loop, (, ), ;, fingers, ., hide, (, ), ;, noStroke, (, ), ;, fill, (, 0, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, fingers, ., loadPixels, (, ), ;, const, stepSize, =, round, (, constrain, (, mouseX, /, 8, ,, 6, ,, 32, )), ;, for, (, let, y, =, 0, ;, y, <, height, ;, y, +=, stepSize, ), {,   , for, (, let, x, =, 0, ;, x, <, width, ;, x, +=, stepSize, ), {,   ,   , const, i, =, y, *, width, +, x, ;,   ,   , const, darkness, =, (, 255, -, fingers, ., pixels, [, i, *, 4, ]), /, 255, ;,   ,   , const, radius, =, stepSize, *, darkness, ;,   ,   , ellipse, (, x, ,, y, ,, radius, ,, radius, ), ;,   , }, }, }"
    }, {
        "name": "Video Capture",
        "description": "Capture video from the webcam and display on the canvas as well with invert filter. Note that by default the capture feed shows up, too. You can hide the feed by uncommenting the capture.hide() line.",
        "code": " let, capture, ;, function, setup, (, ), {, createCanvas, (, 390, ,, 240, ), ;, capture, =, createCapture, (, VIDEO, ), ;, capture, ., size, (, 320, ,, 240, ), ;, \n//capture.hide();\n, }, function, draw, (, ), {, background, (, 255, ), ;, image, (, capture, ,, 0, ,, 0, ,, 320, ,, 240, ), ;, filter, (, INVERT, ), ;, }"
    }, {
        "name": "Drop",
        "description": "Drag an image file onto the canvas to see it displayed.",
        "code": " function, setup, (, ), {, \n// create canvas\n, const, c, =, createCanvas, (, 710, ,, 400, ), ;, background, (, 100, ), ;, \n// Add an event for when a file is dropped onto the canvas\n, c, ., drop, (, gotFile, ), ;, }, function, draw, (, ), {, fill, (, 255, ), ;, noStroke, (, ), ;, textSize, (, 24, ), ;, textAlign, (, CENTER, ), ;, text, (, 'Drag an image file onto the canvas.', ,, width, /, 2, ,, height, /, 2, ), ;, noLoop, (, ), ;, }, function, gotFile, (, file, ), {, \n// If it's an image file\n, if, (, file, ., type, ===, 'image', ), {,   , \n// Create an image DOM element but don't show it\n,   , const, img, =, createImg, (, file, ., data, ), ., hide, (, ), ;,   , \n// Draw the image onto the canvas\n,   , image, (, img, ,, 0, ,, 0, ,, width, ,, height, ), ;, }, else, {,   , console, ., log, (, 'Not an image file!', ), ;, }, }"
    }, {
        "name": "DOM Form Elements",
        "description": "contributed by Prof WM Harris, How to use p5 DOM form elements to create a slider, button, checkbox, radio group, select menu, and entry field.\nFunctions are created that include: the canvas setup, checkbox creation with text, text box with text that projects typed text onto canvas, slider with button, three selections which project a rectangle in different areas on the canvas depending on selection, and a drop down menu with font change.",
        "code": " \n/* global variables */\n, \n//p5 DOM form elements\n, let, slider1, ;, let, button1, ;, let, checkbox1, ;, let, radio1, ;, let, select1, ;, let, entry1, ;, function, setup, (, ), {, createCanvas, (, 200, ,, 200, ), ;, background, (, \"beige\", ), ;, checkbox1, =, createCheckbox, (, \"Check me\", ), ;, createP, (, ), ;, \n//spacer with <p> tag\n, createSpan, (, \"What's your name? \", ), ;, \n//label for entry1\n, \n// createInput([value], [type])\n, \n// type: \"text\" (default), \"number\",\n, \n// \"date\", \"password\", \"email\", etc.\n, entry1, =, createInput, (, ), ;, \n//If text in the entry field changes, call\n, \n//the entryCallback function.\n, entry1, ., changed, (, entryCallback, ), ;, createP, (, ), ;, \n//spacer with <p> tag\n, \n//createSlider(min, max, [value], [step])\n, slider1, =, createSlider, (, 10, ,, 200, ), ;, button1, =, createButton, (, \"Press me\", ), ;, \n//, \"pressed\");\n, \n//Assign callback fcn for button1\n, \n//when user clicks mouse on it\n, button1, ., mouseClicked, (, button1Clicked, ), ;, createP, (, ), ;, \n//spacer with <p> tag\n, radio1, =, createRadio, (, ), ;, \n//.option([value], [contentLabel])\n, \n//If 1 param, it's both content AND\n, \n//value. Values treated as strings.\n, radio1, ., option, (, 1, ,, \"cranberries\", ), ;, radio1, ., option, (, 2, ,, \"almonds\", ), ;, radio1, ., option, (, 3, ,, \"gouda\", ), ;, radio1, ., value, (, \"1\", ), ;, \n//set init value\n, createP, (, ), ;, \n//spacer with <p> tag\n, select1, =, createSelect, (, ), ;, \n//.option([contentValue],[value])\n, \n//If 1 param, it's both content AND\n, \n//value. Values treated as strings.\n, select1, ., option, (, \"Sans-serif\", ), ;, select1, ., option, (, \"Serif\", ), ;, select1, ., option, (, \"Fantasy\", ), ;, \n//If changed, call select1Changed \n, select1, ., changed, (, select1Changed, ), ;, }, function, draw, (, ), {, \n//get value from slider 1\n, let, gray, =, slider1, ., value, (, ), ;, fill, (, gray, ), ;, \n//If mouse in corner, turn on checkbox1\n, if, ((, mouseX, <, width, /, 3, ), &&,   , (, mouseY, <, height, /, 3, )), {,   , checkbox1, ., checked, (, true, ), ;, }, \n//Is checkbox1 checked? Say so.\n, if, (, checkbox1, ., checked, (, )), {,   , text, (, \"CHECKED\", ,, 20, ,, 40, ), ;, }, switch, (, radio1, ., value, (, )), {,   , \n//radio value is always a string\n,   , case, \"1\", :,   ,   , rect, (, 0, ,, 0, ,, width, ,, 50, ), ;,   ,   , break, ;,   , case, \"2\", :,   ,   , rect, (, 0, ,, 70, ,, width, ,, 50, ), ;,   ,   , break, ;,   , case, \"3\", :,   ,   , rect, (, 0, ,, 140, ,, width, ,, 50, ), ;,   ,   , break, ;, }, }, \n//callback fcn for button1\n, function, button1Clicked, (, ), {, \n//reset slider value to 200\n, slider1, ., value, (, 200, ), ;, }, \n//callback fcn for select1\n, function, select1Changed, (, ), {, switch, (, select1, ., value, (, )), {,   , case, \"Sans-serif\", :,   ,   , textFont, (, \"sans-serif\", ), ;,   ,   , break, ;,   , case, \"Serif\", :,   ,   , textFont, (, \"serif\", ), ;,   ,   , break, ;,   , case, \"Fantasy\", :,   ,   , textFont, (, \"fantasy\", ), ;,   ,   , break, ;, }, }, \n//callback function for entry1\n, function, entryCallback, (, ), {, for, (, let, i, =, 0, ;, i, <, 25, ;, i, ++, ), {,   , text, (, entry1, ., value, (, ), ,, random, (, width, ), ,,   ,   ,   ,   , random, (, height, )), ;, }, }, function, mouseClicked, (, ), {, console, ., log, (, \"button1?\", ,, button1, ., value, (, )), ;, console, ., log, (, \"checkbox1?\", ,, checkbox1, ., value, (, )), ;, \n//Update .value of either? No visible change\n, \n//to a button or checkbox\n, checkbox1, ., value, (, \"Check again\", ), ;, button1, ., value, (, \"clicked?\", ), ;, }, function, keyTyped, (, ), {, switch, (, key, ), {,   , case, \"r\", :,   ,   , \n//move slider1 value to 100\n,   ,   , slider1, ., value, (, 100, ), ;,   ,   , break, ;, }, }"
    }]
}, {
    "groupName": "Drawing",
    "examples": [{
        "name": "Continuous Lines",
        "description": "Click and drag the mouse to draw a line.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 102, ), ;, }, function, draw, (, ), {, stroke, (, 255, ), ;, if, (, mouseIsPressed, ===, true, ), {,   , line, (, mouseX, ,, mouseY, ,, pmouseX, ,, pmouseY, ), ;, }, }"
    }, {
        "name": "Patterns",
        "description": "Move the cursor over the image to draw with a software tool which responds to the speed of the mouse.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 102, ), ;, }, function, draw, (, ), {, \n// Call the variableEllipse() method and send it the\n, \n// parameters for the current mouse position\n, \n// and the previous mouse position\n, variableEllipse, (, mouseX, ,, mouseY, ,, pmouseX, ,, pmouseY, ), ;, }, \n// The simple method variableEllipse() was created specifically\n, \n// for this program. It calculates the speed of the mouse\n, \n// and draws a small ellipse if the mouse is moving slowly\n, \n// and draws a large ellipse if the mouse is moving quickly\n, function, variableEllipse, (, x, , , y, , , px, , , py, ), {, let, speed, =, abs, (, x, -, px, ), +, abs, (, y, -, py, ), ;, stroke, (, speed, ), ;, ellipse, (, x, ,, y, ,, speed, ,, speed, ), ;, }"
    }, {
        "name": "Pulses",
        "description": "Software drawing instruments can follow a rhythm or abide by rules independent of drawn gestures. This is a form of collaborative drawing in which the draftsperson controls some aspects of the image and the software controls others.",
        "code": " let, angle, =, 0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 102, ), ;, noStroke, (, ), ;, fill, (, 0, ,, 102, ), ;, }, function, draw, (, ), {, \n// Draw only when mouse is pressed\n, if, (, mouseIsPressed, ===, true, ), {,   , angle, +=, 5, ;,   , let, val, =, cos, (, radians, (, angle, )), *, 12.0, ;,   , for, (, let, a, =, 0, ;, a, <, 360, ;, a, +=, 75, ), {,   ,   , let, xoff, =, cos, (, radians, (, a, )), *, val, ;,   ,   , let, yoff, =, sin, (, radians, (, a, )), *, val, ;,   ,   , fill, (, 0, ), ;,   ,   , ellipse, (, mouseX, +, xoff, ,, mouseY, +, yoff, ,, val, ,, val, ), ;,   , },   , fill, (, 255, ), ;,   , ellipse, (, mouseX, ,, mouseY, ,, 2, ,, 2, ), ;, }, }"
    }]
}, {
    "groupName": "Transform",
    "examples": [{
        "name": "Translate",
        "description": "The translate() function allows objects to be moved to any location within the window. The first parameter sets the x-axis offset and the second parameter sets the y-axis offset. This example shows how transforms accumulate.",
        "code": " let, x, =, 0, ;, let, y, =, 0, ;, let, dim, =, 80.0, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 102, ), ;, \n// Animate by increasing our x value\n, x, =, x, +, 0.8, ;, \n// If the shape goes off the canvas, reset the position\n, if, (, x, >, width, +, dim, ), {,   , x, =, -, dim, ;, }, \n// Even though our rect command draws the shape with its\n, \n// center at the origin, translate moves it to the new\n, \n// x and y position\n, translate, (, x, ,, height, /, 2, -, dim, /, 2, ), ;, fill, (, 255, ), ;, rect, (, -, dim, /, 2, ,, -, dim, /, 2, ,, dim, ,, dim, ), ;, \n// Transforms accumulate. Notice how this rect moves\n, \n// twice as fast as the other, but it has the same\n, \n// parameter for the x-axis value\n, translate, (, x, ,, dim, ), ;, fill, (, 0, ), ;, rect, (, -, dim, /, 2, ,, -, dim, /, 2, ,, dim, ,, dim, ), ;, }"
    }, {
        "name": "Scale",
        "description": "Paramenters for the scale() function are values specified as decimal percentages. For example, the method call scale(2.0) will increase the dimension of the shape by 200 percent. Objects always scale from the origin. This example shows how transforms accumulate and also how scale and translate interact depending on their order.",
        "code": ""
    }, {
        "name": "Rotate",
        "description": "Rotating a square around the Z axis. To get the results you expect, send the rotate function angle parameters that are values between 0 and PI*2 (TWO_PI which is roughly 6.28). If you prefer to think about angles as degrees (0-360), you can use the radians() method to convert your values. For example: rotate(radians(90)) is identical to the statement rotate(PI/2). In this example, every even numbered second a jitter is added to the rotation. During odd seconds, rotation moves CW and CCW at the speed determined by the last jitter value.",
        "code": " let, angle, =, 0.0, ;, let, jitter, =, 0.0, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, fill, (, 255, ), ;, \n//Draw the rectangle from the center and it will also be the\n, \n//rotate around that center\n, rectMode, (, CENTER, ), ;, }, function, draw, (, ), {, background, (, 51, ), ;, \n// during even-numbered seconds (0, 2, 4, 6...) add jitter to\n, \n// the rotation\n, if, (, second, (, ), %, 2, ===, 0, ), {,   , jitter, =, random, (, -0.1, ,, 0.1, ), ;, }, \n//increase the angle value using the most recent jitter value\n, angle, =, angle, +, jitter, ;, \n//use cosine to get a smooth CW and CCW motion when not jittering\n, let, c, =, cos, (, angle, ), ;, \n//move the shape to the center of the canvas\n, translate, (, width, /, 2, ,, height, /, 2, ), ;, \n//apply the final rotation\n, rotate, (, c, ), ;, rect, (, 0, ,, 0, ,, 180, ,, 180, ), ;, }"
    }, {
        "name": "Arm",
        "description": "This example uses transform matrices to create an arm. The angle of each segment is controlled with the mouseX and mouseY position. The transformations applied to the first segment are also applied to the second segment because they are inside the same push() and pop() matrix group.",
        "code": " let, x, ,, y, ;, let, angle1, =, 0.0, ;, let, angle2, =, 0.0, ;, let, segLength, =, 100, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, strokeWeight, (, 30, ), ;, \n//Stroke with a semi-transparent white\n, stroke, (, 255, ,, 160, ), ;, \n//Position the \"shoulder\" of the arm in the center of the canvas\n, x, =, width, *, 0.5, ;, y, =, height, *, 0.5, ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n//Change the angle of the segments according to the mouse positions\n, angle1, =, (, mouseX, /, float, (, width, ), -, 0.5, ), *, -, TWO_PI, ;, angle2, =, (, mouseY, /, float, (, height, ), -, 0.5, ), *, PI, ;, \n//use push and pop to \"contain\" the transforms. Note that\n, \n// even though we draw the segments using a custom function,\n, \n// the transforms still accumulate\n, push, (, ), ;, segment, (, x, ,, y, ,, angle1, ), ;, segment, (, segLength, ,, 0, ,, angle2, ), ;, pop, (, ), ;, }, \n//a custom function for drawing segments\n, function, segment, (, x, , , y, , , a, ), {, translate, (, x, ,, y, ), ;, rotate, (, a, ), ;, line, (, 0, ,, 0, ,, segLength, ,, 0, ), ;, }"
    }]
}, {
    "groupName": "Typography",
    "examples": [{
        "name": "Letters",
        "description": "Letters can be drawn to the screen by loading a font, setting its characteristics and then drawing the letters. This example uses a for loop and unicode reference numbers to automatically fill the canvas with characters in a grid. Vowels are selected and given a specific fill color.",
        "code": ""
    }, {
        "name": "Words",
        "description": "The text() function is used for writing words to the screen. The words can be aligned left, center, or right with the textAlign() function, and like with shapes, words can be colored with fill().",
        "code": ""
    }, {
        "name": "Text Rotation",
        "description": "Draws letters to the screen and rotates them at different angles.\n\nThis example is ported from the Text Rotation example on the Processing website",
        "code": " let, font, ,, fontsize, =, 32, ;, let, angleRotate, =, 0.0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, background, (, 0, ), ;, \n// Ensure the .ttf or .otf font stored in the assets directory\n, \n// is loaded before setup() and draw() are called\n, font, =, loadFont, (, 'assets/SourceSansPro-Regular.otf', ), ;, \n// Set text characteristics\n, textFont, (, font, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, strokeWeight, (, 1, ), ;, stroke, (, 153, ), ;, push, (, ), ;, let, angle1, =, radians, (, 45, ), ;, translate, (, 100, ,, 180, ), ;, rotate, (, angle1, ), ;, \n// Draw the letter to the screen\n, text, (, \"45 DEGREES\", ,, 0, ,, 0, ), ;, line, (, 0, ,, 0, ,, 150, ,, 0, ), ;, pop, (, ), ;, push, (, ), ;, let, angle2, =, radians, (, 270, ), ;, translate, (, 200, ,, 180, ), ;, rotate, (, angle2, ), ;, \n// Draw the letter to the screen\n, text, (, \"270 DEGREES\", ,, 0, ,, 0, ), ;, line, (, 0, ,, 0, ,, 150, ,, 0, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, 440, ,, 180, ), ;, rotate, (, radians, (, angleRotate, )), ;, text, (, int, (, angleRotate, ), %, 360, +, \" DEGREES \", ,, 0, ,, 0, ), ;, line, (, 0, ,, 0, ,, 150, ,, 0, ), ;, pop, (, ), ;, angleRotate, +=, 0.25, ;, stroke, (, 255, ,, 0, ,, 0, ), ;, strokeWeight, (, 4, ), ;, point, (, 100, ,, 180, ), ;, point, (, 200, ,, 180, ), ;, point, (, 440, ,, 180, ), ;, }"
    }]
}, {
    "groupName": "3D",
    "examples": [{
        "name": "Geometries",
        "description": "There are six 3D primitives in p5 now.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 250, ), ;, translate, (, -240, ,, -100, ,, 0, ), ;, normalMaterial, (, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, plane, (, 70, ), ;, pop, (, ), ;, translate, (, 240, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, box, (, 70, ,, 70, ,, 70, ), ;, pop, (, ), ;, translate, (, 240, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, cylinder, (, 70, ,, 70, ), ;, pop, (, ), ;, translate, (, -240, *, 2, ,, 200, ,, 0, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, cone, (, 70, ,, 70, ), ;, pop, (, ), ;, translate, (, 240, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, torus, (, 70, ,, 20, ), ;, pop, (, ), ;, translate, (, 240, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, sphere, (, 70, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Sine Cosine in 3D",
        "description": "Sine, cosine and push / pop could be applied in 3D as well.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 250, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, for, (, let, j, =, 0, ;, j, <, 5, ;, j, ++, ), {,   , push, (, ), ;,   , for, (, let, i, =, 0, ;, i, <, 80, ;, i, ++, ), {,   ,   , translate, (,   ,   ,   , sin, (, frameCount, *, 0.001, +, j, ), *, 100, ,,   ,   ,   , sin, (, frameCount, *, 0.001, +, j, ), *, 100, ,,   ,   ,   , i, *, 0.1,   ,   , ), ;,   ,   , rotateZ, (, frameCount, *, 0.002, ), ;,   ,   , push, (, ), ;,   ,   , sphere, (, 8, ,, 6, ,, 4, ), ;,   ,   , pop, (, ), ;,   , },   , pop, (, ), ;, }, }"
    }, {
        "name": "Multiple Lights",
        "description": "All types of lights could be used in one sketch.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, locX, =, mouseX, -, height, /, 2, ;, let, locY, =, mouseY, -, width, /, 2, ;, ambientLight, (, 50, ), ;, directionalLight, (, 255, ,, 0, ,, 0, ,, 0.25, ,, 0.25, ,, 0, ), ;, pointLight, (, 0, ,, 0, ,, 255, ,, locX, ,, locY, ,, 250, ), ;, push, (, ), ;, translate, (, -, width, /, 4, ,, 0, ,, 0, ), ;, rotateZ, (, frameCount, *, 0.02, ), ;, rotateX, (, frameCount, *, 0.02, ), ;, specularMaterial, (, 250, ), ;, box, (, 100, ,, 100, ,, 100, ), ;, pop, (, ), ;, translate, (, width, /, 4, ,, 0, ,, 0, ), ;, ambientMaterial, (, 250, ), ;, sphere, (, 120, ,, 64, ), ;, }"
    }, {
        "name": "Materials",
        "description": "There are five types of materials supported. They respond to light differently. Move your mouse to change the light position.",
        "code": " let, img, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, img, =, loadImage, (, 'assets/cat.jpg', ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, let, locX, =, mouseX, -, height, /, 2, ;, let, locY, =, mouseY, -, width, /, 2, ;, ambientLight, (, 60, ,, 60, ,, 60, ), ;, pointLight, (, 255, ,, 255, ,, 255, ,, locX, ,, locY, ,, 100, ), ;, push, (, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, texture, (, img, ), ;, box, (, 80, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, -, width, /, 4, ,, -, height, /, 4, ,, 0, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, fill, (, 250, ,, 0, ,, 0, ), ;, torus, (, 80, ,, 20, ,, 64, ,, 64, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, /, 4, ,, -, height, /, 4, ,, 0, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, normalMaterial, (, ), ;, torus, (, 80, ,, 20, ,, 64, ,, 64, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, -, width, /, 4, ,, height, /, 4, ,, 0, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, ambientMaterial, (, 250, ), ;, torus, (, 80, ,, 20, ,, 64, ,, 64, ), ;, pop, (, ), ;, push, (, ), ;, translate, (, width, /, 4, ,, height, /, 4, ,, 0, ), ;, rotateZ, (, frameCount, *, 0.01, ), ;, rotateX, (, frameCount, *, 0.01, ), ;, rotateY, (, frameCount, *, 0.01, ), ;, specularMaterial, (, 250, ), ;, torus, (, 80, ,, 20, ,, 64, ,, 64, ), ;, pop, (, ), ;, }"
    }, {
        "name": "Textures",
        "description": "Images and videos are supported for texture.",
        "code": " \n// video source: https://vimeo.com/90312869\n, let, img, ;, let, vid, ;, let, theta, =, 0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, img, =, loadImage, (, 'assets/cat.jpg', ), ;, vid, =, createVideo, ([, 'assets/360video_256crop_v2.mp4', ]), ;, vid, ., elt, ., muted, =, true, ;, vid, ., loop, (, ), ;, vid, ., hide, (, ), ;, }, function, draw, (, ), {, background, (, 250, ), ;, translate, (, -220, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, theta, *, mouseX, *, 0.001, ), ;, rotateX, (, theta, *, mouseX, *, 0.001, ), ;, rotateY, (, theta, *, mouseX, *, 0.001, ), ;, \n//pass image as texture\n, texture, (, vid, ), ;, sphere, (, 150, ), ;, pop, (, ), ;, translate, (, 440, ,, 0, ,, 0, ), ;, push, (, ), ;, rotateZ, (, theta, *, 0.1, ), ;, rotateX, (, theta, *, 0.1, ), ;, rotateY, (, theta, *, 0.1, ), ;, texture, (, img, ), ;, box, (, 100, ,, 100, ,, 100, ), ;, pop, (, ), ;, theta, +=, 0.05, ;, }"
    }, {
        "name": "Ray Casting",
        "description": "Original example by Jonathan Watson.\n\nDetecting the position of the mouse in 3D space with ray casting.",
        "code": " const, objects, =, [, ], ;, let, eyeZ, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, eyeZ, =, height, /, 2, /, tan, ((, 30, *, PI, ), /, 180, ), ;, \n// The default distance the camera is away from the origin.\n, objects, ., push, (, new, IntersectPlane, (, 1, ,, 0, ,, 0, ,, -100, ,, 0, ,, 0, )), ;, \n// Left wall\n, objects, ., push, (, new, IntersectPlane, (, 1, ,, 0, ,, 0, ,, 100, ,, 0, ,, 0, )), ;, \n// Right wall\n, objects, ., push, (, new, IntersectPlane, (, 0, ,, 1, ,, 0, ,, 0, ,, -100, ,, 0, )), ;, \n// Bottom wall\n, objects, ., push, (, new, IntersectPlane, (, 0, ,, 1, ,, 0, ,, 0, ,, 100, ,, 0, )), ;, \n// Top wall\n, objects, ., push, (, new, IntersectPlane, (, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, )), ;, \n// Back wall\n, noStroke, (, ), ;, ambientMaterial, (, 250, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// Lights\n, pointLight, (, 255, ,, 255, ,, 255, ,, 0, ,, 0, ,, 400, ), ;, ambientLight, (, 244, ,, 122, ,, 158, ), ;, \n// Left wall\n, push, (, ), ;, translate, (, -100, ,, 0, ,, 200, ), ;, rotateY, ((, 90, *, PI, ), /, 180, ), ;, plane, (, 400, ,, 200, ), ;, pop, (, ), ;, \n// Right wall\n, push, (, ), ;, translate, (, 100, ,, 0, ,, 200, ), ;, rotateY, ((, 90, *, PI, ), /, 180, ), ;, plane, (, 400, ,, 200, ), ;, pop, (, ), ;, \n// Bottom wall\n, push, (, ), ;, translate, (, 0, ,, 100, ,, 200, ), ;, rotateX, ((, 90, *, PI, ), /, 180, ), ;, plane, (, 200, ,, 400, ), ;, pop, (, ), ;, \n// Top wall\n, push, (, ), ;, translate, (, 0, ,, -100, ,, 200, ), ;, rotateX, ((, 90, *, PI, ), /, 180, ), ;, plane, (, 200, ,, 400, ), ;, pop, (, ), ;, plane, (, 200, ,, 200, ), ;, \n// Back wall\n, const, x, =, mouseX, -, width, /, 2, ;, const, y, =, mouseY, -, height, /, 2, ;, const, Q, =, createVector, (, 0, ,, 0, ,, eyeZ, ), ;, \n// A point on the ray and the default position of the camera.\n, const, v, =, createVector, (, x, ,, y, ,, -, eyeZ, ), ;, \n// The direction vector of the ray.\n, let, intersect, ;, \n// The point of intersection between the ray and a plane.\n, let, closestLambda, =, eyeZ, *, 10, ;, \n// The draw distance.\n, for, (, let, x, =, 0, ;, x, <, objects, ., length, ;, x, +=, 1, ), {,   , let, object, =, objects, [, x, ], ;,   , let, lambda, =, object, ., getLambda, (, Q, ,, v, ), ;, \n// The value of lambda where the ray intersects the object\n,   , if, (, lambda, <, closestLambda, &&, lambda, >, 0, ), {,   ,   , \n// Find the position of the intersection of the ray and the object.\n,   ,   , intersect, =, p5, ., Vector, ., add, (, Q, ,, p5, ., Vector, ., mult, (, v, ,, lambda, )), ;,   ,   , closestLambda, =, lambda, ;,   , }, }, \n// Cursor\n, push, (, ), ;, translate, (, intersect, ), ;, fill, (, 237, ,, 34, ,, 93, ), ;, sphere, (, 10, ), ;, pop, (, ), ;, }, \n// Class for a plane that extends to infinity.\n, class, IntersectPlane, {, constructor, (, n1, ,, n2, ,, n3, ,, p1, ,, p2, ,, p3, ), {,   , this, ., normal, =, createVector, (, n1, ,, n2, ,, n3, ), ;, \n// The normal vector of the plane\n,   , this, ., point, =, createVector, (, p1, ,, p2, ,, p3, ), ;, \n// A point on the plane\n,   , this, ., d, =, this, ., point, ., dot, (, this, ., normal, ), ;, }, getLambda, (, Q, ,, v, ), {,   , return, (, -, this, ., d, -, this, ., normal, ., dot, (, Q, )), /, this, ., normal, ., dot, (, v, ), ;, }, }"
    }, {
        "name": "Orbit Control",
        "description": "Orbit control allows you to drag and move around the world.",
        "code": " function, setup, (, ), {, createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 250, ), ;, let, radius, =, width, *, 1.5, ;, \n//drag to move the world.\n, orbitControl, (, ), ;, normalMaterial, (, ), ;, translate, (, 0, ,, 0, ,, -600, ), ;, for, (, let, i, =, 0, ;, i, <=, 12, ;, i, ++, ), {,   , for, (, let, j, =, 0, ;, j, <=, 12, ;, j, ++, ), {,   ,   , push, (, ), ;,   ,   , let, a, =, (, j, /, 12, ), *, PI, ;,   ,   , let, b, =, (, i, /, 12, ), *, PI, ;,   ,   , translate, (,   ,   ,   , sin, (, 2, *, a, ), *, radius, *, sin, (, b, ), ,,   ,   ,   , (, cos, (, b, ), *, radius, ), /, 2, ,,   ,   ,   , cos, (, 2, *, a, ), *, radius, *, sin, (, b, ),   ,   , ), ;,   ,   , if, (, j, %, 2, ===, 0, ), {,   ,   ,   , cone, (, 30, ,, 30, ), ;,   ,   , }, else, {,   ,   ,   , box, (, 30, ,, 30, ,, 30, ), ;,   ,   , },   ,   , pop, (, ), ;,   , }, }, }"
    }, {
        "name": "Basic Shader",
        "description": "This is a basic example showing how to load shaders in p5.js.\nTo learn more about using shaders in p5.js: p5.js Shaders",
        "code": ""
    }, {
        "name": "Shader as a Texture",
        "description": "Shaders can be applied to 2D/3D shapes as textures.\nTo learn more about using shaders in p5.js: p5.js Shaders",
        "code": " \n// this variable will hold our shader object\n, let, theShader, ;, \n// this variable will hold our createGraphics layer\n, let, shaderTexture, ;, let, theta, =, 0, ;, let, x, ;, let, y, ;, let, outsideRadius, =, 200, ;, let, insideRadius, =, 100, ;, function, preload, (, ), {,   , \n// load the shader\n,   , theShader, =, loadShader, (, 'assets/texture.vert', ,, 'assets/texture.frag', ), ;, }, function, setup, (, ), {,   , \n// shaders require WEBGL mode to work\n,   , createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;,   , noStroke, (, ), ;,   , \n// initialize the createGraphics layers\n,   , shaderTexture, =, createGraphics, (, 710, ,, 400, ,, WEBGL, ), ;,   , \n// turn off the createGraphics layers stroke\n,   , shaderTexture, ., noStroke, (, ), ;,   , x, =, -50, ;,   , y, =, 0, ;, }, function, draw, (, ), {,   , \n// instead of just setting the active shader we are passing it to the createGraphics layer\n,   , shaderTexture, ., shader, (, theShader, ), ;,   , \n// here we're using setUniform() to send our uniform values to the shader\n,   , theShader, ., setUniform, (, \"resolution\", ,, [, width, ,, height, ]), ;,   , theShader, ., setUniform, (, \"time\", ,, millis, (, ), /, 1000.0, ), ;,   , theShader, ., setUniform, (, \"mouse\", ,, [, mouseX, ,, map, (, mouseY, ,, 0, ,, height, ,, height, ,, 0, )]), ;,   , \n// passing the shaderTexture layer geometry to render on\n,   , shaderTexture, ., rect, (, 0, ,, 0, ,, width, ,, height, ), ;,   , background, (, 255, ), ;,   , \n// pass the shader as a texture\n,   , texture, (, shaderTexture, ), ;,   , translate, (, -150, ,, 0, ,, 0, ), ;,   , push, (, ), ;,   , rotateZ, (, theta, *, mouseX, *, 0.0001, ), ;,   , rotateX, (, theta, *, mouseX, *, 0.0001, ), ;,   , rotateY, (, theta, *, mouseX, *, 0.0001, ), ;,   , theta, +=, 0.05, ;,   , sphere, (, 125, ), ;,   , pop, (, ), ;,   , \n// passing a fifth parameter to ellipse for smooth edges in 3D\n,   , ellipse, (, 260, ,, 0, ,, 200, ,, 200, ,, 100, ), ;, }"
    }, {
        "name": "Passing Shader Uniforms",
        "description": "Uniforms are the way in which information is passed from p5 to the shader.\nTo learn more about using shaders in p5.js: p5.js Shaders",
        "code": " \n// this variable will hold our shader object\n, let, theShader, ;, function, preload, (, ), {,   , \n// load the shader\n,   , theShader, =, loadShader, (, 'assets/uniforms.vert', ,, 'assets/uniforms.frag', ), ;, }, function, setup, (, ), {,   , \n// shaders require WEBGL mode to work\n,   , createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;,   , noStroke, (, ), ;, }, function, draw, (, ), {,   , \n// shader() sets the active shader with our shader\n,   , shader, (, theShader, ), ;,   , \n// lets send the resolution, mouse, and time to our shader\n,   , \n// before sending mouse + time we modify the data so it's more easily usable by the shader\n,   , theShader, ., setUniform, (, 'resolution', ,, [, width, ,, height, ]), ;,   , theShader, ., setUniform, (, 'mouse', ,, map, (, mouseX, ,, 0, ,, width, ,, 0, ,, 7, )), ;,   , theShader, ., setUniform, (, 'time', ,, frameCount, *, 0.01, ), ;,   , \n// rect gives us some geometry on the screen\n,   , rect, (, 0, ,, 0, ,, width, ,, height, ), ;, }"
    }, {
        "name": "Shader Using Webcam",
        "description": "The webcam can be passed to shaders as a texture.\nTo learn more about using shaders in p5.js: p5.js Shaders",
        "code": " \n// this variable will hold our shader object\n, let, theShader, ;, \n// this variable will hold our webcam video\n, let, cam, ;, function, preload, (, ), {,   , \n// load the shader\n,   , theShader, =, loadShader, (, 'assets/webcam.vert', ,, 'assets/webcam.frag', ), ;, }, function, setup, (, ), {,   , \n// shaders require WEBGL mode to work\n,   , createCanvas, (, 710, ,, 400, ,, WEBGL, ), ;,   , noStroke, (, ), ;,   , cam, =, createCapture, (, VIDEO, ), ;,   , cam, ., size, (, 710, ,, 400, ), ;,   , cam, ., hide, (, ), ;, }, function, draw, (, ), {,   , \n// shader() sets the active shader with our shader\n,   , shader, (, theShader, ), ;,   , \n// passing cam as a texture\n,   , theShader, ., setUniform, (, 'tex0', ,, cam, ), ;,   , \n// rect gives us some geometry on the screen\n,   , rect, (, 0, ,, 0, ,, width, ,, height, ), ;, }"
    }, {
        "name": "Blur using Framebuffer Depth",
        "description": "A shader that uses depth information from a p5.Framebuffer to draw a scene with focal blur.",
        "code": " let, layer, ;, let, blur, ;, function, setup, (, ), {, createCanvas, (, windowWidth, ,, windowHeight, ,, WEBGL, ), ;, layer, =, createFramebuffer, (, ), ;, blur, =, createShader, (, vert, ,, frag, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, \n// Draw a scene\n, layer, ., begin, (, ), ;, background, (, 255, ), ;, ambientLight, (, 100, ), ;, directionalLight, (, 255, ,, 255, ,, 255, ,, -1, ,, 1, ,, -1, ), ;, ambientMaterial, (, 255, ,, 0, ,, 0, ), ;, fill, (, 255, ,, 255, ,, 100, ), ;, specularMaterial, (, 255, ), ;, shininess, (, 150, ), ;, rotateY, (, millis, (, ), *, 0.001, ), ;, for, (, let, i, =, 0, ;, i, <, 5, ;, i, ++, ), {,   , push, (, ), ;,   , translate, ((, i, -2, ), *, 100, ,, 0, ,, 0, ), ;,   , sphere, (, ), ;,   , pop, (, ), ;, }, layer, ., end, (, ), ;, \n// Render the scene with depth of field blur\n, shader, (, blur, ), ;, blur, ., setUniform, (, 'img', ,, layer, ., color, ), ;, blur, ., setUniform, (, 'depth', ,, layer, ., depth, ), ;, rect, (, 0, ,, 0, ,, width, ,, height, ), ;, }, function, windowResized, (, ), {, resizeCanvas, (, windowWidth, ,, windowHeight, ), ;, }, let, vert, =, precision, highp, float, ;, attribute, vec3, aPosition, ;, attribute, vec2, aTexCoord, ;, varying, vec2, vTexCoord, ;, void, main, (, ), {, vec4, positionVec4, =, vec4, (, aPosition, ,, 1.0, ), ;, positionVec4, ., xy, =, positionVec4, ., xy, *, 2.0, -, 1.0, ;, positionVec4, ., y, *=, -1.0, ;, gl_Position, =, positionVec4, ;, vTexCoord, =, aTexCoord, ;, }, ;, let, frag, =, precision, highp, float, ;, varying, vec2, vTexCoord, ;, uniform, sampler2D, img, ;, uniform, sampler2D, depth, ;, float, getBlurriness, (, float, d, ), {, \n// Blur more the farther away we go from the\n, \n// focal point at depth=0.9\n, return, abs, (, d, -, 0.9, ), *, 40, .;, }, float, maxBlurDistance, (, float, blurriness, ), {, return, blurriness, *, 0.01, ;, }, void, main, (, ), {, vec4, color, =, texture2D, (, img, ,, vTexCoord, ), ;, float, samples, =, 1, .;, float, centerDepth, =, texture2D, (, depth, ,, vTexCoord, ), ., r, ;, float, blurriness, =, getBlurriness, (, centerDepth, ), ;, for, (, int, sample, =, 0, ;, sample, <, 20, ;, sample, ++, ), {,   , \n// Sample nearby pixels in a spiral going out from the\n,   , \n// current pixel\n,   , float, angle, =, float, (, sample, ), ;,   , float, distance, =, float, (, sample, ), /, 20, .,   ,   , *, maxBlurDistance, (, blurriness, ), ;,   , vec2, offset, =, vec2, (, cos, (, angle, ), ,, sin, (, angle, )), *, distance, ;,   , \n// How close is the object at the nearby pixel?\n,   , float, sampleDepth, =, texture2D, (, depth, ,, vTexCoord, +, offset, ), ., r, ;,   , \n// How far should its blur reach?\n,   , float, sampleBlurDistance, =,   ,   , maxBlurDistance, (, getBlurriness, (, sampleDepth, )), ;,   , \n// If it's in front of the current pixel, or its blur overlaps\n,   , \n// with the current pixel, add its color to the average\n,   , if, (,   ,   , sampleDepth, >=, centerDepth, ||,   ,   , sampleBlurDistance, >=, distance,   , ), {,   ,   , color, +=, texture2D, (, img, ,, vTexCoord, +, offset, ), ;,   ,   , samples, ++, ;,   , }, }, color, /=, samples, ;, gl_FragColor, =, color, ;, }, ;"
    }]
}, {
    "groupName": "Input",
    "examples": [{
        "name": "Clock",
        "description": "The current time can be read with the second(), minute(), and hour() functions. In this example, sin() and cos() values are used to set the position of the hands.",
        "code": " let, cx, ,, cy, ;, let, secondsRadius, ;, let, minutesRadius, ;, let, hoursRadius, ;, let, clockDiameter, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, stroke, (, 255, ), ;, let, radius, =, min, (, width, ,, height, ), /, 2, ;, secondsRadius, =, radius, *, 0.71, ;, minutesRadius, =, radius, *, 0.6, ;, hoursRadius, =, radius, *, 0.5, ;, clockDiameter, =, radius, *, 1.7, ;, cx, =, width, /, 2, ;, cy, =, height, /, 2, ;, }, function, draw, (, ), {, background, (, 230, ), ;, \n// Draw the clock background\n, noStroke, (, ), ;, fill, (, 244, ,, 122, ,, 158, ), ;, ellipse, (, cx, ,, cy, ,, clockDiameter, +, 25, ,, clockDiameter, +, 25, ), ;, fill, (, 237, ,, 34, ,, 93, ), ;, ellipse, (, cx, ,, cy, ,, clockDiameter, ,, clockDiameter, ), ;, \n// Angles for sin() and cos() start at 3 o'clock;\n, \n// subtract HALF_PI to make them start at the top\n, let, s, =, map, (, second, (, ), ,, 0, ,, 60, ,, 0, ,, TWO_PI, ), -, HALF_PI, ;, let, m, =, map, (, minute, (, ), +, norm, (, second, (, ), ,, 0, ,, 60, ), ,, 0, ,, 60, ,, 0, ,, TWO_PI, ), -, HALF_PI, ;, let, h, =, map, (, hour, (, ), +, norm, (, minute, (, ), ,, 0, ,, 60, ), ,, 0, ,, 24, ,, 0, ,, TWO_PI, *, 2, ), -, HALF_PI, ;, \n// Draw the hands of the clock\n, stroke, (, 255, ), ;, strokeWeight, (, 1, ), ;, line, (, cx, ,, cy, ,, cx, +, cos, (, s, ), *, secondsRadius, ,, cy, +, sin, (, s, ), *, secondsRadius, ), ;, strokeWeight, (, 2, ), ;, line, (, cx, ,, cy, ,, cx, +, cos, (, m, ), *, minutesRadius, ,, cy, +, sin, (, m, ), *, minutesRadius, ), ;, strokeWeight, (, 4, ), ;, line, (, cx, ,, cy, ,, cx, +, cos, (, h, ), *, hoursRadius, ,, cy, +, sin, (, h, ), *, hoursRadius, ), ;, \n// Draw the minute ticks\n, strokeWeight, (, 2, ), ;, beginShape, (, POINTS, ), ;, for, (, let, a, =, 0, ;, a, <, 360, ;, a, +=, 6, ), {,   , let, angle, =, radians, (, a, ), ;,   , let, x, =, cx, +, cos, (, angle, ), *, secondsRadius, ;,   , let, y, =, cy, +, sin, (, angle, ), *, secondsRadius, ;,   , vertex, (, x, ,, y, ), ;, }, endShape, (, ), ;, }"
    }, {
        "name": "Constrain",
        "description": "Move the mouse across the screen to move the circle. The program constrains the circle to its box.",
        "code": ""
    }, {
        "name": "Easing",
        "description": "Move the mouse across the screen and the symbol will follow. Between drawing each frame of the animation, the program calculates the difference between the position of the symbol and the cursor. If the distance is larger than 1 pixel, the symbol moves part of the distance (0.05) from its current position toward the cursor.",
        "code": " let, x, =, 1, ;, let, y, =, 1, ;, let, easing, =, 0.05, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 237, ,, 34, ,, 93, ), ;, let, targetX, =, mouseX, ;, let, dx, =, targetX, -, x, ;, x, +=, dx, *, easing, ;, let, targetY, =, mouseY, ;, let, dy, =, targetY, -, y, ;, y, +=, dy, *, easing, ;, ellipse, (, x, ,, y, ,, 66, ,, 66, ), ;, }"
    }, {
        "name": "Keyboard",
        "description": "Click on the image to give it focus and press the letter keys to create forms in time and space. Each key has a unique identifying number. These numbers can be used to position shapes in space.",
        "code": " let, rectWidth, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, background, (, 230, ), ;, rectWidth, =, width, /, 4, ;, }, function, draw, (, ), {, \n// keep draw() here to continue looping while waiting for keys\n, }, function, keyPressed, (, ), {, let, keyIndex, =, -1, ;, if, (, key, >=, 'a', &&, key, <=, 'z', ), {,   , keyIndex, =, key, ., charCodeAt, (, 0, ), -, 'a', ., charCodeAt, (, 0, ), ;, }, if, (, keyIndex, ===, -1, ), {,   , \n// If it's not a letter key, clear the screen\n,   , background, (, 230, ), ;, }, else, {,   , \n// It's a letter key, fill a rectangle\n,   , randFill_r, =, Math, ., floor, (, Math, ., random, (, ), *, 255, +, 1, ), ;,   , randFill_g, =, Math, ., floor, (, Math, ., random, (, ), *, 255, +, 1, ), ;,   , randFill_b, =, Math, ., floor, (, Math, ., random, (, ), *, 255, +, 1, ), ;,   , fill, (, randFill_r, ,, randFill_g, ,, randFill_b, ), ;,   , let, x, =, map, (, keyIndex, ,, 0, ,, 25, ,, 0, ,, width, -, rectWidth, ), ;,   , rect, (, x, ,, 0, ,, rectWidth, ,, height, ), ;, }, }"
    }, {
        "name": "Milliseconds",
        "description": "A millisecond is 1/1000 of a second. Processing keeps track of the number of milliseconds a program has run. By modifying this number with the modulo(%) operator, different patterns in time are created.\n\nThis example is ported from the Milliseconds example on the Processing website",
        "code": " let, scale, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, scale, =, width, /, 20, ;, }, function, draw, (, ), {, let, i, ;, for, (, i, =, 0, ;, i, <, scale, ;, i, ++, ), {,   , colorMode, (, RGB, ,, (, i, +1, ), *, scale, *, 10, ), ;,   , fill, (, millis, (, ), %, ((, i, +1, ), *, scale, *, 10, )), ;,   , rect, (, i, *, scale, ,, 0, ,, scale, ,, height, ), ;, }, }"
    }, {
        "name": "Mouse 1D",
        "description": "Move the mouse left and right to shift the balance. The \"mouseX\" variable is used to control both the size and color of the rectangles.",
        "code": ""
    }, {
        "name": "Mouse 2D",
        "description": "Moving the mouse changes the position and size of each box.",
        "code": " function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, noStroke, (, ), ;, rectMode, (, CENTER, ), ;, }, function, draw, (, ), {, background, (, 230, ), ;, fill, (, 244, ,, 122, ,, 158, ), ;, rect, (, mouseX, ,, height, /, 2, ,, mouseY, /, 2, +, 10, ,, mouseY, /, 2, +, 10, ), ;, fill, (, 237, ,, 34, ,, 93, ), ;, let, inverseX, =, width, -, mouseX, ;, let, inverseY, =, height, -, mouseY, ;, rect, (, inverseX, ,, height, /, 2, ,, inverseY, /, 2, +, 10, ,, inverseY, /, 2, +, 10, ), ;, }"
    }, {
        "name": "Mouse Functions",
        "description": "Click on the box and drag it across the screen.",
        "code": " let, bx, ;, let, by, ;, let, boxSize, =, 75, ;, let, overBox, =, false, ;, let, locked, =, false, ;, let, xOffset, =, 0.0, ;, let, yOffset, =, 0.0, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, bx, =, width, /, 2.0, ;, by, =, height, /, 2.0, ;, rectMode, (, RADIUS, ), ;, strokeWeight, (, 2, ), ;, }, function, draw, (, ), {, background, (, 237, ,, 34, ,, 93, ), ;, \n// Test if the cursor is over the box\n, if, (,   , mouseX, >, bx, -, boxSize, &&,   , mouseX, <, bx, +, boxSize, &&,   , mouseY, >, by, -, boxSize, &&,   , mouseY, <, by, +, boxSize, ), {,   , overBox, =, true, ;,   , if, (, !, locked, ), {,   ,   , stroke, (, 255, ), ;,   ,   , fill, (, 244, ,, 122, ,, 158, ), ;,   , }, }, else, {,   , stroke, (, 156, ,, 39, ,, 176, ), ;,   , fill, (, 244, ,, 122, ,, 158, ), ;,   , overBox, =, false, ;, }, \n// Draw the box\n, rect, (, bx, ,, by, ,, boxSize, ,, boxSize, ), ;, }, function, mousePressed, (, ), {, if, (, overBox, ), {,   , locked, =, true, ;,   , fill, (, 255, ,, 255, ,, 255, ), ;, }, else, {,   , locked, =, false, ;, }, xOffset, =, mouseX, -, bx, ;, yOffset, =, mouseY, -, by, ;, }, function, mouseDragged, (, ), {, if, (, locked, ), {,   , bx, =, mouseX, -, xOffset, ;,   , by, =, mouseY, -, yOffset, ;, }, }, function, mouseReleased, (, ), {, locked, =, false, ;, }"
    }, {
        "name": "Mouse Signals",
        "description": "Move and click the mouse to generate signals. The top row is the signal from \"mouseX\", the middle row is the signal from \"mouseY\", and the bottom row is the signal from \"mouseIsPressed\".",
        "code": " let, xvals, =, [, ], ;, let, yvals, =, [, ], ;, let, bvals, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, strokeWeight, (, 2, ), ;, }, function, draw, (, ), {, background, (, 237, ,, 34, ,, 93, ), ;, for, (, let, i, =, 1, ;, i, <, width, ;, i, ++, ), {,   , xvals, [, i, -, 1, ], =, xvals, [, i, ], ;,   , yvals, [, i, -, 1, ], =, yvals, [, i, ], ;,   , bvals, [, i, -, 1, ], =, bvals, [, i, ], ;, }, \n// Add the new values to the end of the array\n, xvals, [, width, -, 1, ], =, mouseX, ;, yvals, [, width, -, 1, ], =, mouseY, ;, if, (, mouseIsPressed, ), {,   , bvals, [, width, -, 1, ], =, 0, ;, }, else, {,   , bvals, [, width, -, 1, ], =, 255, ;, }, fill, (, 255, ), ;, noStroke, (, ), ;, rect, (, 0, ,, height, /, 3, ,, width, ,, height, /, 3, +, 1, ), ;, for, (, let, i, =, 1, ;, i, <, width, ;, i, ++, ), {,   , stroke, (, 255, ), ;,   , point, (, i, ,, xvals, [, i, ], /, 3, ), ;,   , stroke, (, 0, ), ;,   , point, (, i, ,, height, /, 3, +, yvals, [, i, ], /, 3, ), ;,   , stroke, (, 255, ), ;,   , line, (,   ,   , i, ,,   ,   , (, 2, *, height, ), /, 3, +, bvals, [, i, ], /, 3, ,,   ,   , i, ,,   ,   , (, 2, *, height, ), /, 3, +, bvals, [, i, -, 1, ], /, 3,   , ), ;, }, }"
    }, {
        "name": "Mouse Press",
        "description": "Move the mouse to position the shape. Press the mouse button to invert the color.",
        "code": ""
    }, {
        "name": "Rollover",
        "description": "Roll over the colored squares in the center of the image to change the color of the outside rectangle.\n\nThis example is ported from the Rollover example on the Processing website",
        "code": ""
    }, {
        "name": "Storing Input",
        "description": "Move the mouse across the screen to change the position of the circles. The positions of the mouse are recorded into an array and played back every frame. Between each frame, the newest value are added to the end of each array and the oldest value is deleted.",
        "code": ""
    }]
}, {
    "groupName": "Advanced Data",
    "examples": [{
        "name": "Load Saved JSON",
        "description": "Create a Bubble class, instantiate multiple bubbles using data from a JSON file, and display results on the screen. Because web browsers differ in where they save files, we do not make use of saveJSON(), unlike the Processing example.\n\nBased on Daniel Shiffman's LoadSaveJSON Example for Processing.",
        "code": " \n// Bubble class\n, class, Bubble, {, constructor, (, x, ,, y, ,, diameter, ,, name, ), {,   , this, ., x, =, x, ;,   , this, ., y, =, y, ;,   , this, ., diameter, =, diameter, ;,   , this, ., radius, =, diameter, /, 2, ;,   , this, ., name, =, name, ;,   , this, ., over, =, false, ;, }, \n// Check if mouse is over the bubble\n, rollover, (, px, ,, py, ), {,   , let, d, =, dist, (, px, ,, py, ,, this, ., x, ,, this, ., y, ), ;,   , this, ., over, =, d, <, this, ., radius, ;, }, \n// Display the Bubble\n, display, (, ), {,   , stroke, (, 0, ), ;,   , strokeWeight, (, 0.8, ), ;,   , noFill, (, ), ;,   , ellipse, (, this, ., x, ,, this, ., y, ,, this, ., diameter, ,, this, ., diameter, ), ;,   , if, (, this, ., over, ), {,   ,   , fill, (, 0, ), ;,   ,   , textAlign, (, CENTER, ), ;,   ,   , text, (, this, ., name, ,, this, ., x, ,, this, ., y, +, this, ., radius, +, 20, ), ;,   , }, }, }, let, data, =, {, }, ;, \n// Global object to hold results from the loadJSON call\n, let, bubbles, =, [, ], ;, \n// Global array to hold all bubble objects\n, \n// Put any asynchronous data loading in preload to complete before \"setup\" is run\n, function, preload, (, ), {, data, =, loadJSON, (, 'assets/bubbles.json', ), ;, }, \n// Convert saved Bubble data into Bubble Objects\n, function, loadData, (, ), {, let, bubbleData, =, data, [, 'bubbles', ], ;, for, (, let, i, =, 0, ;, i, <, bubbleData, ., length, ;, i, ++, ), {,   , \n// Get each object in the array\n,   , let, bubble, =, bubbleData, [, i, ], ;,   , \n// Get a position object\n,   , let, position, =, bubble, [, 'position', ], ;,   , \n// Get x,y from position\n,   , let, x, =, position, [, 'x', ], ;,   , let, y, =, position, [, 'y', ], ;,   , \n// Get diameter and label\n,   , let, diameter, =, bubble, [, 'diameter', ], ;,   , let, label, =, bubble, [, 'label', ], ;,   , \n// Put object in array\n,   , bubbles, ., push, (, new, Bubble, (, x, ,, y, ,, diameter, ,, label, )), ;, }, }, \n// Create a new Bubble each time the mouse is clicked.\n, function, mousePressed, (, ), {, \n// Add diameter and label to bubble\n, let, diameter, =, random, (, 40, ,, 80, ), ;, let, label, =, 'New Label', ;, \n// Append the new JSON bubble object to the array\n, bubbles, ., push, (, new, Bubble, (, mouseX, ,, mouseY, ,, diameter, ,, label, )), ;, \n// Prune Bubble Count if there are too many\n, if, (, bubbles, ., length, >, 10, ), {,   , bubbles, ., shift, (, ), ;, \n// remove first item from array\n, }, }, function, setup, (, ), {, createCanvas, (, 640, ,, 360, ), ;, loadData, (, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, \n// Display all bubbles\n, for, (, let, i, =, 0, ;, i, <, bubbles, ., length, ;, i, ++, ), {,   , bubbles, [, i, ], ., display, (, ), ;,   , bubbles, [, i, ], ., rollover, (, mouseX, ,, mouseY, ), ;, }, \n// Label directions at bottom\n, textAlign, (, LEFT, ), ;, fill, (, 0, ), ;, text, (, 'Click to add bubbles.', ,, 10, ,, height, -, 10, ), ;, }"
    }, {
        "name": "Load Saved Table",
        "description": "Create a Bubble class, instantiate multiple bubbles using data from a csv file, and display results on the screen. Because web browsers differ in where they save files, we do not make use of saveTable(), unlike the Processing example.\n\nBased on Daniel Shiffman's LoadSaveTable Example for Processing.",
        "code": ""
    }]
}, {
    "groupName": "Sound",
    "examples": [{
        "name": "Load and Play Sound",
        "description": "Load sound during preload(). Play a sound when canvas is clicked.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, song, ;, function, setup, (, ), {, song, =, loadSound, (, 'assets/lucky_dragons_-_power_melody.mp3', ), ;, createCanvas, (, 720, ,, 200, ), ;, background, (, 255, ,, 0, ,, 0, ), ;, }, function, mousePressed, (, ), {, if, (, song, ., isPlaying, (, )), {,   , \n// .isPlaying() returns a boolean\n,   , song, ., stop, (, ), ;,   , background, (, 255, ,, 0, ,, 0, ), ;, }, else, {,   , song, ., play, (, ), ;,   , background, (, 0, ,, 255, ,, 0, ), ;, }, }"
    }, {
        "name": "Preload SoundFile",
        "description": "Call loadSound() during preload() to ensure that the sound is completely loaded before setup() is called. It's best to always call loadSound() in preload(), otherwise sounds won't necessarily be loaded by the time you want to play them in your sketch. *\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": ""
    }, {
        "name": "soundFormats",
        "description": "Technically, due to patent issues, there is no single sound format that is supported by all web browsers. While mp3 is supported across the latest versions of major browsers on OS X and Windows, for example, it may not be available on some less mainstream operating systems and browsers.\n\n*\n\nTo ensure full compatibility, you can include the same sound file in multiple formats, e.g. 'sound.mp3' and 'sound.ogg'. (Ogg is an open source alternative to mp3.) You can convert audio files into web friendly formats for free online at media.io\n\n. *\n\nThe soundFormats() method tells loadSound which formats we have included with our sketch. Then, loadSound will attempt to load the first format that is supported by the client's web browser.\n\n*\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, song, ;, function, preload, (, ), {, \n// we have included both an .ogg file and an .mp3 file\n, soundFormats, (, 'ogg', ,, 'mp3', ), ;, \n// if mp3 is not supported by this browser,\n, \n// loadSound will load the ogg file\n, \n// we have included with our sketch\n, song, =, loadSound, (, 'assets/lucky_dragons_-_power_melody.mp3', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 200, ), ;, \n// song loaded during preload(), ready to play in setup()\n, song, ., play, (, ), ;, background, (, 0, ,, 255, ,, 0, ), ;, }, function, mousePressed, (, ), {, if, (, song, ., isPlaying, (, )), {,   , \n// .isPlaying() returns a boolean\n,   , song, ., pause, (, ), ;,   , background, (, 255, ,, 0, ,, 0, ), ;, }, else, {,   , song, ., play, (, ), ;, \n// playback will resume from the pause position\n,   , background, (, 0, ,, 255, ,, 0, ), ;, }, }"
    }, {
        "name": "Play Mode",
        "description": "In 'sustain' mode, the sound will overlap with itself. In 'restart' mode it will stop and then start again. Click mouse to play a sound file. Trigger lots of sounds at once! Press any key to change playmode.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": ""
    }, {
        "name": "Pan Sound",
        "description": "Click mouse to play the sound. Ball position follows mouse and correlates to panning of sound.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.\n\n*",
        "code": " let, ball, =, {, }, ;, let, soundFile, ;, function, preload, (, ), {, soundFormats, (, 'mp3', ,, 'ogg', ), ;, soundFile, =, loadSound, (, 'assets/beatbox.ogg', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 100, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, ball, ., x, =, constrain, (, mouseX, ,, 0, ,, width, ), ;, ellipse, (, ball, ., x, ,, height, /, 2, ,, 100, ,, 100, ), ;, }, function, mousePressed, (, ), {, \n// map the ball's x location to a panning degree\n, \n// between -1.0 (left) and 1.0 (right)\n, let, panning, =, map, (, ball, ., x, ,, 0, ,, width, ,, -1.0, ,, 1.0, ), ;, soundFile, ., pan, (, panning, ), ;, soundFile, ., play, (, ), ;, }"
    }, {
        "name": "Sound Effect",
        "description": "Play a sound effect when the mouse is clicked inside the circle.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": ""
    }, {
        "name": "Playback Rate",
        "description": "Load a SoundFile and map its playback rate to mouseY, volume to mouseX. Playback rate is the speed with which the web audio context processings the sound file information. Slower rates not only increase the duration of the sound, but also decrease the pitch because it is being played back at a slower frequency.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " \n// A sound file object\n, let, song, ;, function, preload, (, ), {, \n// Load a sound file\n, song, =, loadSound, (, 'assets/Damscray_DancingTiger.mp3', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, \n// Loop the sound forever\n, \n// (well, at least until stop() is called)\n, song, ., loop, (, ), ;, }, function, draw, (, ), {, background, (, 200, ), ;, \n// Set the volume to a range between 0 and 1.0\n, let, volume, =, map, (, mouseX, ,, 0, ,, width, ,, 0, ,, 1, ), ;, volume, =, constrain, (, volume, ,, 0, ,, 1, ), ;, song, ., amp, (, volume, ), ;, \n// Set the rate to a range between 0.1 and 4\n, \n// Changing the rate alters the pitch\n, let, speed, =, map, (, mouseY, ,, 0.1, ,, height, ,, 0, ,, 2, ), ;, speed, =, constrain, (, speed, ,, 0.01, ,, 4, ), ;, song, ., rate, (, speed, ), ;, \n// Draw some circles to show what is going on\n, stroke, (, 0, ), ;, fill, (, 51, ,, 100, ), ;, ellipse, (, mouseX, ,, 100, ,, 48, ,, 48, ), ;, stroke, (, 0, ), ;, fill, (, 51, ,, 100, ), ;, ellipse, (, 100, ,, mouseY, ,, 48, ,, 48, ), ;, }"
    }, {
        "name": "Measuring Amplitude",
        "description": "Analyze the amplitude of sound with p5.Amplitude.\n\n*\n\nAmplitude is the magnitude of vibration. Sound is vibration, so its amplitude is is closely related to volume / loudness.\n\n*\n\nThe getLevel() method takes an array of amplitude values collected over a small period of time (1024 samples). Then it returns the Root Mean Square (RMS) of these values.\n\n*\n\nThe original amplitude values for digital audio are between -1.0 and 1.0. But the RMS will always be positive, because it is squared. And, rather than use instantanous amplitude readings that are sampled at a rate of 44,100 times per second, the RMS is an average over time (1024 samples, in this case), which better represents how we hear amplitude.\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, song, ,, analyzer, ;, function, preload, (, ), {, song, =, loadSound, (, 'assets/lucky_dragons_-_power_melody.mp3', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 200, ), ;, song, ., loop, (, ), ;, \n// create a new Amplitude analyzer\n, analyzer, =, new, p5, ., Amplitude, (, ), ;, \n// Patch the input to an volume analyzer\n, analyzer, ., setInput, (, song, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, \n// Get the average (root mean square) amplitude\n, let, rms, =, analyzer, ., getLevel, (, ), ;, fill, (, 127, ), ;, stroke, (, 0, ), ;, \n// Draw an ellipse with size based on volume\n, ellipse, (, width, /, 2, ,, height, /, 2, ,, 10, +, rms, *, 200, ,, 10, +, rms, *, 200, ), ;, }"
    }, {
        "name": "Noise Drum Envelope",
        "description": "White Noise is a random audio signal with equal energy at every part of the frequency spectrum\n\n*\n\nAn Envelope is a series of fades, defined as time / value pairs.\n\n*\n\nIn this example, the p5.Env will be used to \"play\" the p5.Noise like a drum by controlling its output amplitude. A p5.Amplitude will get the level of all sound in the sketch, and we'll use this value to draw a green rectangle that shows the envelope in action.\n\nTo run this example locally, you will need the p5.sound library and a sound file.",
        "code": " let, noise, ,, env, ,, analyzer, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 200, ), ;, noise, =, new, p5, ., Noise, (, ), ;, \n// other types include 'brown' and 'pink'\n, noise, ., start, (, ), ;, \n// multiply noise volume by 0\n, \n// (keep it quiet until we're ready to make noise!)\n, noise, ., amp, (, 0, ), ;, env, =, new, p5, ., Env, (, ), ;, \n// set attackTime, decayTime, sustainRatio, releaseTime\n, env, ., setADSR, (, 0.001, ,, 0.1, ,, 0.2, ,, 0.1, ), ;, \n// set attackLevel, releaseLevel\n, env, ., setRange, (, 1, ,, 0, ), ;, \n// p5.Amplitude will analyze all sound in the sketch\n, \n// unless the setInput() method is used to specify an input.\n, analyzer, =, new, p5, ., Amplitude, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// get volume reading from the p5.Amplitude analyzer\n, let, level, =, analyzer, ., getLevel, (, ), ;, \n// use level to draw a green rectangle\n, let, levelHeight, =, map, (, level, ,, 0, ,, 0.4, ,, 0, ,, height, ), ;, fill, (, 100, ,, 250, ,, 100, ), ;, rect, (, 0, ,, height, ,, width, ,, -, levelHeight, ), ;, }, function, mousePressed, (, ), {, env, ., play, (, noise, ), ;, }"
    }, {
        "name": "Note Envelope",
        "description": "An Envelope is a series of fades, defined as time / value pairs. In this example, the envelope will be used to \"play\" a note by controlling the output amplitude of an oscillator.\n\nThe p5.Oscillator sends its output through an internal Web Audio GainNode (p5.Oscillator.output). By default, that node has a constant value of 0.5. It can be reset with the osc.amp() method. Or, in this example, an Envelope takes control of that node, turning the amplitude up and down like a volume knob.\n\nTo run this example locally, you will need the p5.sound library and a sound file.",
        "code": " let, osc, ,, envelope, ,, fft, ;, let, scaleArray, =, [, 60, ,, 62, ,, 64, ,, 65, ,, 67, ,, 69, ,, 71, ,, 72, ], ;, let, note, =, 0, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 200, ), ;, osc, =, new, p5, ., SinOsc, (, ), ;, \n// Instantiate the envelope\n, envelope, =, new, p5, ., Env, (, ), ;, \n// set attackTime, decayTime, sustainRatio, releaseTime\n, envelope, ., setADSR, (, 0.001, ,, 0.5, ,, 0.1, ,, 0.5, ), ;, \n// set attackLevel, releaseLevel\n, envelope, ., setRange, (, 1, ,, 0, ), ;, osc, ., start, (, ), ;, fft, =, new, p5, ., FFT, (, ), ;, noStroke, (, ), ;, }, function, draw, (, ), {, background, (, 20, ), ;, if, (, frameCount, %, 60, ===, 0, ||, frameCount, ===, 1, ), {,   , let, midiValue, =, scaleArray, [, note, ], ;,   , let, freqValue, =, midiToFreq, (, midiValue, ), ;,   , osc, ., freq, (, freqValue, ), ;,   , envelope, ., play, (, osc, ,, 0, ,, 0.1, ), ;,   , note, =, (, note, +, 1, ), %, scaleArray, ., length, ;, }, \n// plot FFT.analyze() frequency analysis on the canvas\n, let, spectrum, =, fft, ., analyze, (, ), ;, for, (, let, i, =, 0, ;, i, <, spectrum, ., length, /, 20, ;, i, ++, ), {,   , fill, (, spectrum, [, i, ], ,, spectrum, [, i, ], /, 10, ,, 0, ), ;,   , let, x, =, map, (, i, ,, 0, ,, spectrum, ., length, /, 20, ,, 0, ,, width, ), ;,   , let, h, =, map, (, spectrum, [, i, ], ,, 0, ,, 255, ,, 0, ,, height, ), ;,   , rect, (, x, ,, height, ,, spectrum, ., length, /, 20, ,, -, h, ), ;, }, }"
    }, {
        "name": "Oscillator Frequency",
        "description": "Control an Oscillator and view the waveform using FFT. MouseX is mapped to frequency, mouseY is mapped to amplitude.\n\nTo run this example locally, you will need the p5.sound library and a sound file.",
        "code": " let, osc, ,, fft, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 256, ), ;, osc, =, new, p5, ., TriOsc, (, ), ;, \n// set frequency and type\n, osc, ., amp, (, 0.5, ), ;, fft, =, new, p5, ., FFT, (, ), ;, osc, ., start, (, ), ;, }, function, draw, (, ), {, background, (, 255, ), ;, let, waveform, =, fft, ., waveform, (, ), ;, \n// analyze the waveform\n, beginShape, (, ), ;, strokeWeight, (, 5, ), ;, for, (, let, i, =, 0, ;, i, <, waveform, ., length, ;, i, ++, ), {,   , let, x, =, map, (, i, ,, 0, ,, waveform, ., length, ,, 0, ,, width, ), ;,   , let, y, =, map, (, waveform, [, i, ], ,, -1, ,, 1, ,, height, ,, 0, ), ;,   , vertex, (, x, ,, y, ), ;, }, endShape, (, ), ;, \n// change oscillator frequency based on mouseX\n, let, freq, =, map, (, mouseX, ,, 0, ,, width, ,, 40, ,, 880, ), ;, osc, ., freq, (, freq, ), ;, let, amp, =, map, (, mouseY, ,, 0, ,, height, ,, 1, ,, 0.01, ), ;, osc, ., amp, (, amp, ), ;, }"
    }, {
        "name": "Mic Input",
        "description": "Get audio input from your computer's microphone. Make noise to float the ellipse.\n\nNote: p5.AudioIn contains its own p5.Amplitude object, so you can call getLevel on p5.AudioIn without creating a p5.Amplitude.\n\nTo run this example locally, you will need the p5.sound library and a running local server.",
        "code": ""
    }, {
        "name": "Frequency Spectrum",
        "description": "Visualize the frequency spectrum of live audio input.\n\nTo run this example locally, you will need the p5.sound library and a running local server.",
        "code": " let, mic, ,, fft, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, noFill, (, ), ;, mic, =, new, p5, ., AudioIn, (, ), ;, mic, ., start, (, ), ;, fft, =, new, p5, ., FFT, (, ), ;, fft, ., setInput, (, mic, ), ;, }, function, draw, (, ), {, background, (, 200, ), ;, let, spectrum, =, fft, ., analyze, (, ), ;, beginShape, (, ), ;, for, (, i, =, 0, ;, i, <, spectrum, ., length, ;, i, ++, ), {,   , vertex, (, i, ,, map, (, spectrum, [, i, ], ,, 0, ,, 255, ,, height, ,, 0, )), ;, }, endShape, (, ), ;, }"
    }, {
        "name": "Mic Threshold",
        "description": "Trigger an event (draw a rectangle) when the Audio Input volume surpasses a threshold.\n\nTo run this example locally, you will need the p5.sound library and a running local server.",
        "code": " \n// Adapted from Learning Processing, Daniel Shiffman\n, \n// learningprocessing.com\n, let, input, ;, let, analyzer, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 200, ), ;, background, (, 255, ), ;, \n// Create an Audio input\n, input, =, new, p5, ., AudioIn, (, ), ;, input, ., start, (, ), ;, }, function, draw, (, ), {, \n// Get the overall volume (between 0 and 1.0)\n, let, volume, =, input, ., getLevel, (, ), ;, \n// If the volume > 0.1,  a rect is drawn at a random location.\n, \n// The louder the volume, the larger the rectangle.\n, let, threshold, =, 0.1, ;, if, (, volume, >, threshold, ), {,   , stroke, (, 0, ), ;,   , fill, (, 0, ,, 100, ), ;,   , rect, (, random, (, 40, ,, width, ), ,, random, (, height, ), ,, volume, *, 50, ,, volume, *, 50, ), ;, }, \n// Graph the overall potential volume, w/ a line at the threshold\n, let, y, =, map, (, volume, ,, 0, ,, 1, ,, height, ,, 0, ), ;, let, ythreshold, =, map, (, threshold, ,, 0, ,, 1, ,, height, ,, 0, ), ;, noStroke, (, ), ;, fill, (, 175, ), ;, rect, (, 0, ,, 0, ,, 20, ,, height, ), ;, \n// Then draw a rectangle on the graph, sized according to volume\n, fill, (, 0, ), ;, rect, (, 0, ,, y, ,, 20, ,, y, ), ;, stroke, (, 0, ), ;, line, (, 0, ,, ythreshold, ,, 19, ,, ythreshold, ), ;, }"
    }, {
        "name": "Filter LowPass",
        "description": "Apply a p5.LowPass filter to a p5.SoundFile. Visualize the sound with FFT. Map mouseX to the the filter's cutoff frequency and mouseY to resonance/width of the a BandPass filter *\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, soundFile, ;, let, fft, ;, let, filter, ,, filterFreq, ,, filterRes, ;, function, preload, (, ), {, soundFormats, (, 'mp3', ,, 'ogg', ), ;, soundFile, =, loadSound, (, 'assets/beat', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 256, ), ;, fill, (, 255, ,, 40, ,, 255, ), ;, \n// loop the sound file\n, soundFile, ., loop, (, ), ;, filter, =, new, p5, ., LowPass, (, ), ;, \n// Disconnect soundfile from master output.\n, \n// Then, connect it to the filter, so that we only hear the filtered sound\n, soundFile, ., disconnect, (, ), ;, soundFile, ., connect, (, filter, ), ;, fft, =, new, p5, ., FFT, (, ), ;, }, function, draw, (, ), {, background, (, 30, ), ;, \n// Map mouseX to a the cutoff frequency from the lowest\n, \n// frequency (10Hz) to the highest (22050Hz) that humans can hear\n, filterFreq, =, map, (, mouseX, ,, 0, ,, width, ,, 10, ,, 22050, ), ;, \n// Map mouseY to resonance (volume boost) at the cutoff frequency\n, filterRes, =, map, (, mouseY, ,, 0, ,, height, ,, 15, ,, 5, ), ;, \n// set filter parameters\n, filter, ., set, (, filterFreq, ,, filterRes, ), ;, \n// Draw every value in the FFT spectrum analysis where\n, \n// x = lowest (10Hz) to highest (22050Hz) frequencies,\n, \n// h = energy (amplitude / volume) at that frequency\n, let, spectrum, =, fft, ., analyze, (, ), ;, noStroke, (, ), ;, for, (, let, i, =, 0, ;, i, <, spectrum, ., length, ;, i, ++, ), {,   , let, x, =, map, (, i, ,, 0, ,, spectrum, ., length, ,, 0, ,, width, ), ;,   , let, h, =, -, height, +, map, (, spectrum, [, i, ], ,, 0, ,, 255, ,, height, ,, 0, ), ;,   , rect, (, x, ,, height, ,, width, /, spectrum, ., length, ,, h, ), ;, }, }"
    }, {
        "name": "Filter BandPass",
        "description": "Apply a p5.BandPass filter to white noise. Visualize the sound with FFT. Map mouseX to the bandpass frequency and mouseY to resonance/width of the a BandPass filter *\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, noise, ;, let, fft, ;, let, filter, ,, filterFreq, ,, filterWidth, ;, function, setup, (, ), {, createCanvas, (, 710, ,, 256, ), ;, fill, (, 255, ,, 40, ,, 255, ), ;, filter, =, new, p5, ., BandPass, (, ), ;, noise, =, new, p5, ., Noise, (, ), ;, noise, ., disconnect, (, ), ;, \n// Disconnect soundfile from master output...\n, filter, ., process, (, noise, ), ;, \n// ...and connect to filter so we'll only hear BandPass.\n, noise, ., start, (, ), ;, fft, =, new, p5, ., FFT, (, ), ;, }, function, draw, (, ), {, background, (, 30, ), ;, \n// Map mouseX to a bandpass freq from the FFT spectrum range: 10Hz - 22050Hz\n, filterFreq, =, map, (, mouseX, ,, 0, ,, width, ,, 10, ,, 22050, ), ;, \n// Map mouseY to resonance/width\n, filterWidth, =, map, (, mouseY, ,, 0, ,, height, ,, 0, ,, 90, ), ;, \n// set filter parameters\n, filter, ., set, (, filterFreq, ,, filterWidth, ), ;, \n// Draw every value in the FFT spectrum analysis where\n, \n// x = lowest (10Hz) to highest (22050Hz) frequencies,\n, \n// h = energy / amplitude at that frequency\n, let, spectrum, =, fft, ., analyze, (, ), ;, noStroke, (, ), ;, for, (, let, i, =, 0, ;, i, <, spectrum, ., length, ;, i, ++, ), {,   , let, x, =, map, (, i, ,, 0, ,, spectrum, ., length, ,, 0, ,, width, ), ;,   , let, h, =, -, height, +, map, (, spectrum, [, i, ], ,, 0, ,, 255, ,, height, ,, 0, ), ;,   , rect, (, x, ,, height, ,, width, /, spectrum, ., length, ,, h, ), ;, }, }"
    }, {
        "name": "Delay",
        "description": "Click the mouse to hear the p5.Delay process a SoundFile. MouseX controls the p5.Delay Filter Frequency. MouseY controls both the p5.Delay Time and Resonance. Visualize the resulting sound's volume with an Amplitude object. *\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, soundFile, ,, analyzer, ,, delay, ;, function, preload, (, ), {, soundFormats, (, 'ogg', ,, 'mp3', ), ;, soundFile, =, loadSound, (, 'assets/beatbox.mp3', ), ;, }, function, setup, (, ), {, createCanvas, (, 710, ,, 400, ), ;, soundFile, ., disconnect, (, ), ;, \n// so we'll only hear delay\n, delay, =, new, p5, ., Delay, (, ), ;, delay, ., process, (, soundFile, ,, 0.12, ,, 0.7, ,, 2300, ), ;, delay, ., setType, (, 'pingPong', ), ;, \n// a stereo effect\n, analyzer, =, new, p5, ., Amplitude, (, ), ;, }, function, draw, (, ), {, background, (, 0, ), ;, \n// get volume reading from the p5.Amplitude analyzer\n, let, level, =, analyzer, ., getLevel, (, ), ;, \n// use level to draw a green rectangle\n, let, levelHeight, =, map, (, level, ,, 0, ,, 0.1, ,, 0, ,, height, ), ;, fill, (, 100, ,, 250, ,, 100, ), ;, rect, (, 0, ,, height, ,, width, ,, -, levelHeight, ), ;, let, filterFreq, =, map, (, mouseX, ,, 0, ,, width, ,, 60, ,, 15000, ), ;, filterFreq, =, constrain, (, filterFreq, ,, 60, ,, 15000, ), ;, let, filterRes, =, map, (, mouseY, ,, 0, ,, height, ,, 3, ,, 0.01, ), ;, filterRes, =, constrain, (, filterRes, ,, 0.01, ,, 3, ), ;, delay, ., filter, (, filterFreq, ,, filterRes, ), ;, let, delTime, =, map, (, mouseY, ,, 0, ,, width, ,, 0.2, ,, 0.01, ), ;, delTime, =, constrain, (, delTime, ,, 0.01, ,, 0.2, ), ;, delay, ., delayTime, (, delTime, ), ;, }, function, mousePressed, (, ), {, soundFile, ., play, (, ), ;, }"
    }, {
        "name": "Reverb",
        "description": "Reverb gives depth and perceived space to a sound. Here, noise is processed with reverb. *\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, sound, ,, reverb, ;, function, preload, (, ), {, soundFormats, (, 'mp3', ,, 'ogg', ), ;, soundFile, =, loadSound, (, 'assets/Damscray_DancingTiger', ), ;, \n// disconnect the default connection\n, \n// so that we only hear the sound via the reverb.process\n, soundFile, ., disconnect, (, ), ;, }, function, setup, (, ), {, createCanvas, (, 720, ,, 100, ), ;, background, (, 0, ), ;, reverb, =, new, p5, ., Reverb, (, ), ;, \n// sonnects soundFile to reverb with a\n, \n// reverbTime of 6 seconds, decayRate of 0.2%\n, reverb, ., process, (, soundFile, ,, 6, ,, 0.2, ), ;, reverb, ., amp, (, 4, ), ;, \n// turn it up!\n, }, function, mousePressed, (, ), {, soundFile, ., play, (, ), ;, }"
    }, {
        "name": "Convolution Reverb",
        "description": "The p5.Convolver can recreate the sound of actual spaces using convolution. Convolution takes an Impulse Response, (the sound of a room reverberating), and uses that to recreate the sound of that space.\n\nClick to play a sound through convolution. Every time you click, the sound is convolved with a different Impulse Response. To hear the Impulse Response itself, press any key.\n\n*\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server. These convolution samples are Creative Commons BY recordinghopkins",
        "code": ""
    }, {
        "name": "Record Save Audio",
        "description": "Record a sound, play it back and save it as a .wav file to the client's computer. We need three objects: a p5.AudioIn (mic / sound source), p5.SoundRecorder (records the sound), and a p5.SoundFile (play back / save).\n\nTo run this example locally, you will need the p5.sound library a sound file, and a running local server.",
        "code": " let, mic, ,, recorder, ,, soundFile, ;, let, state, =, 0, ;, \n// mousePress will increment from Record, to Stop, to Play\n, function, setup, (, ), {, createCanvas, (, 400, ,, 400, ), ;, background, (, 200, ), ;, fill, (, 0, ), ;, text, (, 'Enable mic and click the mouse to begin recording', ,, 20, ,, 20, ), ;, \n// create an audio in\n, mic, =, new, p5, ., AudioIn, (, ), ;, \n// users must manually enable their browser microphone for recording to work properly!\n, mic, ., start, (, ), ;, \n// create a sound recorder\n, recorder, =, new, p5, ., SoundRecorder, (, ), ;, \n// connect the mic to the recorder\n, recorder, ., setInput, (, mic, ), ;, \n// create an empty sound file that we will use to playback the recording\n, soundFile, =, new, p5, ., SoundFile, (, ), ;, }, function, mousePressed, (, ), {, \n// use the '.enabled' boolean to make sure user enabled the mic (otherwise we'd record silence)\n, if, (, state, ===, 0, &&, mic, ., enabled, ), {,   , \n// Tell recorder to record to a p5.SoundFile which we will use for playback\n,   , recorder, ., record, (, soundFile, ), ;,   , background, (, 255, ,, 0, ,, 0, ), ;,   , text, (, 'Recording now! Click to stop.', ,, 20, ,, 20, ), ;,   , state, ++, ;, }, else, if, (, state, ===, 1, ), {,   , recorder, ., stop, (, ), ;, \n// stop recorder, and send the result to soundFile\n,   , background, (, 0, ,, 255, ,, 0, ), ;,   , text, (, 'Recording stopped. Click to play & save', ,, 20, ,, 20, ), ;,   , state, ++, ;, }, else, if, (, state, ===, 2, ), {,   , soundFile, ., play, (, ), ;, \n// play the result!\n,   , saveSound, (, soundFile, ,, 'mySound.wav', ), ;, \n// save file\n,   , state, ++, ;, }, }"
    }, {
        "name": "Frequency Modulation",
        "description": "Frequency Modulation is a powerful form of synthesis. In its simplest form, FM involves two oscillators, referred to as the carrier and the modulator. As the modulator's waveform oscillates between some minimum and maximum amplitude value, that momentary value is added to (\"modulates\") the frequency of the carrier.\n\nThe carrier is typically set to oscillate at an audible frequency that we perceive as a pitch—in this case, it is a sine wave oscilaltor at 220Hz, equivalent to an \"A3\" note. The carrier is connected to master output by default (this is the case for all p5.Oscillators).\n\nWe will disconnect the modulator from master output, and instead connect to the frequency of the carrier: carrier.freq(modulator). This adds the output amplitude of the modulator to the frequency of the carrier.\n\nModulation Depth describes how much the carrier frequency will modulate. It is based on the amplitude of the modulator. The modulator produces a continuous stream of amplitude values that we will add to the carrier frequency. An amplitude of zero means silence, so the modulation will have no effect. An amplitude of 1.0 scales the range of output values between +1.0 and -1.0. That is the standard range for sound that gets sent to your speakers, but in FM we are instead sending the modulator's output to the carrier frequency, where we'd barely notice the +1Hz / -1Hz modulation. So we will typically increase the amplitude (\"depth\") of the modulator to numbers much higher than what we might send to our speakers.\n\nModulation Frequency is the speed of modulation. When the modulation frequency is lower than 20Hz, we stop hearing its frequency as pitch, and start to hear it as a beating rhythm. For example, try 7.5Hz at a depth of 20 to mimic the \"vibrato\" effect of an operatic vocalist. The term for this is Low Frequency Oscillator, or LFO. Modulators set to higher frequencies can also produce interesting effects, especially when the frequency has a harmonic relationship to the carrier signal. For example, listen to what happens when the modulator's frequency is half or twice that of the carrier. This is the basis for FM Synthesis, developed by John Chowning in the 1960s, which came to revolutionize synthesis in the 1980s and is often used to synthesize brass and bell-like sounds. *\n\nIn this example,\n\n- MouseX controls the modulation depth (the amplitude of the modulator) from -150 to 150. When the modulator's amplitude is set to 0 (in the middle), notice how the modulation has no effect. The greater (the absolute value of) the number, the greater the effect. If the modulator waveform is symetrical like a square [], sine ~ or triangle /\\, the negative amplitude will be the same as positive amplitude. But in this example, the modulator is an asymetrical sawtooth wave, shaped like this /. When we multiply it by a negative number, it goes backwards like this \\. To best observe the difference, try lowering the frequency.\n\n- MouseY controls the frequency of the modulator from 0 to 112 Hz. Try comparing modulation frequencies below the audible range (which starts around 20hz), and above it, especially in a harmonic relationship to the carrier frequency (which is 220hz, so try half that, 1/3, 1/4 etc...). *\n\nYou will need to include the p5.sound library for this example to work in your own project.",
        "code": ""
    }, {
        "name": "Amplitude Modulation",
        "description": "Amplitude Modulation involves two oscillators, referred to as the carrier and the modulator, where the modulator controls the carrier's amplitude.\n\n*\n\nThe carrier is typically set at an audible frequency (i.e. 440 Hz) and connected to master output by default. The carrier.amp is set to zero because we will have the modulator control its amplitude.\n\n*\n\nThe modulator is disconnected from master output. Instead, it is connected to the amplitude of the Carrier, like this: carrier.amp(modulator).\n\n*\n\nIn this example...\n\n- MouseX controls the amplitude of the modulator from 0 to 1. When the modulator's amplitude is set to 0, the amplitude modulation has no effect.\n\n*\n\n- MouseY controls the frequency of the modulator from 0 to 20hz. This range is lower frequencies than humans can hear, and we perceive the modulation as a rhythm. This range can simulate effects such as Tremolo. Ring Modulation is a type of Amplitude Modulation where the original carrier signal is not present, and often involves modulation at a faster frequency.\n\n*\n\nYou will need to include the p5.sound library for this example to work in your own project.",
        "code": " let, carrier, ;, \n// this is the oscillator we will hear\n, let, modulator, ;, \n// this oscillator will modulate the amplitude of the carrier\n, let, fft, ;, \n// we'll visualize the waveform\n, function, setup, (, ), {, createCanvas, (, 800, ,, 400, ), ;, noFill, (, ), ;, background, (, 30, ), ;, \n// alpha\n, carrier, =, new, p5, ., Oscillator, (, ), ;, \n// connects to master output by default\n, carrier, ., freq, (, 340, ), ;, carrier, ., amp, (, 0, ), ;, \n// carrier's amp is 0 by default, giving our modulator total control\n, carrier, ., start, (, ), ;, modulator, =, new, p5, ., Oscillator, (, 'triangle', ), ;, modulator, ., disconnect, (, ), ;, \n// disconnect the modulator from master output\n, modulator, ., freq, (, 5, ), ;, modulator, ., amp, (, 1, ), ;, modulator, ., start, (, ), ;, \n// Modulate the carrier's amplitude with the modulator\n, \n// Optionally, we can scale the signal.\n, carrier, ., amp, (, modulator, ., scale, (, -1, ,, 1, ,, 1, ,, -1, )), ;, \n// create an fft to analyze the audio\n, fft, =, new, p5, ., FFT, (, ), ;, }, function, draw, (, ), {, background, (, 30, ,, 30, ,, 30, ,, 100, ), ;, \n// alpha\n, \n// map mouseY to moodulator freq between 0 and 20hz\n, let, modFreq, =, map, (, mouseY, ,, 0, ,, height, ,, 20, ,, 0, ), ;, modulator, ., freq, (, modFreq, ), ;, let, modAmp, =, map, (, mouseX, ,, 0, ,, width, ,, 0, ,, 1, ), ;, modulator, ., amp, (, modAmp, ,, 0.01, ), ;, \n// fade time of 0.1 for smooth fading\n, \n// analyze the waveform\n, waveform, =, fft, ., waveform, (, ), ;, \n// draw the shape of the waveform\n, drawWaveform, (, ), ;, drawText, (, modFreq, ,, modAmp, ), ;, }, function, drawWaveform, (, ), {, stroke, (, 240, ), ;, strokeWeight, (, 4, ), ;, beginShape, (, ), ;, for, (, let, i, =, 0, ;, i, <, waveform, ., length, ;, i, ++, ), {,   , let, x, =, map, (, i, ,, 0, ,, waveform, ., length, ,, 0, ,, width, ), ;,   , let, y, =, map, (, waveform, [, i, ], ,, -1, ,, 1, ,, -, height, /, 2, ,, height, /, 2, ), ;,   , vertex, (, x, ,, y, +, height, /, 2, ), ;, }, endShape, (, ), ;, }, function, drawText, (, modFreq, , , modAmp, ), {, strokeWeight, (, 1, ), ;, text, (, 'Modulator Frequency: ', +, modFreq, ., toFixed, (, 3, ), +, ' Hz', ,, 20, ,, 20, ), ;, text, (, 'Modulator Amplitude: ', +, modAmp, ., toFixed, (, 3, ), ,, 20, ,, 40, ), ;, }"
    }]
}, {
    "groupName": "Mobile",
    "examples": [{
        "name": "Acceleration Ball Bounce",
        "description": "Move an ellipse around based on accelerationX and accelerationY values, and bounces when touch the edge of the canvas.",
        "code": ""
    }, {
        "name": "Simple Draw",
        "description": "Touch to draw on the screen using mouseX, mouseY, pmouseX, and pmouseY values.",
        "code": ""
    }, {
        "name": "Acceleration Color",
        "description": "Use deviceMoved() to detect when the device is rotated. The background RGB color values are mapped to accelerationX, accelerationY, and accelerationZ values.",
        "code": " let, r, ,, g, ,, b, ;, function, setup, (, ), {, createCanvas, (, displayWidth, ,, displayHeight, ), ;, r, =, random, (, 50, ,, 255, ), ;, g, =, random, (, 0, ,, 200, ), ;, b, =, random, (, 50, ,, 255, ), ;, }, function, draw, (, ), {, background, (, r, ,, g, ,, b, ), ;, console, ., log, (, 'draw', ), ;, }, function, deviceMoved, (, ), {, r, =, map, (, accelerationX, ,, -90, ,, 90, ,, 100, ,, 175, ), ;, g, =, map, (, accelerationY, ,, -90, ,, 90, ,, 100, ,, 200, ), ;, b, =, map, (, accelerationZ, ,, -90, ,, 90, ,, 100, ,, 200, ), ;, }"
    }, {
        "name": "Shake Ball Bounce",
        "description": "Create a Ball class, instantiate multiple objects, move it around the screen, and bounce when touch the edge of the canvas. Detect shake event based on total change in accelerationX and accelerationY and speed up or slow down objects based on detection.",
        "code": ""
    }, {
        "name": "Tilted 3D Box",
        "description": "Use mobile to tilt a box",
        "code": " function, setup, (, ), {, createCanvas, (, displayWidth, ,, displayHeight, ,, WEBGL, ), ;, }, function, draw, (, ), {, background, (, 250, ), ;, normalMaterial, (, ), ;, rotateX, (, accelerationX, *, 0.01, ), ;, rotateY, (, accelerationY, *, 0.01, ), ;, box, (, 100, ,, 100, ,, 100, ), ;, }"
    }]
}, {
    "groupName": "Hello p5",
    "examples": [{
        "name": "Simple Shapes",
        "description": "This examples includes a circle, square, triangle, and a flower.",
        "code": ""
    }, {
        "name": "Interactivity 1",
        "description": "The circle changes color when you click on it.",
        "code": " \n// for red, green, and blue color values\n, let, r, ,, g, ,, b, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, \n// Pick colors randomly\n, r, =, random, (, 255, ), ;, g, =, random, (, 255, ), ;, b, =, random, (, 255, ), ;, }, function, draw, (, ), {, background, (, 127, ), ;, \n// Draw a circle\n, strokeWeight, (, 2, ), ;, stroke, (, r, ,, g, ,, b, ), ;, fill, (, r, ,, g, ,, b, ,, 127, ), ;, ellipse, (, 360, ,, 200, ,, 200, ,, 200, ), ;, }, \n// When the user clicks the mouse\n, function, mousePressed, (, ), {, \n// Check if mouse is inside the circle\n, let, d, =, dist, (, mouseX, ,, mouseY, ,, 360, ,, 200, ), ;, if, (, d, <, 100, ), {,   , \n// Pick new random color values\n,   , r, =, random, (, 255, ), ;,   , g, =, random, (, 255, ), ;,   , b, =, random, (, 255, ), ;, }, }"
    }, {
        "name": "Interactivity 2",
        "description": "The circle changes color when you move the slider.",
        "code": ""
    }, {
        "name": "Animation",
        "description": "The circle moves.",
        "code": ""
    }, {
        "name": "Flocking",
        "description": "Demonstration of Craig Reynolds' \"Flocking\" behavior.\n(Rules: Cohesion, Separation, Alignment.)\nFrom natureofcode.com.",
        "code": " let, boids, =, [, ], ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, \n// Add an initial set of boids into the system\n, for, (, let, i, =, 0, ;, i, <, 100, ;, i, ++, ), {,   , boids, [, i, ], =, new, Boid, (, random, (, width, ), ,, random, (, height, )), ;, }, }, function, draw, (, ), {, background, (, 51, ), ;, \n// Run all the boids\n, for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   , boids, [, i, ], ., run, (, boids, ), ;, }, }, \n// Boid class\n, \n// Methods for Separation, Cohesion, Alignment added\n, class, Boid, {, constructor, (, x, ,, y, ), {,   , this, ., acceleration, =, createVector, (, 0, ,, 0, ), ;,   , this, ., velocity, =, p5, ., Vector, ., random2D, (, ), ;,   , this, ., position, =, createVector, (, x, ,, y, ), ;,   , this, ., r, =, 3.0, ;,   , this, ., maxspeed, =, 3, ;, \n// Maximum speed\n,   , this, ., maxforce, =, 0.05, ;, \n// Maximum steering force\n, }, run, (, boids, ), {,   , this, ., flock, (, boids, ), ;,   , this, ., update, (, ), ;,   , this, ., borders, (, ), ;,   , this, ., render, (, ), ;, }, \n// Forces go into acceleration\n, applyForce, (, force, ), {,   , this, ., acceleration, ., add, (, force, ), ;, }, \n// We accumulate a new acceleration each time based on three rules\n, flock, (, boids, ), {,   , let, sep, =, this, ., separate, (, boids, ), ;, \n// Separation\n,   , let, ali, =, this, ., align, (, boids, ), ;, \n// Alignment\n,   , let, coh, =, this, ., cohesion, (, boids, ), ;, \n// Cohesion\n,   , \n// Arbitrarily weight these forces\n,   , sep, ., mult, (, 2.5, ), ;,   , ali, ., mult, (, 1.0, ), ;,   , coh, ., mult, (, 1.0, ), ;,   , \n// Add the force vectors to acceleration\n,   , this, ., applyForce, (, sep, ), ;,   , this, ., applyForce, (, ali, ), ;,   , this, ., applyForce, (, coh, ), ;, }, \n// Method to update location\n, update, (, ), {,   , \n// Update velocity\n,   , this, ., velocity, ., add, (, this, ., acceleration, ), ;,   , \n// Limit speed\n,   , this, ., velocity, ., limit, (, this, ., maxspeed, ), ;,   , this, ., position, ., add, (, this, ., velocity, ), ;,   , \n// Reset acceleration to 0 each cycle\n,   , this, ., acceleration, ., mult, (, 0, ), ;, }, \n// A method that calculates and applies a steering force towards a target\n, \n// STEER = DESIRED MINUS VELOCITY\n, seek, (, target, ), {,   , let, desired, =, p5, ., Vector, ., sub, (, target, ,, this, ., position, ), ;, \n// A vector pointing from the location to the target\n,   , \n// Normalize desired and scale to maximum speed\n,   , desired, ., normalize, (, ), ;,   , desired, ., mult, (, this, ., maxspeed, ), ;,   , \n// Steering = Desired minus Velocity\n,   , let, steer, =, p5, ., Vector, ., sub, (, desired, ,, this, ., velocity, ), ;,   , steer, ., limit, (, this, ., maxforce, ), ;, \n// Limit to maximum steering force\n,   , return, steer, ;, }, \n// Draw boid as a circle\n, render, (, ), {,   , fill, (, 127, ,, 127, ), ;,   , stroke, (, 200, ), ;,   , ellipse, (, this, ., position, ., x, ,, this, ., position, ., y, ,, 16, ,, 16, ), ;, }, \n// Wraparound\n, borders, (, ), {,   , if, (, this, ., position, ., x, <, -, this, ., r, ), this, ., position, ., x, =, width, +, this, ., r, ;,   , if, (, this, ., position, ., y, <, -, this, ., r, ), this, ., position, ., y, =, height, +, this, ., r, ;,   , if, (, this, ., position, ., x, >, width, +, this, ., r, ), this, ., position, ., x, =, -, this, ., r, ;,   , if, (, this, ., position, ., y, >, height, +, this, ., r, ), this, ., position, ., y, =, -, this, ., r, ;, }, \n// Separation\n, \n// Method checks for nearby boids and steers away\n, separate, (, boids, ), {,   , let, desiredseparation, =, 25.0, ;,   , let, steer, =, createVector, (, 0, ,, 0, ), ;,   , let, count, =, 0, ;,   , \n// For every boid in the system, check if it's too close\n,   , for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   ,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   ,   , \n// If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)\n,   ,   , if, ((, d, >, 0, ), &&, (, d, <, desiredseparation, )), {,   ,   ,   , \n// Calculate vector pointing away from neighbor\n,   ,   ,   , let, diff, =, p5, ., Vector, ., sub, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   ,   ,   , diff, ., normalize, (, ), ;,   ,   ,   , diff, ., div, (, d, ), ;, \n// Weight by distance\n,   ,   ,   , steer, ., add, (, diff, ), ;,   ,   ,   , count, ++, ;, \n// Keep track of how many\n,   ,   , },   , },   , \n// Average -- divide by how many\n,   , if, (, count, >, 0, ), {,   ,   , steer, ., div, (, count, ), ;,   , },   , \n// As long as the vector is greater than 0\n,   , if, (, steer, ., mag, (, ), >, 0, ), {,   ,   , \n// Implement Reynolds: Steering = Desired - Velocity\n,   ,   , steer, ., normalize, (, ), ;,   ,   , steer, ., mult, (, this, ., maxspeed, ), ;,   ,   , steer, ., sub, (, this, ., velocity, ), ;,   ,   , steer, ., limit, (, this, ., maxforce, ), ;,   , },   , return, steer, ;, }, \n// Alignment\n, \n// For every nearby boid in the system, calculate the average velocity\n, align, (, boids, ), {,   , let, neighbordist, =, 50, ;,   , let, sum, =, createVector, (, 0, ,, 0, ), ;,   , let, count, =, 0, ;,   , for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   ,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   ,   , if, ((, d, >, 0, ), &&, (, d, <, neighbordist, )), {,   ,   ,   , sum, ., add, (, boids, [, i, ], ., velocity, ), ;,   ,   ,   , count, ++, ;,   ,   , },   , },   , if, (, count, >, 0, ), {,   ,   , sum, ., div, (, count, ), ;,   ,   , sum, ., normalize, (, ), ;,   ,   , sum, ., mult, (, this, ., maxspeed, ), ;,   ,   , let, steer, =, p5, ., Vector, ., sub, (, sum, ,, this, ., velocity, ), ;,   ,   , steer, ., limit, (, this, ., maxforce, ), ;,   ,   , return, steer, ;,   , }, else, {,   ,   , return, createVector, (, 0, ,, 0, ), ;,   , }, }, \n// Cohesion\n, \n// For the average location (i.e. center) of all nearby boids, calculate steering vector towards that location\n, cohesion, (, boids, ), {,   , let, neighbordist, =, 50, ;,   , let, sum, =, createVector, (, 0, ,, 0, ), ;, \n// Start with empty vector to accumulate all locations\n,   , let, count, =, 0, ;,   , for, (, let, i, =, 0, ;, i, <, boids, ., length, ;, i, ++, ), {,   ,   , let, d, =, p5, ., Vector, ., dist, (, this, ., position, ,, boids, [, i, ], ., position, ), ;,   ,   , if, ((, d, >, 0, ), &&, (, d, <, neighbordist, )), {,   ,   ,   , sum, ., add, (, boids, [, i, ], ., position, ), ;, \n// Add location\n,   ,   ,   , count, ++, ;,   ,   , },   , },   , if, (, count, >, 0, ), {,   ,   , sum, ., div, (, count, ), ;,   ,   , return, this, ., seek, (, sum, ), ;, \n// Steer towards the location\n,   , }, else, {,   ,   , return, createVector, (, 0, ,, 0, ), ;,   , }, }, }"
    }, {
        "name": "Weather",
        "description": "This example grabs JSON weather data from www.metaweather.com.",
        "code": ""
    }, {
        "name": "Drawing",
        "description": "Generative painting program.",
        "code": ""
    }, {
        "name": "Song",
        "description": "Play a song. You will need to include the p5.sound library for this example to work in your own project.",
        "code": " \n// The midi notes of a scale\n, let, notes, =, [, 60, ,, 62, ,, 64, ,, 65, ,, 67, ,, 69, ,, 71, ], ;, \n// For automatically playing the song\n, let, index, =, 0, ;, let, song, =, [, {, note, :, 4, ,, duration, :, 400, ,, display, :, \"D\", }, ,, {, note, :, 0, ,, duration, :, 200, ,, display, :, \"G\", }, ,, {, note, :, 1, ,, duration, :, 200, ,, display, :, \"A\", }, ,, {, note, :, 2, ,, duration, :, 200, ,, display, :, \"B\", }, ,, {, note, :, 3, ,, duration, :, 200, ,, display, :, \"C\", }, ,, {, note, :, 4, ,, duration, :, 400, ,, display, :, \"D\", }, ,, {, note, :, 0, ,, duration, :, 400, ,, display, :, \"G\", }, ,, {, note, :, 0, ,, duration, :, 400, ,, display, :, \"G\", }, ], ;, let, trigger, =, 0, ;, let, autoplay, =, false, ;, let, osc, ;, function, setup, (, ), {, createCanvas, (, 720, ,, 400, ), ;, let, div, =, createDiv, (, \"Click to play notes or \", ), div, ., id, (, \"instructions\", ), ;, let, button, =, createButton, (, \"play song automatically.\", ), ;, button, ., parent, (, \"instructions\", ), ;, \n// Trigger automatically playing\n, button, ., mousePressed, (, function, (, ), {,   , if, (, !, autoplay, ), {,   ,   , index, =, 0, ;,   ,   , autoplay, =, true, ;,   , }, }), ;, \n// A triangle oscillator\n, osc, =, new, p5, ., TriOsc, (, ), ;, \n// Start silent\n, osc, ., start, (, ), ;, osc, ., amp, (, 0, ), ;, }, \n// A function to play a note\n, function, playNote, (, note, , , duration, ), {, osc, ., freq, (, midiToFreq, (, note, )), ;, \n// Fade it in\n, osc, ., fade, (, 0.5, ,, 0.2, ), ;, \n// If we sest a duration, fade it out\n, if, (, duration, ), {,   , setTimeout, (, function, (, ), {,   ,   , osc, ., fade, (, 0, ,, 0.2, ), ;,   , }, ,, duration, -50, ), ;, }, }, function, draw, (, ), {, \n// If we are autoplaying and it's time for the next note\n, if, (, autoplay, &&, millis, (, ), >, trigger, ), {,   , playNote, (, notes, [, song, [, index, ], ., note, ], ,, song, [, index, ], ., duration, ), ;,   , trigger, =, millis, (, ), +, song, [, index, ], ., duration, ;,   , \n// Move to the next note\n,   , index, ++, ;, \n// We're at the end, stop autoplaying.\n, }, else, if, (, index, >=, song, ., length, ), {,   , autoplay, =, false, ;, }, \n// Draw a keyboard\n, \n// The width for each key\n, let, w, =, width, /, notes, ., length, ;, for, (, let, i, =, 0, ;, i, <, notes, ., length, ;, i, ++, ), {,   , let, x, =, i, *, w, ;,   , \n// If the mouse is over the key\n,   , if, (, mouseX, >, x, &&, mouseX, <, x, +, w, &&, mouseY, <, height, ), {,   ,   , \n// If we're clicking\n,   ,   , if, (, mouseIsPressed, ), {,   ,   ,   , fill, (, 100, ,, 255, ,, 200, ), ;,   ,   , \n// Or just rolling over\n,   ,   , }, else, {,   ,   ,   , fill, (, 127, ), ;,   ,   , },   , }, else, {,   ,   , fill, (, 200, ), ;,   , },   , \n// Or if we're playing the song, let's highlight it too\n,   , if, (, autoplay, &&, i, ===, song, [, index, -1, ], ., note, ), {,   ,   , fill, (, 100, ,, 255, ,, 200, ), ;,   , },   , \n// Draw the key\n,   , rect, (, x, ,, 0, ,, w, -1, ,, height, -1, ), ;, }, }, \n// When we click\n, function, mousePressed, (, event, ), {, if, (, event, ., button, ==, 0, &&, event, ., clientX, <, width, &&, event, ., clientY, <, height, ), {,   , \n// Map mouse to the key index\n,   , let, key, =, floor, (, map, (, mouseX, ,, 0, ,, width, ,, 0, ,, notes, ., length, )), ;,   , playNote, (, notes, [, key, ]), ;, }, }, \n// Fade it out when we release\n, function, mouseReleased, (, ), {, osc, ., fade, (, 0, ,, 0.5, ), ;, }"
    }]
}]